/*
* generated by Xtext
*/
grammar InternalIbl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package roadblock.xtext.ibl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package roadblock.xtext.ibl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import roadblock.xtext.ibl.services.IblGrammarAccess;

}

@parser::members {

 	private IblGrammarAccess grammarAccess;
 	
    public InternalIblParser(TokenStream input, IblGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected IblGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMembersModelMemberParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleModelMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"ModelMember");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleModelMember
entryRuleModelMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelMemberRule()); }
	 iv_ruleModelMember=ruleModelMember 
	 { $current=$iv_ruleModelMember.current; } 
	 EOF 
;

// Rule ModelMember
ruleModelMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelMemberAccess().getImportStatementParserRuleCall_0()); 
    }
    this_ImportStatement_0=ruleImportStatement
    { 
        $current = $this_ImportStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelMemberAccess().getFunctionDefinitionParserRuleCall_1()); 
    }
    this_FunctionDefinition_1=ruleFunctionDefinition
    { 
        $current = $this_FunctionDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImportStatement
entryRuleImportStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportStatementRule()); }
	 iv_ruleImportStatement=ruleImportStatement 
	 { $current=$iv_ruleImportStatement.current; } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImportStatementAccess().getImportAction_0(),
            $current);
    }
)	otherlv_1='import' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportStatementAccess().getImportKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportStatementAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0()); 
	    }
		lv_importedNamespace_2_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportStatementRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_2_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_0(),
            $current);
    }
)	otherlv_1='define' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDefinitionAccess().getDefineKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getNameVariableNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='typeof' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getTypeofKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getTypeFunctionTypeParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleFunctionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"FunctionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParametersFunctionParameterMemberParserRuleCall_6_0_0()); 
	    }
		lv_parameters_6_0=ruleFunctionParameterMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"FunctionParameterMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParametersFunctionParameterMemberParserRuleCall_6_1_1_0()); 
	    }
		lv_parameters_8_0=ruleFunctionParameterMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_8_0, 
        		"FunctionParameterMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_7());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDefinitionAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getMembersFunctionBodyMemberParserRuleCall_9_0()); 
	    }
		lv_members_11_0=ruleFunctionBodyMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_11_0, 
        		"FunctionBodyMember");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionDefinitionAccess().getRightCurlyBracketKeyword_10());
    }
(	otherlv_13='USES' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFunctionDefinitionAccess().getUSESKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getUsesFunctionUseMemberParserRuleCall_11_1_0()); 
	    }
		lv_uses_14_0=ruleFunctionUseMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"uses",
        		lv_uses_14_0, 
        		"FunctionUseMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_11_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getUsesFunctionUseMemberParserRuleCall_11_2_1_0()); 
	    }
		lv_uses_16_0=ruleFunctionUseMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"uses",
        		lv_uses_16_0, 
        		"FunctionUseMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleFunctionType
entryRuleFunctionType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); } 
	 iv_ruleFunctionType=ruleFunctionType 
	 { $current=$iv_ruleFunctionType.current.getText(); }  
	 EOF 
;

// Rule FunctionType
ruleFunctionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PROCESS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getPROCESSKeyword_0()); 
    }

    |
	kw='CELL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getCELLKeyword_1()); 
    }

    |
	kw='SYSTEM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getSYSTEMKeyword_2()); 
    }

    |
	kw='REGION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getREGIONKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleFunctionParameterMember
entryRuleFunctionParameterMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionParameterMemberRule()); }
	 iv_ruleFunctionParameterMember=ruleFunctionParameterMember 
	 { $current=$iv_ruleFunctionParameterMember.current; } 
	 EOF 
;

// Rule FunctionParameterMember
ruleFunctionParameterMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionParameterMemberAccess().getTypeVariableTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionParameterMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionParameterMemberAccess().getNameVariableNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionParameterMemberRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionParameterMemberAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionParameterMemberAccess().getScopeFunctionParameterScopeParserRuleCall_2_1_0()); 
	    }
		lv_scope_3_0=ruleFunctionParameterScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionParameterMemberRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_3_0, 
        		"FunctionParameterScope");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFunctionParameterScope
entryRuleFunctionParameterScope returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionParameterScopeRule()); } 
	 iv_ruleFunctionParameterScope=ruleFunctionParameterScope 
	 { $current=$iv_ruleFunctionParameterScope.current.getText(); }  
	 EOF 
;

// Rule FunctionParameterScope
ruleFunctionParameterScope returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='required' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionParameterScopeAccess().getRequiredKeyword_0()); 
    }

    |
	kw='returned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionParameterScopeAccess().getReturnedKeyword_1()); 
    }

    |
	kw='optional' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionParameterScopeAccess().getOptionalKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleFunctionBodyMember
entryRuleFunctionBodyMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyMemberRule()); }
	 iv_ruleFunctionBodyMember=ruleFunctionBodyMember 
	 { $current=$iv_ruleFunctionBodyMember.current; } 
	 EOF 
;

// Rule FunctionBodyMember
ruleFunctionBodyMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getRuleDefinitionParserRuleCall_0()); 
    }
    this_RuleDefinition_0=ruleRuleDefinition
    { 
        $current = $this_RuleDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getDeviceDefinitionParserRuleCall_1()); 
    }
    this_DeviceDefinition_1=ruleDeviceDefinition
    { 
        $current = $this_DeviceDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getVariableDefinitionParserRuleCall_2()); 
    }
    this_VariableDefinition_2=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getVariableAssignmentParserRuleCall_3()); 
    }
    this_VariableAssignment_3=ruleVariableAssignment
    { 
        $current = $this_VariableAssignment_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getATGCDefinitionParserRuleCall_4()); 
    }
    this_ATGCDefinition_4=ruleATGCDefinition
    { 
        $current = $this_ATGCDefinition_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyMemberAccess().getPropertyDefinitionParserRuleCall_5()); 
    }
    this_PropertyDefinition_5=rulePropertyDefinition
    { 
        $current = $this_PropertyDefinition_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionUseMember
entryRuleFunctionUseMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionUseMemberRule()); }
	 iv_ruleFunctionUseMember=ruleFunctionUseMember 
	 { $current=$iv_ruleFunctionUseMember.current; } 
	 EOF 
;

// Rule FunctionUseMember
ruleFunctionUseMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionUseMemberAccess().getTypeVariableTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionUseMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionUseMemberAccess().getNameVariableNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionUseMemberRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableName
entryRuleVariableName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableNameRule()); } 
	 iv_ruleVariableName=ruleVariableName 
	 { $current=$iv_ruleVariableName.current.getText(); }  
	 EOF 
;

// Rule VariableName
ruleVariableName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVariableNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleVariableComplex
entryRuleVariableComplex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableComplexRule()); }
	 iv_ruleVariableComplex=ruleVariableComplex 
	 { $current=$iv_ruleVariableComplex.current; } 
	 EOF 
;

// Rule VariableComplex
ruleVariableComplex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableComplexAccess().getVariableComplexAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableComplexAccess().getComponentsVariableNameParserRuleCall_1_0()); 
	    }
		lv_components_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableComplexRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='~' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableComplexAccess().getTildeKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableComplexAccess().getComponentsVariableNameParserRuleCall_2_1_0()); 
	    }
		lv_components_3_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableComplexRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_3_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleVariableAttribute
entryRuleVariableAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAttributeRule()); }
	 iv_ruleVariableAttribute=ruleVariableAttribute 
	 { $current=$iv_ruleVariableAttribute.current; } 
	 EOF 
;

// Rule VariableAttribute
ruleVariableAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAttributeAccess().getVariableAttributeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAttributeAccess().getNameVariableNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAttributeAccess().getFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAttributeAccess().getAttributeVariableNameParserRuleCall_3_0()); 
	    }
		lv_attribute_3_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAttributeRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_3_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	 iv_ruleVariableDefinition=ruleVariableDefinition 
	 { $current=$iv_ruleVariableDefinition.current; } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDefinitionAccess().getVariableDefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getQualifierVariableQualifierParserRuleCall_1_0()); 
	    }
		lv_qualifier_1_0=ruleVariableQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"qualifier",
        		lv_qualifier_1_0, 
        		"VariableQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeVariableTypeParserRuleCall_2_0_0_0()); 
	    }
		lv_type_2_0=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNameVariableNameParserRuleCall_2_0_1_0()); 
	    }
		lv_name_3_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getCollectionCollectionIDParserRuleCall_2_1_0_0()); 
	    }
		lv_collection_4_0=ruleCollectionID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"collection",
        		lv_collection_4_0, 
        		"CollectionID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDefinitionAccess().getLessThanSignKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeVariableTypeParserRuleCall_2_1_2_0()); 
	    }
		lv_type_6_0=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVariableDefinitionAccess().getGreaterThanSignKeyword_2_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNameVariableNameParserRuleCall_2_1_4_0()); 
	    }
		lv_name_8_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)))(	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_3_0());
    }
((	otherlv_10='new' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getVariableDefinitionAccess().getNewKeyword_3_1_0_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getConstructorVariableTypeParserRuleCall_3_1_0_1_0_0()); 
	    }
		lv_constructor_11_1=ruleVariableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_11_1, 
        		"VariableType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getConstructorVariableNameParserRuleCall_3_1_0_1_0_1()); 
	    }
		lv_constructor_11_2=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_11_2, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getVariableDefinitionAccess().getLeftParenthesisKeyword_3_1_0_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getParametersParameterAssignmentParserRuleCall_3_1_0_3_0_0()); 
	    }
		lv_parameters_13_0=ruleParameterAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_13_0, 
        		"ParameterAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getVariableDefinitionAccess().getCommaKeyword_3_1_0_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getParametersParameterAssignmentParserRuleCall_3_1_0_3_1_1_0()); 
	    }
		lv_parameters_15_0=ruleParameterAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_15_0, 
        		"ParameterAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_16=')' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getVariableDefinitionAccess().getRightParenthesisKeyword_3_1_0_4());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getValueVariableExpressionObjectParserRuleCall_3_1_1_0()); 
	    }
		lv_value_17_0=ruleVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_17_0, 
        		"VariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleParameterAssignment
entryRuleParameterAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterAssignmentRule()); }
	 iv_ruleParameterAssignment=ruleParameterAssignment 
	 { $current=$iv_ruleParameterAssignment.current; } 
	 EOF 
;

// Rule ParameterAssignment
ruleParameterAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAssignmentAccess().getNameVariableNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterAssignmentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAssignmentAccess().getValueVariableExpressionObjectParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"VariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableQualifier
entryRuleVariableQualifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableQualifierRule()); } 
	 iv_ruleVariableQualifier=ruleVariableQualifier 
	 { $current=$iv_ruleVariableQualifier.current.getText(); }  
	 EOF 
;

// Rule VariableQualifier
ruleVariableQualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='observable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableQualifierAccess().getObservableKeyword()); 
    }

    ;





// Entry rule entryRuleVariableType
entryRuleVariableType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableTypeRule()); } 
	 iv_ruleVariableType=ruleVariableType 
	 { $current=$iv_ruleVariableType.current.getText(); }  
	 EOF 
;

// Rule VariableType
ruleVariableType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='MOLECULE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getMOLECULEKeyword_0()); 
    }

    |
	kw='CELL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getCELLKeyword_1()); 
    }

    |
	kw='RIBOSOME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getRIBOSOMEKeyword_2()); 
    }

    |
	kw='PROMOTER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getPROMOTERKeyword_3()); 
    }

    |
	kw='PROTEIN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getPROTEINKeyword_4()); 
    }

    |
	kw='DNA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getDNAKeyword_5()); 
    }

    |
	kw='RNA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getRNAKeyword_6()); 
    }

    |
	kw='GENE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getGENEKeyword_7()); 
    }

    |
	kw='INTEGER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getINTEGERKeyword_8()); 
    }

    |
	kw='RATE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getRATEKeyword_9()); 
    }

    |
	kw='PROCESS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getPROCESSKeyword_10()); 
    }

    |
	kw='SYSTEM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableTypeAccess().getSYSTEMKeyword_11()); 
    }
)
    ;





// Entry rule entryRuleCollectionID
entryRuleCollectionID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionIDRule()); } 
	 iv_ruleCollectionID=ruleCollectionID 
	 { $current=$iv_ruleCollectionID.current.getText(); }  
	 EOF 
;

// Rule CollectionID
ruleCollectionID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='LIST' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionIDAccess().getLISTKeyword_0()); 
    }

    |
	kw='SET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionIDAccess().getSETKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentRule()); }
	 iv_ruleVariableAssignment=ruleVariableAssignment 
	 { $current=$iv_ruleVariableAssignment.current; } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAssignmentAccess().getVariableAssignmentAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getVariableVariableAssignmentObjectParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableAssignmentObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableAssignmentObject");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getExpressionVariableExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleVariableExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"VariableExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableAssignmentObject
entryRuleVariableAssignmentObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentObjectRule()); }
	 iv_ruleVariableAssignmentObject=ruleVariableAssignmentObject 
	 { $current=$iv_ruleVariableAssignmentObject.current; } 
	 EOF 
;

// Rule VariableAssignmentObject
ruleVariableAssignmentObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAssignmentObjectAccess().getVariableAssignmentObjectAction_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getVariableAssignmentObjectAccess().getVariableNameParserRuleCall_0_1()); 
    }
ruleVariableName
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getVariableAssignmentObjectAccess().getVariableAttributeParserRuleCall_1()); 
    }
    this_VariableAttribute_2=ruleVariableAttribute
    { 
        $current = $this_VariableAttribute_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	 iv_ruleVariableExpression=ruleVariableExpression 
	 { $current=$iv_ruleVariableExpression.current; } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableExpressionAccess().getVariableExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableExpressionAccess().getMembersVariableExpressionObjectParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableExpressionRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"VariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getVariableExpressionAccess().getVariableExpressionOperatorParserRuleCall_2_0()); 
    }
ruleVariableExpressionOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableExpressionAccess().getMembersVariableExpressionObjectParserRuleCall_2_1_0()); 
	    }
		lv_members_3_0=ruleVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableExpressionRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"VariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableExpressionObject
entryRuleVariableExpressionObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionObjectRule()); }
	 iv_ruleVariableExpressionObject=ruleVariableExpressionObject 
	 { $current=$iv_ruleVariableExpressionObject.current; } 
	 EOF 
;

// Rule VariableExpressionObject
ruleVariableExpressionObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableExpressionObjectAccess().getAtomicVariableExpressionObjectParserRuleCall_0()); 
    }
    this_AtomicVariableExpressionObject_0=ruleAtomicVariableExpressionObject
    { 
        $current = $this_AtomicVariableExpressionObject_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableExpressionObjectAccess().getCompoundVariableExpressionObjectParserRuleCall_1()); 
    }
    this_CompoundVariableExpressionObject_1=ruleCompoundVariableExpressionObject
    { 
        $current = $this_CompoundVariableExpressionObject_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicVariableExpressionObject
entryRuleAtomicVariableExpressionObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectRule()); }
	 iv_ruleAtomicVariableExpressionObject=ruleAtomicVariableExpressionObject 
	 { $current=$iv_ruleAtomicVariableExpressionObject.current; } 
	 EOF 
;

// Rule AtomicVariableExpressionObject
ruleAtomicVariableExpressionObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicVariableExpressionObjectAccess().getAtomicVariableExpressionObjectAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectAccess().getVariableVariableNameParserRuleCall_0_1_0()); 
	    }
		lv_variable_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectAccess().getAttributeVariableAttributeParserRuleCall_1_0()); 
	    }
		lv_attribute_2_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_2_0, 
        		"VariableAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectAccess().getComplexVariableComplexParserRuleCall_2_0()); 
	    }
		lv_complex_3_0=ruleVariableComplex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"complex",
        		lv_complex_3_0, 
        		"VariableComplex");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectAccess().getValueREALParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"REAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicVariableExpressionObjectAccess().getQuantityQuantityParserRuleCall_4_0()); 
	    }
		lv_quantity_5_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"quantity",
        		lv_quantity_5_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_6_0=RULE_STRING
		{
			newLeafNode(lv_string_6_0, grammarAccess.getAtomicVariableExpressionObjectAccess().getStringSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicVariableExpressionObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_6_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCompoundVariableExpressionObject
entryRuleCompoundVariableExpressionObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundVariableExpressionObjectRule()); }
	 iv_ruleCompoundVariableExpressionObject=ruleCompoundVariableExpressionObject 
	 { $current=$iv_ruleCompoundVariableExpressionObject.current; } 
	 EOF 
;

// Rule CompoundVariableExpressionObject
ruleCompoundVariableExpressionObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompoundVariableExpressionObjectAccess().getCompoundVariableExpressionObjectAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundVariableExpressionObjectAccess().getListListParserRuleCall_1_0()); 
	    }
		lv_list_1_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundVariableExpressionObjectRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_1_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableExpressionOperator
entryRuleVariableExpressionOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionOperatorRule()); } 
	 iv_ruleVariableExpressionOperator=ruleVariableExpressionOperator 
	 { $current=$iv_ruleVariableExpressionOperator.current.getText(); }  
	 EOF 
;

// Rule VariableExpressionOperator
ruleVariableExpressionOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableExpressionOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableExpressionOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableExpressionOperatorAccess().getVerticalLineKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleRuleDefinition
entryRuleRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDefinitionRule()); }
	 iv_ruleRuleDefinition=ruleRuleDefinition 
	 { $current=$iv_ruleRuleDefinition.current; } 
	 EOF 
;

// Rule RuleDefinition
ruleRuleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleDefinitionAccess().getRuleDefinitionAction_0(),
            $current);
    }
)	otherlv_1='RULE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleDefinitionAccess().getRULEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDefinitionAccess().getNameVariableNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleDefinitionAccess().getColonKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDefinitionAccess().getLhsRuleObjectParserRuleCall_4_0_0()); 
	    }
		lv_lhs_4_0=ruleRuleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDefinitionRule());
	        }
       		add(
       			$current, 
       			"lhs",
        		lv_lhs_4_0, 
        		"RuleObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='+' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleDefinitionAccess().getPlusSignKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDefinitionAccess().getLhsRuleObjectParserRuleCall_4_1_1_0()); 
	    }
		lv_lhs_6_0=ruleRuleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDefinitionRule());
	        }
       		add(
       			$current, 
       			"lhs",
        		lv_lhs_6_0, 
        		"RuleObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_7='->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleDefinitionAccess().getHyphenMinusGreaterThanSignKeyword_5_0());
    }

    |(
(
		lv_reversible_8_0=	'<->' 
    {
        newLeafNode(lv_reversible_8_0, grammarAccess.getRuleDefinitionAccess().getReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDefinitionRule());
	        }
       		setWithLastConsumed($current, "reversible", true, "<->");
	    }

)
))((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDefinitionAccess().getRhsRuleObjectParserRuleCall_6_0_0()); 
	    }
		lv_rhs_9_0=ruleRuleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDefinitionRule());
	        }
       		add(
       			$current, 
       			"rhs",
        		lv_rhs_9_0, 
        		"RuleObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='+' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRuleDefinitionAccess().getPlusSignKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDefinitionAccess().getRhsRuleObjectParserRuleCall_6_1_1_0()); 
	    }
		lv_rhs_11_0=ruleRuleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDefinitionRule());
	        }
       		add(
       			$current, 
       			"rhs",
        		lv_rhs_11_0, 
        		"RuleObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleRuleObject
entryRuleRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleObjectRule()); }
	 iv_ruleRuleObject=ruleRuleObject 
	 { $current=$iv_ruleRuleObject.current; } 
	 EOF 
;

// Rule RuleObject
ruleRuleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleObjectAccess().getRuleObjectAction_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getRuleObjectAccess().getVariableNameParserRuleCall_0_1()); 
    }
ruleVariableName
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getRuleObjectAccess().getVariableComplexParserRuleCall_1()); 
    }
    this_VariableComplex_2=ruleVariableComplex
    { 
        $current = $this_VariableComplex_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDeviceDefinition
entryRuleDeviceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeviceDefinitionRule()); }
	 iv_ruleDeviceDefinition=ruleDeviceDefinition 
	 { $current=$iv_ruleDeviceDefinition.current; } 
	 EOF 
;

// Rule DeviceDefinition
ruleDeviceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeviceDefinitionAccess().getDeviceDefinitionAction_0(),
            $current);
    }
)	otherlv_1='DEVICE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeviceDefinitionAccess().getDEVICEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getNameVariableNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeviceDefinitionAccess().getEqualsSignKeyword_3());
    }
	otherlv_4='DEVICE' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeviceDefinitionAccess().getDEVICEKeyword_4());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeviceDefinitionAccess().getLeftParenthesisKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getPartsVariableNameParserRuleCall_6_0_0()); 
	    }
		lv_parts_6_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_6_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDeviceDefinitionAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getPartsVariableNameParserRuleCall_6_1_1_0()); 
	    }
		lv_parts_8_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_8_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDeviceDefinitionAccess().getRightParenthesisKeyword_7());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDeviceDefinitionAccess().getLeftParenthesisKeyword_8());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getParametersParameterAssignmentParserRuleCall_9_0_0()); 
	    }
		lv_parameters_11_0=ruleParameterAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_11_0, 
        		"ParameterAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDeviceDefinitionAccess().getCommaKeyword_9_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getParametersParameterAssignmentParserRuleCall_9_1_1_0()); 
	    }
		lv_parameters_13_0=ruleParameterAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_13_0, 
        		"ParameterAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDeviceDefinitionAccess().getRightParenthesisKeyword_10());
    }
	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDeviceDefinitionAccess().getLeftCurlyBracketKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeviceDefinitionAccess().getMembersDeviceMembersParserRuleCall_12_0()); 
	    }
		lv_members_16_0=ruleDeviceMembers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeviceDefinitionRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_16_0, 
        		"DeviceMembers");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDeviceDefinitionAccess().getRightCurlyBracketKeyword_13());
    }
)
;





// Entry rule entryRuleDeviceMembers
entryRuleDeviceMembers returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeviceMembersRule()); }
	 iv_ruleDeviceMembers=ruleDeviceMembers 
	 { $current=$iv_ruleDeviceMembers.current; } 
	 EOF 
;

// Rule DeviceMembers
ruleDeviceMembers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeviceMembersAccess().getVariableDefinitionParserRuleCall_0()); 
    }
    this_VariableDefinition_0=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeviceMembersAccess().getPropertyDefinitionParserRuleCall_1()); 
    }
    this_PropertyDefinition_1=rulePropertyDefinition
    { 
        $current = $this_PropertyDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleATGCDefinition
entryRuleATGCDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getATGCDefinitionRule()); }
	 iv_ruleATGCDefinition=ruleATGCDefinition 
	 { $current=$iv_ruleATGCDefinition.current; } 
	 EOF 
;

// Rule ATGCDefinition
ruleATGCDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getATGCDefinitionAccess().getATGCDefinitionAction_0(),
            $current);
    }
)	otherlv_1='ATGC' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getATGCDefinitionAccess().getATGCKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getATGCDefinitionAccess().getCommandATGCCommandParserRuleCall_2_0()); 
	    }
		lv_command_2_0=ruleATGCCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATGCDefinitionRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_2_0, 
        		"ATGCCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getATGCDefinitionAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getATGCDefinitionAccess().getArgumentsVariableNameParserRuleCall_4_0()); 
	    }
		lv_arguments_4_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATGCDefinitionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getATGCDefinitionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getATGCDefinitionAccess().getArgumentsVariableNameParserRuleCall_5_1_0()); 
	    }
		lv_arguments_6_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATGCDefinitionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleATGCCommand
entryRuleATGCCommand returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATGCCommandRule()); } 
	 iv_ruleATGCCommand=ruleATGCCommand 
	 { $current=$iv_ruleATGCCommand.current.getText(); }  
	 EOF 
;

// Rule ATGCCommand
ruleATGCCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ARRANGE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATGCCommandAccess().getARRANGEKeyword()); 
    }

    ;





// Entry rule entryRulePropertyDefinition
entryRulePropertyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDefinitionRule()); }
	 iv_rulePropertyDefinition=rulePropertyDefinition 
	 { $current=$iv_rulePropertyDefinition.current; } 
	 EOF 
;

// Rule PropertyDefinition
rulePropertyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertyDefinitionAccess().getPropertyDefinitionAction_0(),
            $current);
    }
)	otherlv_1='VERIFY' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyDefinitionAccess().getVERIFYKeyword_1());
    }
((	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyDefinitionAccess().getLeftSquareBracketKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getPropertyPropertyParserRuleCall_2_0_1_0()); 
	    }
		lv_property_3_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		add(
       			$current, 
       			"property",
        		lv_property_3_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getBooleanOperatorParserRuleCall_2_0_2_0()); 
    }
ruleBooleanOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getPropertyPropertyParserRuleCall_2_0_2_1_0()); 
	    }
		lv_property_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		add(
       			$current, 
       			"property",
        		lv_property_5_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPropertyDefinitionAccess().getRightSquareBracketKeyword_2_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getConditionPropertyConditionParserRuleCall_2_0_4_0()); 
	    }
		lv_condition_7_0=rulePropertyCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_7_0, 
        		"PropertyCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='EXPECTED' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPropertyDefinitionAccess().getEXPECTEDKeyword_2_1_0());
    }
	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPropertyDefinitionAccess().getLeftSquareBracketKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getNameVariableNameParserRuleCall_2_1_2_0()); 
	    }
		lv_name_10_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPropertyDefinitionAccess().getRightSquareBracketKeyword_2_1_3());
    }
	otherlv_12='AT TIME INSTANT' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPropertyDefinitionAccess().getATTIMEINSTANTKeyword_2_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getTimeQuantityParserRuleCall_2_1_5_0()); 
	    }
		lv_time_13_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_13_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='IS' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPropertyDefinitionAccess().getISKeyword_2_1_6());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0()); 
	    }
		lv_operator_15_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_15_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDefinitionAccess().getConcentrationQuantityParserRuleCall_2_1_7_0_1_0()); 
	    }
		lv_concentration_16_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDefinitionRule());
	        }
       		set(
       			$current, 
       			"concentration",
        		lv_concentration_16_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_17='?' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPropertyDefinitionAccess().getQuestionMarkKeyword_2_1_7_1());
    }
))))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertyAccess().getPropertyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getLhsVariableNameParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getOperatorRelationalOperatorParserRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getRhsQuantityParserRuleCall_3_0()); 
	    }
		lv_rhs_3_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePropertyCondition
entryRulePropertyCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyConditionRule()); }
	 iv_rulePropertyCondition=rulePropertyCondition 
	 { $current=$iv_rulePropertyCondition.current; } 
	 EOF 
;

// Rule PropertyCondition
rulePropertyCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertyConditionAccess().getPropertyConditionAction_0(),
            $current);
    }
)(	otherlv_1='WILL HOLD' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyConditionAccess().getWILLHOLDKeyword_1_0());
    }

    |	otherlv_2='NEVER HOLDS' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyConditionAccess().getNEVERHOLDSKeyword_1_1());
    }

    |	otherlv_3='ALWAYS HOLDS' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyConditionAccess().getALWAYSHOLDSKeyword_1_2());
    }
)(	otherlv_4='WITHIN TIME BOUND' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyConditionAccess().getWITHINTIMEBOUNDKeyword_2_0());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyConditionAccess().getLeftSquareBracketKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getLowerBoundQuantityParserRuleCall_2_2_0()); 
	    }
		lv_lowerBound_6_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_6_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPropertyConditionAccess().getCommaKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getUpperBoundsQuantityParserRuleCall_2_4_0()); 
	    }
		lv_upperBounds_8_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"upperBounds",
        		lv_upperBounds_8_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPropertyConditionAccess().getRightSquareBracketKeyword_2_5());
    }
(	otherlv_10='WITH PROBABILITY BOUND' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPropertyConditionAccess().getWITHPROBABILITYBOUNDKeyword_2_6_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0()); 
	    }
		lv_operator_11_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_11_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getProbabilityREALParserRuleCall_2_6_1_0_1_0()); 
	    }
		lv_probability_12_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"probability",
        		lv_probability_12_0, 
        		"REAL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_13='?' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPropertyConditionAccess().getQuestionMarkKeyword_2_6_1_1());
    }
))?)?(	otherlv_14='GIVEN' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPropertyConditionAccess().getGIVENKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getInitialConditionsPropertyInitialConditionParserRuleCall_3_1_0()); 
	    }
		lv_initialConditions_15_0=rulePropertyInitialCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		add(
       			$current, 
       			"initialConditions",
        		lv_initialConditions_15_0, 
        		"PropertyInitialCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPropertyConditionAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getInitialConditionsPropertyInitialConditionParserRuleCall_3_2_1_0()); 
	    }
		lv_initialConditions_17_0=rulePropertyInitialCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		add(
       			$current, 
       			"initialConditions",
        		lv_initialConditions_17_0, 
        		"PropertyInitialCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRulePropertyInitialCondition
entryRulePropertyInitialCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyInitialConditionRule()); }
	 iv_rulePropertyInitialCondition=rulePropertyInitialCondition 
	 { $current=$iv_rulePropertyInitialCondition.current; } 
	 EOF 
;

// Rule PropertyInitialCondition
rulePropertyInitialCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertyInitialConditionAccess().getPropertyInitialConditionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyInitialConditionAccess().getVariableVariableAssignmentObjectParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableAssignmentObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyInitialConditionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"VariableAssignmentObject");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyInitialConditionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyInitialConditionAccess().getValueQuantityParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyInitialConditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREALRule()); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getREALAccess().getDecimalParserRuleCall_0()); 
    }
    this_Decimal_0=ruleDecimal    {
		$current.merge(this_Decimal_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getREALAccess().getDecimalExpParserRuleCall_1()); 
    }
    this_DecimalExp_1=ruleDecimalExp    {
		$current.merge(this_DecimalExp_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDecimal
entryRuleDecimal returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getDecimalRule()); } 
	 iv_ruleDecimal=ruleDecimal 
	 { $current=$iv_ruleDecimal.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Decimal
ruleDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2_1()); 
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDecimalExp
entryRuleDecimalExp returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getDecimalExpRule()); } 
	 iv_ruleDecimalExp=ruleDecimalExp 
	 { $current=$iv_ruleDecimalExp.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DecimalExp
ruleDecimalExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_2_1()); 
    }
)?(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getEKeyword_3_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getEKeyword_3_1()); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getPlusSignKeyword_4_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_5()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	 iv_ruleQuantity=ruleQuantity 
	 { $current=$iv_ruleQuantity.current; } 
	 EOF 
;

// Rule Quantity
ruleQuantity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuantityAccess().getQuantityAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantityAccess().getValueREALParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantityRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"REAL");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantityAccess().getUnitsUnitParserRuleCall_2_0()); 
	    }
		lv_units_2_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantityRule());
	        }
       		set(
       			$current, 
       			"units",
        		lv_units_2_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnit
entryRuleUnit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); } 
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current.getText(); }  
	 EOF 
;

// Rule Unit
ruleUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getSKeyword_0()); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMinKeyword_1()); 
    }

    |
	kw='mins' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMinsKeyword_2()); 
    }

    |
	kw='s^-1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getS1Keyword_3()); 
    }

    |
	kw='min^-1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMin1Keyword_4()); 
    }

    |
	kw='M' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMKeyword_5()); 
    }

    |
	kw='mM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMMKeyword_6()); 
    }

    |
	kw='uM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getUMKeyword_7()); 
    }

    |
	kw='nM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getNMKeyword_8()); 
    }

    |
	kw='pM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getPMKeyword_9()); 
    }

    |
	kw='fM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getFMKeyword_10()); 
    }

    |
	kw='molecule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMoleculeKeyword_11()); 
    }

    |
	kw='molecules' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitAccess().getMoleculesKeyword_12()); 
    }
)
    ;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); } 
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_3()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanOperatorRule()); } 
	 iv_ruleBooleanOperator=ruleBooleanOperator 
	 { $current=$iv_ruleBooleanOperator.current.getText(); }  
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getAmpersandKeyword_0()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getVerticalLineKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListAccess().getListAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getEntriesAtomicVariableExpressionObjectParserRuleCall_2_0()); 
	    }
		lv_entries_2_0=ruleAtomicVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_2_0, 
        		"AtomicVariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0()); 
	    }
		lv_entries_4_0=ruleAtomicVariableExpressionObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_4_0, 
        		"AtomicVariableExpressionObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListAccess().getRightSquareBracketKeyword_4());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


