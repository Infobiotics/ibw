///////////////////
// biosensor01.ibl //
///////////////////

// edited 12/08/13

// jamie twycross, CL 2013

/////////////////////////////////
// import objects from library //
/////////////////////////////////

import library01

/////////////////////////
// define lattice site //
/////////////////////////

define site1 typeof REGION () {
        MOLECULE SA = new MOLECULE(displayID = "SA", degradationRate = 1 s^-1, concentration = 100 uM)
        SensorCell myCell = new SensorCell(signal = SA, displayName = "A Cell")
}

// a new useful process

define DualPromoterProteinExpression typeof Process(
        MOLECULE signal1,
        PROMOTER promoter1,
        MOLECULE signal2,
        PROMOTER promoter2,
        GENE gene,
        PROTEIN protein: returned){

        // Model the dual promoter as an OR

        UpRegulatedProteinExpression signal1UpRegulated = new UpRegulatedProteinExpression(signal = signal1, promoter = promoter1, gene = gene, protein = protein    )   
        UpRegulatedProteinExpression signal2UpRegulated = new UpRegulatedProteinExpression(signal = signal2, promoter = promoter2, gene = gene, protein = protein    )

}

/////////////////
// define cell //
/////////////////

define SensorCell typeof CELL(MOLECULE signal){
        // define molecular elements
        observable RIBOSOME ribosome
        observable RNA rnaP

        CHASSIS chassis = new CHASSIS(organism = "ecoli")

        PROMOTER PnahR = new PROMOTER(URI = "biobricks://...")
        GENE nahR = new GENE(URI = "biofab://")
        PROTEIN NahR = new PROTEIN(URI = "db://...")

        PROMOTER Psal = new PROMOTER(URI = "biofab://")
        GENE xylS2 = new GENE(sequence = "ATTGTGT")
        PROTEIN XylS2 = new PROTEIN()

        PROMOTER Pm = new PROMOTER(sequence = "ATTGTGT")
        GENE rFP = new GENE(sequence = "TTGTGTG")
        PROTEIN RFP = new PROTEIN()

        INTEGER plasmidNumber = 500

        // devices have two sets of arguments: genetic parts and lists of molecules consumed or produced by the device
        DEVICE D1 = new DEVICE(parts = [PnahR, nahR, lasR])(produced = [NahR, LasR]){
                PROCESS process1 = new ConstitutiveProteinExpression(promoter = PnahR, gene = nahR, protein = NahR)
   }

        DEVICE D2 = new DEVICE(parts = [Psal, xylS2])(consumed = [SA~NahR], produced = [XylS2]){
                // how the parts are arranged
                ATGC ARRANGE : Psal, xylS2
                // rates
                RATE myRates = new RATE(bindingRate = 10.0 s^-1, transcriptionRate = 3 min^-1)
                // processes
                PROCESS process1 = new UpRegulatedProteinExpression
                        (regulator = SA~NahR, promoter = Psal, gene = xylS2, protein = XylS2, rates = myRates)
                // properties should be allowed for device and cell levels
                VERIFY [ Xysl2 > 0 uM ] WILL HOLD
        }

        DEVICE D3 = new DEVICE(parts = [Pm, PlasR, gFP])(consumed = [SA~XylS2, AHL~LasR], produced = [GFP]){
                PROCESS process1 = new DualPromoterProteinExpression(
                        signal1 = SA~XylS2,
                        promoter1 = Pm,
                        signal2 = AHL~LasR,
                        promoter2 = PlasR,
                        gene = gFP,
                        protein = GFP)
                VERIFY [RFP > 50 uM & RFP < 100 uM] WILL HOLD
        }

        // INSIDE and OUTSIDE

        // additional rules
        RULE R1 : signal + NahR <-> signal~NahR
        R1.forwardRate = 1 s^-1
         R1.reverseRate = 1 s^-1
 
         RULE R2 : AHL + XylS2 <-> AHL~XylS2
         R2.forwardRate = 1 s^-1
         R2.reverseRate = 1 s^-1
 
         RULE signalConsumption : OUTSIDE -> signal
         signalConsumption.rate = 1 min^-1
 
         RULE AHLConsumption : OUTSIDE -> AHL
         AHLConsumption.rate = 1 min^-1
 
         // atgc rules
         ATGC ARRANGE : nahR, PnahR, Psal
 
 
         // model checker rules
         // HERE ARE SOME MODALITIES WE NEED TO CONSIDER IN THE FIRST INSTANCE
         VERIFY [SA > 0 molecules] WILL HOLD
         VERIFY [SA > 0 molecules] WILL HOLD WITHIN TIME BOUND [100 s,200 s]
         // Probability bounds could be any relational operator <,>,=,<=,>= as well as ?
         VERIFY [SA > 0 molecules] WILL HOLD WITHIN TIME BOUND [100 s,200 s] WITH PROBABILITY BOUND >= 0.9
         VERIFY [SA == 0 molecules] NEVER HOLDS
         VERIFY [SA == 0 molecules] NEVER HOLDS WITHIN TIME BOUND [100 mins,200 mins]
         VERIFY [SA == 0 molecules] NEVER HOLDS WITHIN TIME BOUND [100 mins,200 mins] WITH PROBABILITY BOUND ?
         VERIFY [SA >= 50 uM AND SA <= 100 uM] ALWAYS HOLDS
         VERIFY [SA >= 50 uM OR SA <= 100 uM] ALWAYS HOLDS WITHIN TIME BOUND [100 s,200 s]
         VERIFY [SA >= 50 uM AND NOT SA <= 100 uM] ALWAYS HOLDS WITHIN TIME BOUND [100 s,200 s] WITH PROBABILITY BOUND ?
 
 
         VERIFY [SA > 0 molecules] WILL HOLD WITHIN TIME BOUND [100 s,200 s] WITH PROBABILITY BOUND >= 0.9
 
         // We do not need to refer to outputs or inputs of devices generically. We can simply write the species name.
         // We do not need to use keywords e.g. Concentration, instead we write units in the queries.
 }