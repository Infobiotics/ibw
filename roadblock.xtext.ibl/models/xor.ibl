// XOR device

import library01  

define constitutiveProteinExpressionTwoGenes typeof ConstitutiveProteinExpression (
        GENE gene2: input,
        PROTEIN protein2 : output){
        
        RULE translation2 : mrna1~ribosome -> mrna1~ribosome + protein2
        translation.forwardRate = rates.translationRate       
} 
        
define doublyRegulatedProteinExpression typeof PROCESS(
        PROMOTER promoter: input, 
        MOLECULE upRegulator: input,
        MOLECULE downRegulator: input,
        GENE gene: input,
        PROTEIN protein: output
){      
        UpRegulatedProteinExpression upRegulation = new UpRegulatedExpression(promoter = promoter, signal = upRegulator, gene = gene, protein = protein)
        DownRegulatedProteinExpression downRegulation = new DownRegulatedExpression(promoter = promoter, signal = downRegulator, gene = gene, protein = protein)
        
} USES RIBOSOME ribosome, RNA rnaP
        
define XORGate typeof SYSTEM (          
        PROMOTER xorPromoter: input, 
        GENE xorGene1: input,          // default value
        PROTEIN xorProtein1: output,
        GENE xorGene2: input,
        PROTEIN xorProtein2: output,
        MOLECULE molecule1: input,
        MOLECULE molecule2: input,
        PROMOTER promoter2: input,
        PROMOTER promoter3: input,
        GENE reporterGene: input,
        PROTEIN reporterProtein: output){

        DEVICE D1 = new DEVICE(parts = [xorPromoter,xorGene1,xorGene2])(input = [xorProtein1, xorProtein2]){
                PROCESS P1 = new constitutivePromoterTwoGenes(
                        //promoter = [promoter1, promoter2], gene = [gene1,gene2], protein = [protein1, protein2]
                        promoter = xorPromoter, gene1 = xorGene1, gene2 = xorGene2, protein1 = xorProtein1, protein2 = xorProtein2  
                )
        }

        DEVICE D2 = new DEVICE(parts = [promoter2,reporterGene])(input = [protein1,protein2], output = [reporterProtein]){
                PROCESS P1 = new doublyRegulatedProteinExpression(promoter = promoter2, upRegulator = protein1, downRegulator = protein2)
        }

        DEVICE D3 = new DEVICE(parts = [promoter3,reporterGene])(input = [protein1,protein2], output = [reporterProtein]){
                PROCESS P1 = new doublyRegulatedProteinExpression(promoter = promoter2, downRegulator = protein1, upRegulator = protein2)
        }

        // extra rules to make complexes and sequester molecule1 and molecule2

        RULE R1 : molecule1 + protein1 <-> molecule1~protein1
        RULE R2 : molecule2 + protein2 <-> molecule2~protein2

        // CHECK that it does work as a XOR gate 
        // (Truth table)
        VERIFY [reporterProtein == 0 M] WILL HOLD GIVEN molecule1 = 0 uM, molecule2 = 0 uM
        VERIFY [reporterProtein >  0 molecules] WILL HOLD GIVEN molecule1 = 0 uM, molecule2 = 1 uM
        VERIFY [reporterProtein >  0 M] WILL HOLD GIVEN molecule1 = 1 uM, molecule2 = 0 uM
        VERIFY [reporterProtein == 0 M] WILL HOLD GIVEN molecule1 = 1 uM, molecule2 = 1 uM
}

// JT: moved global definitions to cell 
//MOLECULE IPTG = new MOLECULE(URI = 'db://...')
//MOLECULE aTc = new MOLECULE(URI = 'db://...')

// JT: not sure what consumed is here:
//define XOREnabledCell typeof CELL (consumed = [IPTG, aTc]){
define XOREnabledCell typeof CELL (){
	MOLECULE IPTG = new MOLECULE(URI = 'db://...')
	MOLECULE aTc = new MOLECULE(URI = 'db://...')

	RIBOSOME ribosome : observable
	RNA rnaP : observable

	PROMOTER myPromoter = new PROMOTER(URI='db://...')
	GENE myReporterGene = new GENE(URI = 'db://rFP')
	PROTEIN myReporterProtein = new PROTEIN(URI='db://RFP')
	SYSTEM system1 = new XORGate(                       // using the XOR gate with a different reporter than the default one.
		promoter1 = myPromoter,
		reporterGene = myReporterGene,
		reporterProtein = myReporterProtein
		)
 }