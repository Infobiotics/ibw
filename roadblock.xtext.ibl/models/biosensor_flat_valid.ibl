// Flat version of the sensor cell: no process, no inheritance.
 
define SensorCell typeof CELL(){
        // define molecular elements
        ribosome = RIBOSOME() : observable
        rnaP = RNA(displayName = "XYZ") : observable
        SA = MOLECULE(displayID = "SA", degradationRate = 1 s^-1, concentration = 100 uM)
//        CHASSIS chassis = new CHASSIS(organism = "ecoli") // NOT YET IMPLEMENTED
//        INTEGER plasmidNumber = 500 // NOT YET IMPLEMENTED

        PnahR = PROMOTER(URI = "biobricks://...")
        nahR = GENE(URI = "biofab://")
        NahR = PROTEIN(URI = "db://...")
 
        Psal = PROMOTER(URI = "biofab://")
        xylS2 = GENE(sequence = "ATTGTGT")
        XylS2 = PROTEIN()

        Pm = PROMOTER(sequence = "ATTGTGT")
        rFP = GENE(sequence = "TTGTGTG")
        RFP = PROTEIN()
   
   		PlasR = PROMOTER()
		lasR = GENE()
		gFP = GENE()
		LasR = MOLECULE()
		GFP = MOLECULE()
		AHL = MOLECULE()
	 	  
        DEVICE NahRLasRProduction = new DEVICE(parts = [PnahR, nahR, lasR])(input = [], output = [NahR, LasR]){
       	// constitutively produces NahR and LasR
			mrna1 = RNA()
		
			RULE promoterBinding : PnahR + rnaP <-> PnahR~rnaP	
			promoterBinding.forwardRate = 1 s^-1 
			promoterBinding.reverseRate = 1 s^-1
		
			RULE transcription : PnahR~rnaP -> PnahR~rnaP + mrna1
			transcription.forwardRate = 1 s^-1
		
			RULE mrnaDegradation : mrna1 ->
			mrnaDegradation.forwardRate = 1 s^-1
		
			RULE translationInitiation : mrna1 + ribosome <-> mrna1~ribosome // mrna binds to ribosome
			translationInitiation.forwardRate = 1 s^-1
			translationInitiation.reverseRate = 1 s^-1
		
			RULE translation1 : mrna1~ribosome -> mrna1~ribosome + NahR
			translation1.forwardRate = 1 s^-1

			RULE translation2 : mrna1~ribosome -> mrna1~ribosome + LasR
			translation2.forwardRate = 1 s^-1
   }

        DEVICE XylS2Production = new DEVICE(parts = [Psal, xylS2])(input = [NahR], output = [XylS2]){
        // produces XylS2, upregulated by SA~NahR
			ATGC ARRANGE Psal, xylS2
			mrna1 = RNA()
			
		    RULE regulation : SA~NahR + Psal <-> SA~NahR~Psal
			RULE promoterBinding : SA~NahR~Psal + rnaP <-> SA~NahR~Psal~rnaP	
			RULE transcription : SA~NahR~Psal~rnaP -> SA~NahR~Psal~rnaP + mrna1
			RULE mrnaDegradation : mrna1 ->
			RULE translationInitiation : mrna1 + ribosome <-> mrna1~ribosome // mrna binds to ribosome
			RULE translation : mrna1~ribosome -> mrna1~ribosome + XylS2
			
            VERIFY [XylS2 > 0 uM ] EVENTUALLY HOLDS
        }

        DEVICE GFPProduction = new DEVICE(parts = [Pm, PlasR, gFP])(input = [SA~XylS2, AHL~LasR], output = [GFP]){
        // produces GFP, upregulated by SA~XylS2 OR AHL~LasR (dual promoter)

			mrna1 = RNA() 	
			
			// binds with SA~Xyls2 and Pm
		    RULE regulation1 : SA~XylS2 + Pm <-> SA~XylS2~Pm
			RULE promoterBinding1 : SA~XylS2~Pm + rnaP <-> SA~XylS2~Pm~rnaP	
			RULE transcription1 : SA~XylS2~Pm~rnaP -> SA~XylS2~Pm~rnaP + mrna1
			// binds with AHL~LasR and PlasR
		    RULE regulation2 : AHL~LasR + PlasR <-> AHL~LasR~PlasR
			RULE promoterBinding2 : AHL~LasR~PlasR + rnaP <-> AHL~LasR~PlasR~rnaP	
			RULE transcription2 : AHL~LasR~PlasR~rnaP -> AHL~LasR~PlasR~rnaP + mrna1
			
			// from there, usual steps for up regulation			
			RULE mrnaDegradation : mrna1 ->
			RULE translationInitiation : mrna1 + ribosome <-> mrna1~ribosome // mrna binds to ribosome
			RULE translation : mrna1~ribosome -> mrna1~ribosome + GFP
	 		
            VERIFY [ [ NOT [ GFP > 50 uM ] ] IMPLIES [[ GFP < 40 uM ] AND [ GFP < 100 uM ] ]] EVENTUALLY HOLDS
        }
 
         // INSIDE and OUTSIDE

         // additional rules
         RULE R1 : SA + XylS2 <-> SA~XylS2
         R1.forwardRate = 1 s^-1
         R1.reverseRate = 1 s^-1
          
         RULE R2 : AHL + LasR <-> AHL~LasR
         R2.forwardRate = 1 s^-1
         R2.reverseRate = 1 s^-1
 
         RULE SAConsumption : OUTSIDE -> SA
         SAConsumption.rate = 1 min^-1
 
         RULE AHLConsumption : OUTSIDE -> AHL
         AHLConsumption.rate = 1 min^-1
 
         // atgc rules
         ATGC ARRANGE nahR, PnahR, Psal
 
         // some example properties 
          
         VERIFY [SA > 0 uM] EVENTUALLY HOLDS
         VERIFY [SA > 0 uM] EVENTUALLY HOLDS WITHIN [100,200] s
         VERIFY [SA > 0 uM] EVENTUALLY HOLDS WITHIN [100,200] s WITH PROBABILITY >= 0.9
         VERIFY [SA > 0 uM] NEVER HOLDS
         VERIFY [SA > 0 uM] ALWAYS HOLDS
         VERIFY [SA > 0 uM] HOLDS IN STEADY-STATE
         VERIFY [SA > 0 uM] HOLDS INFINITELY OFTEN
         VERIFY [GFP > 0 uM] WILL HOLD UNTIL THEN [SA > 0 uM]
         VERIFY EXPECTED [GFP] AT 1000 s IS ?
         VERIFY EXPECTED [GFP] WITHIN 1000 s IS ?
}  

define site1 typeof REGION () {
        SA = MOLECULE(displayID = "SA", degradationRate = 1 s^-1, concentration = 100 uM)
        CELL myCell = new SensorCell()
}
