//////////////////////////////
// library of basic objects //
//////////////////////////////

// jamie twycross, 2013

///////////////
// processes //
///////////////

define PROCESS ConstitutiveProteinExpression (
	PROMOTER promoter: required,
	GENE gene1: required,
	PROTEIN protein1: returned,
	RATE rates:optional
) 
{
	RULE R1 : promoter <-> promoter + gene1~rnaP
	R1.forwardRate = promoter.bindingRate | RATE.bindingRate // get binding rate from promoter's properties if available, or from constant RATE.
	R1.reverseRate = RATE.unbindingRate

	RULE R2 : gene1~rnaP -> mrna1
	R2.rate = RATE.transcriptionRate

	RULE R3 : mrna1 ->
	R3.rate = RATE.rnaDegratationRate

	RULE R4 : mrna1 + ribosome <-> mrna1~ribosome // mrna binds to ribosome
	R4.associationConstant = RATE.ribosomeBinding

	RULE R5 : mrna1~ribosome -> protein1
	R5.rate = RATE.translationRate

	RULE R6 : protein1 ->
		R6.rate = protein1.degradationRate | RATE.proteinDegradationRate
} USES RIBOSOME ribosome, RNA rnaP

define PROCESS RegulatedProteinExpression (
	MOLECULE regulator:required,
	PROMOTER promoter:required,
	GENE gene:required,
	PROTEIN protein:returned,
	RATE rates:optional
)
{
	RULE R1 : regulator + promoter <-> regulator~promoter
	R1.rate = promoter.bindingRate | rate.bindingRate

	RULE R2 : regulator~promoter -> regulator~promoter + rna~gene~RNAP
	R2.rate = promoter.transcriptionRate

	RULE R3 : rna~gene~RNAP -> rna~gene
	R3.rate = rate.transcriptionRate

	RULE R4 : rna~gene ->
	R4.rate = rates.degradationRate | RATE.RNADegradationRate

	RULE R5 : rna~gene -> rna~gene + gene~ribosome
	R5.rate = rate.translationRate1

	RULE R6 : gene~ribosome -> protein
	R6.rate = rate.translationRate2

	RULE R7 : protein ->
	R7.rate = protein.degradationRate | RATE.proteinDegradationRate
} USES RIBOSOME ribosome, RNA rnaP
