/**
 * generated by Xtext
 */
package roadblock.xtext.ibl.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import roadblock.dataprocessing.modelbuilder.PropertyBuilder;
import roadblock.emf.ibl.Ibl.IProperty;
import roadblock.modelchecking.translation.property.PropertyTranslationManager;
import roadblock.modelchecking.translation.property.TranslationTarget;
import roadblock.xtext.ibl.ibl.PropertyDefinition;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class IblGenerator implements IGenerator {
  private PropertyBuilder propertyBuilder = new Function0<PropertyBuilder>() {
    public PropertyBuilder apply() {
      PropertyBuilder _propertyBuilder = new PropertyBuilder();
      return _propertyBuilder;
    }
  }.apply();
  
  private PropertyTranslationManager translationManager = PropertyTranslationManager.getInstance();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<PropertyDefinition> _filter = Iterators.<PropertyDefinition>filter(_allContents, PropertyDefinition.class);
    final List<PropertyDefinition> properties = IteratorExtensions.<PropertyDefinition>toList(_filter);
    int _size = properties.size();
    String _plus = ("Property count: " + Integer.valueOf(_size));
    System.out.println(_plus);
    for (final PropertyDefinition p : properties) {
      IProperty _build = this.propertyBuilder.build(p);
      String _Translate = this.translationManager.Translate(_build, TranslationTarget.PRISM);
      System.out.println(_Translate);
    }
  }
}
