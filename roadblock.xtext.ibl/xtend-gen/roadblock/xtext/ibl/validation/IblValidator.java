/**
 * generated by Xtext
 */
package roadblock.xtext.ibl.validation;

import com.google.common.base.Objects;
import com.google.common.collect.Maps;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.MapExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;
import roadblock.xtext.ibl.ibl.ATGCDefinition;
import roadblock.xtext.ibl.ibl.CellInstantiation;
import roadblock.xtext.ibl.ibl.ChromosomeInstantiation;
import roadblock.xtext.ibl.ibl.DeviceDefinition;
import roadblock.xtext.ibl.ibl.FunctionBodyMember;
import roadblock.xtext.ibl.ibl.IblPackage;
import roadblock.xtext.ibl.ibl.PlasmidInstantiation;
import roadblock.xtext.ibl.ibl.ProcessInstantiation;
import roadblock.xtext.ibl.ibl.PropertyDefinition;
import roadblock.xtext.ibl.ibl.SystemInstantiation;
import roadblock.xtext.ibl.ibl.impl.CellBodyImpl;
import roadblock.xtext.ibl.ibl.impl.ChromosomeBodyImpl;
import roadblock.xtext.ibl.ibl.impl.CustomFunctionBodyImpl;
import roadblock.xtext.ibl.ibl.impl.PlasmidBodyImpl;
import roadblock.xtext.ibl.ibl.impl.ProcessBodyImpl;
import roadblock.xtext.ibl.ibl.impl.RegionBodyImpl;
import roadblock.xtext.ibl.ibl.impl.SystemBodyImpl;
import roadblock.xtext.ibl.validation.AbstractIblValidator;
import roadblock.xtext.ibl.validation.ContainerData;

@SuppressWarnings("all")
public class IblValidator extends AbstractIblValidator {
  private final static Map<String,ContainerData> containerList = new Function0<Map<String,ContainerData>>() {
    public Map<String,ContainerData> apply() {
      Map<String,ContainerData> _xsetliteral = null;
      ContainerData _containerData = new ContainerData(ProcessBodyImpl.class, "PROCESSes");
      ContainerData _containerData_1 = new ContainerData(SystemBodyImpl.class, "SYSTEMs");
      ContainerData _containerData_2 = new ContainerData(PlasmidBodyImpl.class, "PLASMIDs");
      ContainerData _containerData_3 = new ContainerData(ChromosomeBodyImpl.class, "CHROMOSOMEs");
      ContainerData _containerData_4 = new ContainerData(CellBodyImpl.class, "CELLs");
      ContainerData _containerData_5 = new ContainerData(RegionBodyImpl.class, "REGIONs");
      ContainerData _containerData_6 = new ContainerData(CustomFunctionBodyImpl.class, "CUSTOMFUNCTIONs");
      Map<String,ContainerData> _tempMap = Maps.<String, ContainerData>newHashMap();
      _tempMap.put("PROCESS", _containerData);
      _tempMap.put("SYSTEM", _containerData_1);
      _tempMap.put("PLASMID", _containerData_2);
      _tempMap.put("CHROMOSOME", _containerData_3);
      _tempMap.put("CELL", _containerData_4);
      _tempMap.put("REGION", _containerData_5);
      _tempMap.put("CUSTOMFUNCTION", _containerData_6);
      _xsetliteral = Collections.<String, ContainerData>unmodifiableMap(_tempMap);
      return _xsetliteral;
    }
  }.apply();
  
  public void generateWrongContainerError(final FunctionBodyMember definition, final String[] forbiddenContainers, final String errorMessage, final EStructuralFeature feature) {
    final Function2<String,ContainerData,Boolean> _function = new Function2<String,ContainerData,Boolean>() {
      public Boolean apply(final String k, final ContainerData v) {
        boolean _contains = ((List<String>)Conversions.doWrapArray(forbiddenContainers)).contains(k);
        return Boolean.valueOf(_contains);
      }
    };
    Map<String,ContainerData> _filter = MapExtensions.<String, ContainerData>filter(IblValidator.containerList, _function);
    final Procedure2<String,ContainerData> _function_1 = new Procedure2<String,ContainerData>() {
      public void apply(final String k, final ContainerData v) {
        EObject _eContainer = definition.eContainer();
        Class<? extends EObject> _class = _eContainer.getClass();
        Object _type = v.getType();
        boolean _equals = Objects.equal(_class, _type);
        if (_equals) {
          String _displayName = v.getDisplayName();
          String _plus = (errorMessage + _displayName);
          IblValidator.this.error(_plus, feature);
        }
      }
    };
    MapExtensions.<String, ContainerData>forEach(_filter, _function_1);
  }
  
  @Check
  public void checkContainerOfATGCDefinition(final ATGCDefinition atgcDefinition) {
    EAttribute _aTGCDefinition_Command = IblPackage.eINSTANCE.getATGCDefinition_Command();
    this.generateWrongContainerError(atgcDefinition, 
      new String[] { "PROCESS", "REGION" }, 
      "ATGC directives are not allowed in ", _aTGCDefinition_Command);
  }
  
  @Check
  public void checkContainerOfCellInstantiation(final CellInstantiation cellInstantiation) {
    EAttribute _cellInstantiation_Name = IblPackage.eINSTANCE.getCellInstantiation_Name();
    this.generateWrongContainerError(cellInstantiation, 
      new String[] { "PROCESS", "SYSTEM", "PLASMID", "CHROMOSOME", "CELL", "CUSTOMFUNCTION" }, 
      "Cell instantiations are not allowed in ", _cellInstantiation_Name);
  }
  
  @Check
  public void checkContainerOfChromosomeInstantiation(final ChromosomeInstantiation chromosomeInstantiation) {
    EAttribute _chromosomeInstantiation_Name = IblPackage.eINSTANCE.getChromosomeInstantiation_Name();
    this.generateWrongContainerError(chromosomeInstantiation, 
      new String[] { "PROCESS", "SYSTEM", "PLASMID", "CHROMOSOME", "REGION" }, 
      "Chromosome instantiations are not allowed in ", _chromosomeInstantiation_Name);
  }
  
  @Check
  public void checkContainerOfDeviceDefinition(final DeviceDefinition deviceDefinition) {
    EAttribute _deviceDefinition_Name = IblPackage.eINSTANCE.getDeviceDefinition_Name();
    this.generateWrongContainerError(deviceDefinition, 
      new String[] { "PROCESS", "REGION" }, 
      "Device definitions are not allowed in ", _deviceDefinition_Name);
  }
  
  @Check
  public void checkContainerOfPlasmidInstantiation(final PlasmidInstantiation plasmidInstantiation) {
    EAttribute _plasmidInstantiation_Name = IblPackage.eINSTANCE.getPlasmidInstantiation_Name();
    this.generateWrongContainerError(plasmidInstantiation, 
      new String[] { "PROCESS", "SYSTEM", "PLASMID", "CHROMOSOME", "REGION" }, 
      "Plasmid instantiations are not allowed in ", _plasmidInstantiation_Name);
  }
  
  @Check
  public void checkContainerOfProcessInstantiation(final ProcessInstantiation processInstantiation) {
    EAttribute _processInstantiation_Constructor = IblPackage.eINSTANCE.getProcessInstantiation_Constructor();
    this.generateWrongContainerError(processInstantiation, 
      new String[] { "REGION" }, 
      "Process instantiations are not allowed in ", _processInstantiation_Constructor);
  }
  
  @Check
  public void checkContainerOfPropertyDefinition(final PropertyDefinition propertyDefinition) {
    EReference _propertyDefinition_Property = IblPackage.eINSTANCE.getPropertyDefinition_Property();
    this.generateWrongContainerError(propertyDefinition, 
      new String[] { "PROCESS", "REGION" }, 
      "Property Definitions are not allowed in ", _propertyDefinition_Property);
  }
  
  @Check
  public void checkContainerOfSystemInstantiation(final SystemInstantiation systemInstantiation) {
    EAttribute _systemInstantiation_Constructor = IblPackage.eINSTANCE.getSystemInstantiation_Constructor();
    this.generateWrongContainerError(systemInstantiation, 
      new String[] { "PROCESS", "SYSTEM", "REGION" }, 
      "System instantiations are not allowed in ", _systemInstantiation_Constructor);
  }
}
