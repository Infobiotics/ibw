/*
* generated by Xtext
*/
package roadblock.xtext.ibl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IblGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersModelMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		
		//// a model is composed of model members
		//Model:
		//	{Model} members+=ModelMember*;
		public ParserRule getRule() { return rule; }

		//{Model} members+=ModelMember*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//members+=ModelMember*
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ModelMember
		public RuleCall getMembersModelMemberParserRuleCall_1_0() { return cMembersModelMemberParserRuleCall_1_0; }
	}

	public class ModelMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// these are the model members
		//ModelMember:
		//	Import | VariableDefinition | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//Import | VariableDefinition | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersVariableDefinitionMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// a definition of a variable
		//VariableDefinition:
		//	{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=VariableType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0() { return cTypeVariableTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=VariableDefinitionMember*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//VariableDefinitionMember
		public RuleCall getMembersVariableDefinitionMemberParserRuleCall_5_0() { return cMembersVariableDefinitionMemberParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Assignment cParametersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_6_0 = (RuleCall)cParametersAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParametersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_7_1_0 = (RuleCall)cParametersAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMembersAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMembersFunctionDefinitionMemberParserRuleCall_10_0 = (RuleCall)cMembersAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// a definition of a function
		//FunctionDefinition:
		//	{FunctionDefinition} "define" type=VariableType? name=ID "(" parameters+=FunctionParameterMember*
		//	parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
		//	members+=FunctionDefinitionMember* "}";
		public ParserRule getRule() { return rule; }

		//{FunctionDefinition} "define" type=VariableType? name=ID "(" parameters+=FunctionParameterMember*
		//parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
		//members+=FunctionDefinitionMember* "}"
		public Group getGroup() { return cGroup; }

		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=VariableType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0() { return cTypeVariableTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//parameters+=FunctionParameterMember*
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_5_0() { return cParametersFunctionParameterMemberParserRuleCall_5_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_6() { return cParametersAssignment_6; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_6_0() { return cParametersFunctionParameterMemberParserRuleCall_6_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_7_1() { return cParametersAssignment_7_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_7_1_0() { return cParametersFunctionParameterMemberParserRuleCall_7_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//members+=FunctionDefinitionMember*
		public Assignment getMembersAssignment_10() { return cMembersAssignment_10; }

		//FunctionDefinitionMember
		public RuleCall getMembersFunctionDefinitionMemberParserRuleCall_10_0() { return cMembersFunctionDefinitionMemberParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class FunctionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeParameterScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		////	type=[VariableDefinition] name=ID ':' scope=ParameterScope // fix crossreferencing
		//FunctionParameterMember:
		//	type=ID name=ID ":" scope=ParameterScope;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID ":" scope=ParameterScope
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//scope=ParameterScope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//ParameterScope
		public RuleCall getScopeParameterScopeParserRuleCall_3_0() { return cScopeParameterScopeParserRuleCall_3_0; }
	}

	public class ParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ParameterScope:
		//	"required" | "returned";
		public ParserRule getRule() { return rule; }

		//"required" | "returned"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//"returned"
		public Keyword getReturnedKeyword_1() { return cReturnedKeyword_1; }
	}

	public class FunctionDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinitionMember");
		private final RuleCall cRuleDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionDefinitionMember:
		//	RuleDefinition;
		public ParserRule getRule() { return rule; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall() { return cRuleDefinitionParserRuleCall; }
	}

	public class VariableDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionMember");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// entries allowed inside variabledefinition
		//VariableDefinitionMember:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_1_0_0 = (RuleCall)cTypeAssignment_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCollectionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_1_0_0 = (RuleCall)cCollectionAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		
		//VariableDeclaration:
		//	{VariableDeclaration} (type=VariableType name=ID) | collection=CollectionID "<" type=VariableType ">" name=ID;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} (type=VariableType name=ID) | collection=CollectionID "<" type=VariableType ">" name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{VariableDeclaration} (type=VariableType name=ID)
		public Group getGroup_0() { return cGroup_0; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0_0() { return cVariableDeclarationAction_0_0; }

		//type=VariableType name=ID
		public Group getGroup_0_1() { return cGroup_0_1; }

		//type=VariableType
		public Assignment getTypeAssignment_0_1_0() { return cTypeAssignment_0_1_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_1_0_0() { return cTypeVariableTypeParserRuleCall_0_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_1_0() { return cNameIDTerminalRuleCall_0_1_1_0; }

		//collection=CollectionID "<" type=VariableType ">" name=ID
		public Group getGroup_1() { return cGroup_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_1_0() { return cCollectionAssignment_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_1_0_0() { return cCollectionCollectionIDParserRuleCall_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//type=VariableType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_2_0() { return cTypeVariableTypeParserRuleCall_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//name=ID
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_4_0() { return cNameIDTerminalRuleCall_1_4_0; }
	}

	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrimitiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPrimitiveAlternatives_1_0 = (Alternatives)cPrimitiveAssignment_1.eContents().get(0);
		private final RuleCall cPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0 = (RuleCall)cPrimitiveAlternatives_1_0.eContents().get(0);
		private final RuleCall cPrimitiveIDTerminalRuleCall_1_0_1 = (RuleCall)cPrimitiveAlternatives_1_0.eContents().get(1);
		
		////	primitive=PrimitiveVariableType | reference=[VariableDefinition] // fix crossreferencing
		//VariableType:
		//	{VariableType} primitive=(PrimitiveVariableType | ID);
		public ParserRule getRule() { return rule; }

		//{VariableType} primitive=(PrimitiveVariableType | ID)
		public Group getGroup() { return cGroup; }

		//{VariableType}
		public Action getVariableTypeAction_0() { return cVariableTypeAction_0; }

		//primitive=(PrimitiveVariableType | ID)
		public Assignment getPrimitiveAssignment_1() { return cPrimitiveAssignment_1; }

		//PrimitiveVariableType | ID
		public Alternatives getPrimitiveAlternatives_1_0() { return cPrimitiveAlternatives_1_0; }

		//PrimitiveVariableType
		public RuleCall getPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0() { return cPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0; }

		//ID
		public RuleCall getPrimitiveIDTerminalRuleCall_1_0_1() { return cPrimitiveIDTerminalRuleCall_1_0_1; }
	}

	public class CollectionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CollectionID:
		//	"LIST" | "SET";
		public ParserRule getRule() { return rule; }

		//"LIST" | "SET"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//"SET"
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }
	}

	public class PrimitiveVariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cURIKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDNAKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRATEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCHASSISKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPROCESSKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRULEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//PrimitiveVariableType:
		//	"ID" | "URI" | "DNA" | "RATE" | "CHASSIS" | "PROCESS" | "RULE";
		public ParserRule getRule() { return rule; }

		//"ID" | "URI" | "DNA" | "RATE" | "CHASSIS" | "PROCESS" | "RULE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ID"
		public Keyword getIDKeyword_0() { return cIDKeyword_0; }

		//"URI"
		public Keyword getURIKeyword_1() { return cURIKeyword_1; }

		//"DNA"
		public Keyword getDNAKeyword_2() { return cDNAKeyword_2; }

		//"RATE"
		public Keyword getRATEKeyword_3() { return cRATEKeyword_3; }

		//"CHASSIS"
		public Keyword getCHASSISKeyword_4() { return cCHASSISKeyword_4; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_5() { return cPROCESSKeyword_5; }

		//"RULE"
		public Keyword getRULEKeyword_6() { return cRULEKeyword_6; }
	}

	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLhsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_0_0 = (RuleCall)cLhsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_1_1_0 = (RuleCall)cLhsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_0_0 = (RuleCall)cRhsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPlusSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRhsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_1_1_0 = (RuleCall)cRhsAssignment_6_1_1.eContents().get(0);
		
		//// rules
		//RuleDefinition:
		//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*) ("->" | "<->") (rhs+=RuleObject ("+"
		//	rhs+=RuleObject)*);
		public ParserRule getRule() { return rule; }

		//{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*) ("->" | "<->") (rhs+=RuleObject ("+"
		//rhs+=RuleObject)*)
		public Group getGroup() { return cGroup; }

		//{RuleDefinition}
		public Action getRuleDefinitionAction_0() { return cRuleDefinitionAction_0; }

		//"RULE"
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//lhs+=RuleObject ("+" lhs+=RuleObject)*
		public Group getGroup_4() { return cGroup_4; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_0() { return cLhsAssignment_4_0; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_0_0() { return cLhsRuleObjectParserRuleCall_4_0_0; }

		//("+" lhs+=RuleObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_1_1() { return cLhsAssignment_4_1_1; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_1_1_0() { return cLhsRuleObjectParserRuleCall_4_1_1_0; }

		//"->" | "<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_5_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_5_1; }

		//rhs+=RuleObject ("+" rhs+=RuleObject)*
		public Group getGroup_6() { return cGroup_6; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_0() { return cRhsAssignment_6_0; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_0_0() { return cRhsRuleObjectParserRuleCall_6_0_0; }

		//("+" rhs+=RuleObject)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"+"
		public Keyword getPlusSignKeyword_6_1_0() { return cPlusSignKeyword_6_1_0; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_1_1() { return cRhsAssignment_6_1_1; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_1_1_0() { return cRhsRuleObjectParserRuleCall_6_1_1_0; }
	}

	public class RuleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubobjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubobjectsIDTerminalRuleCall_1_0 = (RuleCall)cSubobjectsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTildeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubobjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubobjectsIDTerminalRuleCall_2_1_0 = (RuleCall)cSubobjectsAssignment_2_1.eContents().get(0);
		
		//RuleObject:
		//	{RuleObject} subobjects+=ID ("~" subobjects+=ID)*;
		public ParserRule getRule() { return rule; }

		//{RuleObject} subobjects+=ID ("~" subobjects+=ID)*
		public Group getGroup() { return cGroup; }

		//{RuleObject}
		public Action getRuleObjectAction_0() { return cRuleObjectAction_0; }

		//subobjects+=ID
		public Assignment getSubobjectsAssignment_1() { return cSubobjectsAssignment_1; }

		//ID
		public RuleCall getSubobjectsIDTerminalRuleCall_1_0() { return cSubobjectsIDTerminalRuleCall_1_0; }

		//("~" subobjects+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"~"
		public Keyword getTildeKeyword_2_0() { return cTildeKeyword_2_0; }

		//subobjects+=ID
		public Assignment getSubobjectsAssignment_2_1() { return cSubobjectsAssignment_2_1; }

		//ID
		public RuleCall getSubobjectsIDTerminalRuleCall_2_1_0() { return cSubobjectsIDTerminalRuleCall_2_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//// allow import of multiple model files e.g. libraries
		//Import:
		//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//{Import} "import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// a qualified name                                                                                      
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private ModelMemberElements pModelMember;
	private VariableDefinitionElements pVariableDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private FunctionParameterMemberElements pFunctionParameterMember;
	private ParameterScopeElements pParameterScope;
	private FunctionDefinitionMemberElements pFunctionDefinitionMember;
	private VariableDefinitionMemberElements pVariableDefinitionMember;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableTypeElements pVariableType;
	private CollectionIDElements pCollectionID;
	private PrimitiveVariableTypeElements pPrimitiveVariableType;
	private RuleDefinitionElements pRuleDefinition;
	private RuleObjectElements pRuleObject;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IblGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("roadblock.xtext.ibl.Ibl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// a model is composed of model members
	//Model:
	//	{Model} members+=ModelMember*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// these are the model members
	//ModelMember:
	//	Import | VariableDefinition | FunctionDefinition;
	public ModelMemberElements getModelMemberAccess() {
		return (pModelMember != null) ? pModelMember : (pModelMember = new ModelMemberElements());
	}
	
	public ParserRule getModelMemberRule() {
		return getModelMemberAccess().getRule();
	}

	//// a definition of a variable
	//VariableDefinition:
	//	{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//// a definition of a function
	//FunctionDefinition:
	//	{FunctionDefinition} "define" type=VariableType? name=ID "(" parameters+=FunctionParameterMember*
	//	parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
	//	members+=FunctionDefinitionMember* "}";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	////	type=[VariableDefinition] name=ID ':' scope=ParameterScope // fix crossreferencing
	//FunctionParameterMember:
	//	type=ID name=ID ":" scope=ParameterScope;
	public FunctionParameterMemberElements getFunctionParameterMemberAccess() {
		return (pFunctionParameterMember != null) ? pFunctionParameterMember : (pFunctionParameterMember = new FunctionParameterMemberElements());
	}
	
	public ParserRule getFunctionParameterMemberRule() {
		return getFunctionParameterMemberAccess().getRule();
	}

	//ParameterScope:
	//	"required" | "returned";
	public ParameterScopeElements getParameterScopeAccess() {
		return (pParameterScope != null) ? pParameterScope : (pParameterScope = new ParameterScopeElements());
	}
	
	public ParserRule getParameterScopeRule() {
		return getParameterScopeAccess().getRule();
	}

	//FunctionDefinitionMember:
	//	RuleDefinition;
	public FunctionDefinitionMemberElements getFunctionDefinitionMemberAccess() {
		return (pFunctionDefinitionMember != null) ? pFunctionDefinitionMember : (pFunctionDefinitionMember = new FunctionDefinitionMemberElements());
	}
	
	public ParserRule getFunctionDefinitionMemberRule() {
		return getFunctionDefinitionMemberAccess().getRule();
	}

	//// entries allowed inside variabledefinition
	//VariableDefinitionMember:
	//	VariableDeclaration;
	public VariableDefinitionMemberElements getVariableDefinitionMemberAccess() {
		return (pVariableDefinitionMember != null) ? pVariableDefinitionMember : (pVariableDefinitionMember = new VariableDefinitionMemberElements());
	}
	
	public ParserRule getVariableDefinitionMemberRule() {
		return getVariableDefinitionMemberAccess().getRule();
	}

	//VariableDeclaration:
	//	{VariableDeclaration} (type=VariableType name=ID) | collection=CollectionID "<" type=VariableType ">" name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	////	primitive=PrimitiveVariableType | reference=[VariableDefinition] // fix crossreferencing
	//VariableType:
	//	{VariableType} primitive=(PrimitiveVariableType | ID);
	public VariableTypeElements getVariableTypeAccess() {
		return (pVariableType != null) ? pVariableType : (pVariableType = new VariableTypeElements());
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}

	//CollectionID:
	//	"LIST" | "SET";
	public CollectionIDElements getCollectionIDAccess() {
		return (pCollectionID != null) ? pCollectionID : (pCollectionID = new CollectionIDElements());
	}
	
	public ParserRule getCollectionIDRule() {
		return getCollectionIDAccess().getRule();
	}

	//PrimitiveVariableType:
	//	"ID" | "URI" | "DNA" | "RATE" | "CHASSIS" | "PROCESS" | "RULE";
	public PrimitiveVariableTypeElements getPrimitiveVariableTypeAccess() {
		return (pPrimitiveVariableType != null) ? pPrimitiveVariableType : (pPrimitiveVariableType = new PrimitiveVariableTypeElements());
	}
	
	public ParserRule getPrimitiveVariableTypeRule() {
		return getPrimitiveVariableTypeAccess().getRule();
	}

	//// rules
	//RuleDefinition:
	//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*) ("->" | "<->") (rhs+=RuleObject ("+"
	//	rhs+=RuleObject)*);
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return (pRuleDefinition != null) ? pRuleDefinition : (pRuleDefinition = new RuleDefinitionElements());
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}

	//RuleObject:
	//	{RuleObject} subobjects+=ID ("~" subobjects+=ID)*;
	public RuleObjectElements getRuleObjectAccess() {
		return (pRuleObject != null) ? pRuleObject : (pRuleObject = new RuleObjectElements());
	}
	
	public ParserRule getRuleObjectRule() {
		return getRuleObjectAccess().getRule();
	}

	//// allow import of multiple model files e.g. libraries
	//Import:
	//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// a qualified name                                                                                      
	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
