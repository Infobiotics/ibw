/*
* generated by Xtext
*/
package roadblock.xtext.ibl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IblGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersModelMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		
		//// a model is composed of model members
		//Model:
		//	{Model} members+=ModelMember*;
		public ParserRule getRule() { return rule; }

		//{Model} members+=ModelMember*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//members+=ModelMember*
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ModelMember
		public RuleCall getMembersModelMemberParserRuleCall_1_0() { return cMembersModelMemberParserRuleCall_1_0; }
	}

	public class ModelMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// these are the model members
		//ModelMember:
		//	Import | VariableDefinition | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//Import | VariableDefinition | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersVariableDefinitionMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// a definition of a variable
		//VariableDefinition:
		//	{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=VariableType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0() { return cTypeVariableTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=VariableDefinitionMember*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//VariableDefinitionMember
		public RuleCall getMembersVariableDefinitionMemberParserRuleCall_5_0() { return cMembersVariableDefinitionMemberParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMembersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMembersFunctionDefinitionMemberParserRuleCall_9_0 = (RuleCall)cMembersAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cUSESKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cUsesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_11_1_0 = (RuleCall)cUsesAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cCommaKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cUsesAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_11_2_1_0 = (RuleCall)cUsesAssignment_11_2_1.eContents().get(0);
		
		//// a definition of a function
		//FunctionDefinition:
		//	{FunctionDefinition} "define" type=VariableType? name=ID "(" //		parameters+=FunctionParameterMember*
		//	parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
		//	members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember))?;
		public ParserRule getRule() { return rule; }

		//{FunctionDefinition} "define" type=VariableType? name=ID "(" //		parameters+=FunctionParameterMember*
		//parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
		//members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember))?
		public Group getGroup() { return cGroup; }

		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=VariableType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0() { return cTypeVariableTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		////		parameters+=FunctionParameterMember*
		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_5_0() { return cParametersFunctionParameterMemberParserRuleCall_5_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_6_1_0() { return cParametersFunctionParameterMemberParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//members+=FunctionDefinitionMember*
		public Assignment getMembersAssignment_9() { return cMembersAssignment_9; }

		//FunctionDefinitionMember
		public RuleCall getMembersFunctionDefinitionMemberParserRuleCall_9_0() { return cMembersFunctionDefinitionMemberParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember))?
		public Group getGroup_11() { return cGroup_11; }

		//"USES"
		public Keyword getUSESKeyword_11_0() { return cUSESKeyword_11_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_11_1() { return cUsesAssignment_11_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_11_1_0() { return cUsesFunctionUseMemberParserRuleCall_11_1_0; }

		//"," uses+=FunctionUseMember
		public Group getGroup_11_2() { return cGroup_11_2; }

		//","
		public Keyword getCommaKeyword_11_2_0() { return cCommaKeyword_11_2_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_11_2_1() { return cUsesAssignment_11_2_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_11_2_1_0() { return cUsesFunctionUseMemberParserRuleCall_11_2_1_0; }
	}

	public class FunctionUseMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionUseMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FunctionUseMember:
		//	type=ID name=ID;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FunctionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeParameterScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		////	type=[VariableDefinition] name=ID ':' scope=ParameterScope // fix crossreferencing
		//FunctionParameterMember:
		//	type=ID name=ID ":" scope=ParameterScope;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID ":" scope=ParameterScope
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//scope=ParameterScope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//ParameterScope
		public RuleCall getScopeParameterScopeParserRuleCall_3_0() { return cScopeParameterScopeParserRuleCall_3_0; }
	}

	public class ParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ParameterScope:
		//	"required" | "returned" | "optional";
		public ParserRule getRule() { return rule; }

		//"required" | "returned" | "optional"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//"returned"
		public Keyword getReturnedKeyword_1() { return cReturnedKeyword_1; }

		//"optional"
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
	}

	public class FunctionDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinitionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeviceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FunctionDefinitionMember:
		//	RuleDefinition | VariableAssignment | VariableDeclaration | DeviceDefinition;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableAssignment | VariableDeclaration | DeviceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_1() { return cVariableAssignmentParserRuleCall_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_2() { return cVariableDeclarationParserRuleCall_2; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_3() { return cDeviceDefinitionParserRuleCall_3; }
	}

	public class DeviceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDEVICEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDEVICEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPartsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPartsIDTerminalRuleCall_6_0_0 = (RuleCall)cPartsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cPartsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cPartsIDTerminalRuleCall_6_1_1_0 = (RuleCall)cPartsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cParametersAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_9_0_0 = (RuleCall)cParametersAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cParametersAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_9_1_1_0 = (RuleCall)cParametersAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Assignment cMembersAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cMembersVariableDeclarationParserRuleCall_12_0_0 = (RuleCall)cMembersAssignment_12_0.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Keyword cCommaKeyword_12_1_0 = (Keyword)cGroup_12_1.eContents().get(0);
		private final Assignment cMembersAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cMembersVariableDeclarationParserRuleCall_12_1_1_0 = (RuleCall)cMembersAssignment_12_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//DeviceDefinition:
		//	{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
		//	(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" (members+=VariableDeclaration (","
		//	members+=VariableDeclaration)*)? "}";
		public ParserRule getRule() { return rule; }

		//{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" (members+=VariableDeclaration (","
		//members+=VariableDeclaration)*)? "}"
		public Group getGroup() { return cGroup; }

		//{DeviceDefinition}
		public Action getDeviceDefinitionAction_0() { return cDeviceDefinitionAction_0; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_1() { return cDEVICEKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_4() { return cDEVICEKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//parts+=ID ("," parts+=ID)*
		public Group getGroup_6() { return cGroup_6; }

		//parts+=ID
		public Assignment getPartsAssignment_6_0() { return cPartsAssignment_6_0; }

		//ID
		public RuleCall getPartsIDTerminalRuleCall_6_0_0() { return cPartsIDTerminalRuleCall_6_0_0; }

		//("," parts+=ID)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parts+=ID
		public Assignment getPartsAssignment_6_1_1() { return cPartsAssignment_6_1_1; }

		//ID
		public RuleCall getPartsIDTerminalRuleCall_6_1_1_0() { return cPartsIDTerminalRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }

		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)?
		public Group getGroup_9() { return cGroup_9; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_9_0() { return cParametersAssignment_9_0; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_9_0_0() { return cParametersVariableAssignmentParserRuleCall_9_0_0; }

		//("," parameters+=VariableAssignment)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_9_1_1() { return cParametersAssignment_9_1_1; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_9_1_1_0() { return cParametersVariableAssignmentParserRuleCall_9_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//(members+=VariableDeclaration ("," members+=VariableDeclaration)*)?
		public Group getGroup_12() { return cGroup_12; }

		//members+=VariableDeclaration
		public Assignment getMembersAssignment_12_0() { return cMembersAssignment_12_0; }

		//VariableDeclaration
		public RuleCall getMembersVariableDeclarationParserRuleCall_12_0_0() { return cMembersVariableDeclarationParserRuleCall_12_0_0; }

		//("," members+=VariableDeclaration)*
		public Group getGroup_12_1() { return cGroup_12_1; }

		//","
		public Keyword getCommaKeyword_12_1_0() { return cCommaKeyword_12_1_0; }

		//members+=VariableDeclaration
		public Assignment getMembersAssignment_12_1_1() { return cMembersAssignment_12_1_1; }

		//VariableDeclaration
		public RuleCall getMembersVariableDeclarationParserRuleCall_12_1_1_0() { return cMembersVariableDeclarationParserRuleCall_12_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class VariableDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionMember");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////////
		//// variables //
		/////////////////
		//// entries allowed inside variable definition
		//VariableDefinitionMember:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierVariableQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0_0_0 = (RuleCall)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_0_1_0 = (RuleCall)cNameAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cCollectionAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_2_1_0_0 = (RuleCall)cCollectionAssignment_2_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_1_2_0 = (RuleCall)cTypeAssignment_2_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cNameAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_2_1_4_0 = (RuleCall)cNameAssignment_2_1_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstructorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstructorIDTerminalRuleCall_3_1_0 = (RuleCall)cConstructorAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cParametersAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_3_3_0_0 = (RuleCall)cParametersAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_3_1_1 = (Assignment)cGroup_3_3_1.eContents().get(1);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_3_3_1_1_0 = (RuleCall)cParametersAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//VariableDeclaration:
		//	{VariableDeclaration} qualifier=VariableQualifier? (type=VariableType name=ID | collection=CollectionID "<"
		//	type=VariableType ">" name=ID) ("=" constructor=ID "(" (parameters+=VariableAssignment (","
		//	parameters+=VariableAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} qualifier=VariableQualifier? (type=VariableType name=ID | collection=CollectionID "<"
		//type=VariableType ">" name=ID) ("=" constructor=ID "(" (parameters+=VariableAssignment (","
		//parameters+=VariableAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }

		//qualifier=VariableQualifier?
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//VariableQualifier
		public RuleCall getQualifierVariableQualifierParserRuleCall_1_0() { return cQualifierVariableQualifierParserRuleCall_1_0; }

		//type=VariableType name=ID | collection=CollectionID "<" type=VariableType ">" name=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=VariableType name=ID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type=VariableType
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0_0_0() { return cTypeVariableTypeParserRuleCall_2_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_0_1() { return cNameAssignment_2_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_1_0() { return cNameIDTerminalRuleCall_2_0_1_0; }

		//collection=CollectionID "<" type=VariableType ">" name=ID
		public Group getGroup_2_1() { return cGroup_2_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_2_1_0() { return cCollectionAssignment_2_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_2_1_0_0() { return cCollectionCollectionIDParserRuleCall_2_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_1_1() { return cLessThanSignKeyword_2_1_1; }

		//type=VariableType
		public Assignment getTypeAssignment_2_1_2() { return cTypeAssignment_2_1_2; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_1_2_0() { return cTypeVariableTypeParserRuleCall_2_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_1_3() { return cGreaterThanSignKeyword_2_1_3; }

		//name=ID
		public Assignment getNameAssignment_2_1_4() { return cNameAssignment_2_1_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_4_0() { return cNameIDTerminalRuleCall_2_1_4_0; }

		//("=" constructor=ID "(" (parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//constructor=ID
		public Assignment getConstructorAssignment_3_1() { return cConstructorAssignment_3_1; }

		//ID
		public RuleCall getConstructorIDTerminalRuleCall_3_1_0() { return cConstructorIDTerminalRuleCall_3_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_3_3_0() { return cParametersAssignment_3_3_0; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_3_3_0_0() { return cParametersVariableAssignmentParserRuleCall_3_3_0_0; }

		//("," parameters+=VariableAssignment)*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//","
		public Keyword getCommaKeyword_3_3_1_0() { return cCommaKeyword_3_3_1_0; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_3_3_1_1() { return cParametersAssignment_3_3_1_1; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_3_3_1_1_0() { return cParametersVariableAssignmentParserRuleCall_3_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrimitiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPrimitiveAlternatives_1_0 = (Alternatives)cPrimitiveAssignment_1.eContents().get(0);
		private final RuleCall cPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0 = (RuleCall)cPrimitiveAlternatives_1_0.eContents().get(0);
		private final RuleCall cPrimitiveIDTerminalRuleCall_1_0_1 = (RuleCall)cPrimitiveAlternatives_1_0.eContents().get(1);
		
		////	primitive=PrimitiveVariableType | reference=[VariableDefinition] // fix crossreferencing
		//VariableType:
		//	{VariableType} primitive=(PrimitiveVariableType | ID);
		public ParserRule getRule() { return rule; }

		//{VariableType} primitive=(PrimitiveVariableType | ID)
		public Group getGroup() { return cGroup; }

		//{VariableType}
		public Action getVariableTypeAction_0() { return cVariableTypeAction_0; }

		//primitive=(PrimitiveVariableType | ID)
		public Assignment getPrimitiveAssignment_1() { return cPrimitiveAssignment_1; }

		//PrimitiveVariableType | ID
		public Alternatives getPrimitiveAlternatives_1_0() { return cPrimitiveAlternatives_1_0; }

		//PrimitiveVariableType
		public RuleCall getPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0() { return cPrimitivePrimitiveVariableTypeParserRuleCall_1_0_0; }

		//ID
		public RuleCall getPrimitiveIDTerminalRuleCall_1_0_1() { return cPrimitiveIDTerminalRuleCall_1_0_1; }
	}

	public class VariableQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableQualifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObservableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VariableQualifier:
		//	{VariableQualifier} "observable";
		public ParserRule getRule() { return rule; }

		//{VariableQualifier} "observable"
		public Group getGroup() { return cGroup; }

		//{VariableQualifier}
		public Action getVariableQualifierAction_0() { return cVariableQualifierAction_0; }

		//"observable"
		public Keyword getObservableKeyword_1() { return cObservableKeyword_1; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAttributeParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//VariableAssignment:
		//	{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableAssignment}
		public Action getVariableAssignmentAction_0() { return cVariableAssignmentAction_0; }

		//variable=VariableAttribute
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAttribute
		public RuleCall getVariableVariableAttributeParserRuleCall_1_0() { return cVariableVariableAttributeParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_3_0() { return cExpressionVariableExpressionParserRuleCall_3_0; }
	}

	public class VariableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameREALParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cTildeKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		
		//VariableAttribute:
		//	{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?;
		public ParserRule getRule() { return rule; }

		//{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?
		public Group getGroup() { return cGroup; }

		//{VariableAttribute}
		public Action getVariableAttributeAction_0() { return cVariableAttributeAction_0; }

		//name=(ID | REAL)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | REAL
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//REAL
		public RuleCall getNameREALParserRuleCall_1_0_1() { return cNameREALParserRuleCall_1_0_1; }

		//(("." | "~") attribute=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"." | "~"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//"~"
		public Keyword getTildeKeyword_2_0_1() { return cTildeKeyword_2_0_1; }

		//attribute=ID
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }

		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_1_0() { return cAttributeIDTerminalRuleCall_2_1_0; }
	}

	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersVariableAttributeParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVariableExpressionOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersVariableAttributeParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		
		//VariableExpression:
		//	{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*;
		public ParserRule getRule() { return rule; }

		//{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*
		public Group getGroup() { return cGroup; }

		//{VariableExpression}
		public Action getVariableExpressionAction_0() { return cVariableExpressionAction_0; }

		//members+=VariableAttribute
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//VariableAttribute
		public RuleCall getMembersVariableAttributeParserRuleCall_1_0() { return cMembersVariableAttributeParserRuleCall_1_0; }

		//(VariableExpressionOperator members+=VariableAttribute)*
		public Group getGroup_2() { return cGroup_2; }

		//VariableExpressionOperator
		public RuleCall getVariableExpressionOperatorParserRuleCall_2_0() { return cVariableExpressionOperatorParserRuleCall_2_0; }

		//members+=VariableAttribute
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//VariableAttribute
		public RuleCall getMembersVariableAttributeParserRuleCall_2_1_0() { return cMembersVariableAttributeParserRuleCall_2_1_0; }
	}

	public class VariableExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableExpressionOperator:
		//	"+" | "-" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class PrimitiveVariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDNAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCHASSISKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPROCESSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//PrimitiveVariableType:
		//	"ID" | "DNA" | "CHASSIS" | "PROCESS";
		public ParserRule getRule() { return rule; }

		//"ID" | "DNA" | "CHASSIS" | "PROCESS"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ID"
		public Keyword getIDKeyword_0() { return cIDKeyword_0; }

		//"DNA"
		public Keyword getDNAKeyword_1() { return cDNAKeyword_1; }

		//"CHASSIS"
		public Keyword getCHASSISKeyword_2() { return cCHASSISKeyword_2; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_3() { return cPROCESSKeyword_3; }
	}

	public class CollectionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CollectionID:
		//	"LIST" | "SET";
		public ParserRule getRule() { return rule; }

		//"LIST" | "SET"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//"SET"
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }
	}

	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLhsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_0_0 = (RuleCall)cLhsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_1_1_0 = (RuleCall)cLhsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_0_0 = (RuleCall)cRhsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPlusSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRhsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_1_1_0 = (RuleCall)cRhsAssignment_6_1_1.eContents().get(0);
		
		/////////////
		//// rules //
		/////////////
		//RuleDefinition:
		//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | "<->") (rhs+=RuleObject ("+"
		//	rhs+=RuleObject)*)?;
		public ParserRule getRule() { return rule; }

		//{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | "<->") (rhs+=RuleObject ("+"
		//rhs+=RuleObject)*)?
		public Group getGroup() { return cGroup; }

		//{RuleDefinition}
		public Action getRuleDefinitionAction_0() { return cRuleDefinitionAction_0; }

		//"RULE"
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(lhs+=RuleObject ("+" lhs+=RuleObject)*)?
		public Group getGroup_4() { return cGroup_4; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_0() { return cLhsAssignment_4_0; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_0_0() { return cLhsRuleObjectParserRuleCall_4_0_0; }

		//("+" lhs+=RuleObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_1_1() { return cLhsAssignment_4_1_1; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_1_1_0() { return cLhsRuleObjectParserRuleCall_4_1_1_0; }

		//"->" | "<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_5_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_5_1; }

		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup_6() { return cGroup_6; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_0() { return cRhsAssignment_6_0; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_0_0() { return cRhsRuleObjectParserRuleCall_6_0_0; }

		//("+" rhs+=RuleObject)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"+"
		public Keyword getPlusSignKeyword_6_1_0() { return cPlusSignKeyword_6_1_0; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_1_1() { return cRhsAssignment_6_1_1; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_1_1_0() { return cRhsRuleObjectParserRuleCall_6_1_1_0; }
	}

	public class RuleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSubobjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubobjectsIDTerminalRuleCall_1_0 = (RuleCall)cSubobjectsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTildeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubobjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubobjectsIDTerminalRuleCall_2_1_0 = (RuleCall)cSubobjectsAssignment_2_1.eContents().get(0);
		
		//RuleObject:
		//	{RuleObject} subobjects+=ID ("~" subobjects+=ID)*;
		public ParserRule getRule() { return rule; }

		//{RuleObject} subobjects+=ID ("~" subobjects+=ID)*
		public Group getGroup() { return cGroup; }

		//{RuleObject}
		public Action getRuleObjectAction_0() { return cRuleObjectAction_0; }

		//subobjects+=ID
		public Assignment getSubobjectsAssignment_1() { return cSubobjectsAssignment_1; }

		//ID
		public RuleCall getSubobjectsIDTerminalRuleCall_1_0() { return cSubobjectsIDTerminalRuleCall_1_0; }

		//("~" subobjects+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"~"
		public Keyword getTildeKeyword_2_0() { return cTildeKeyword_2_0; }

		//subobjects+=ID
		public Assignment getSubobjectsAssignment_2_1() { return cSubobjectsAssignment_2_1; }

		//ID
		public RuleCall getSubobjectsIDTerminalRuleCall_2_1_0() { return cSubobjectsIDTerminalRuleCall_2_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//// allow import of multiple model files e.g. libraries
		//Import:
		//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//{Import} "import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// a qualified name                                                                                      
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// real numbers
		//REAL:
		//	Decimal | DecimalExp;
		public ParserRule getRule() { return rule; }

		//Decimal | DecimalExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decimal
		public RuleCall getDecimalParserRuleCall_0() { return cDecimalParserRuleCall_0; }

		//DecimalExp
		public RuleCall getDecimalExpParserRuleCall_1() { return cDecimalExpParserRuleCall_1; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Decimal hidden():
		//	("+" | "-")? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DecimalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cEKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DecimalExp hidden():
		//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//"E" | "e"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"E"
		public Keyword getEKeyword_3_0() { return cEKeyword_3_0; }

		//"e"
		public Keyword getEKeyword_3_1() { return cEKeyword_3_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"+"
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}
	
	
	private ModelElements pModel;
	private ModelMemberElements pModelMember;
	private VariableDefinitionElements pVariableDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private FunctionUseMemberElements pFunctionUseMember;
	private FunctionParameterMemberElements pFunctionParameterMember;
	private ParameterScopeElements pParameterScope;
	private FunctionDefinitionMemberElements pFunctionDefinitionMember;
	private DeviceDefinitionElements pDeviceDefinition;
	private VariableDefinitionMemberElements pVariableDefinitionMember;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableTypeElements pVariableType;
	private VariableQualifierElements pVariableQualifier;
	private VariableAssignmentElements pVariableAssignment;
	private VariableAttributeElements pVariableAttribute;
	private VariableExpressionElements pVariableExpression;
	private VariableExpressionOperatorElements pVariableExpressionOperator;
	private PrimitiveVariableTypeElements pPrimitiveVariableType;
	private CollectionIDElements pCollectionID;
	private RuleDefinitionElements pRuleDefinition;
	private RuleObjectElements pRuleObject;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private REALElements pREAL;
	private DecimalElements pDecimal;
	private DecimalExpElements pDecimalExp;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IblGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("roadblock.xtext.ibl.Ibl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// a model is composed of model members
	//Model:
	//	{Model} members+=ModelMember*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// these are the model members
	//ModelMember:
	//	Import | VariableDefinition | FunctionDefinition;
	public ModelMemberElements getModelMemberAccess() {
		return (pModelMember != null) ? pModelMember : (pModelMember = new ModelMemberElements());
	}
	
	public ParserRule getModelMemberRule() {
		return getModelMemberAccess().getRule();
	}

	//// a definition of a variable
	//VariableDefinition:
	//	{VariableDefinition} "define" type=VariableType? name=ID "{" members+=VariableDefinitionMember* "}";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//// a definition of a function
	//FunctionDefinition:
	//	{FunctionDefinition} "define" type=VariableType? name=ID "(" //		parameters+=FunctionParameterMember*
	//	parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)* ")" "{"
	//	members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember))?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//FunctionUseMember:
	//	type=ID name=ID;
	public FunctionUseMemberElements getFunctionUseMemberAccess() {
		return (pFunctionUseMember != null) ? pFunctionUseMember : (pFunctionUseMember = new FunctionUseMemberElements());
	}
	
	public ParserRule getFunctionUseMemberRule() {
		return getFunctionUseMemberAccess().getRule();
	}

	////	type=[VariableDefinition] name=ID ':' scope=ParameterScope // fix crossreferencing
	//FunctionParameterMember:
	//	type=ID name=ID ":" scope=ParameterScope;
	public FunctionParameterMemberElements getFunctionParameterMemberAccess() {
		return (pFunctionParameterMember != null) ? pFunctionParameterMember : (pFunctionParameterMember = new FunctionParameterMemberElements());
	}
	
	public ParserRule getFunctionParameterMemberRule() {
		return getFunctionParameterMemberAccess().getRule();
	}

	//ParameterScope:
	//	"required" | "returned" | "optional";
	public ParameterScopeElements getParameterScopeAccess() {
		return (pParameterScope != null) ? pParameterScope : (pParameterScope = new ParameterScopeElements());
	}
	
	public ParserRule getParameterScopeRule() {
		return getParameterScopeAccess().getRule();
	}

	//FunctionDefinitionMember:
	//	RuleDefinition | VariableAssignment | VariableDeclaration | DeviceDefinition;
	public FunctionDefinitionMemberElements getFunctionDefinitionMemberAccess() {
		return (pFunctionDefinitionMember != null) ? pFunctionDefinitionMember : (pFunctionDefinitionMember = new FunctionDefinitionMemberElements());
	}
	
	public ParserRule getFunctionDefinitionMemberRule() {
		return getFunctionDefinitionMemberAccess().getRule();
	}

	//DeviceDefinition:
	//	{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
	//	(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" (members+=VariableDeclaration (","
	//	members+=VariableDeclaration)*)? "}";
	public DeviceDefinitionElements getDeviceDefinitionAccess() {
		return (pDeviceDefinition != null) ? pDeviceDefinition : (pDeviceDefinition = new DeviceDefinitionElements());
	}
	
	public ParserRule getDeviceDefinitionRule() {
		return getDeviceDefinitionAccess().getRule();
	}

	/////////////////
	//// variables //
	/////////////////
	//// entries allowed inside variable definition
	//VariableDefinitionMember:
	//	VariableDeclaration;
	public VariableDefinitionMemberElements getVariableDefinitionMemberAccess() {
		return (pVariableDefinitionMember != null) ? pVariableDefinitionMember : (pVariableDefinitionMember = new VariableDefinitionMemberElements());
	}
	
	public ParserRule getVariableDefinitionMemberRule() {
		return getVariableDefinitionMemberAccess().getRule();
	}

	//VariableDeclaration:
	//	{VariableDeclaration} qualifier=VariableQualifier? (type=VariableType name=ID | collection=CollectionID "<"
	//	type=VariableType ">" name=ID) ("=" constructor=ID "(" (parameters+=VariableAssignment (","
	//	parameters+=VariableAssignment)*)? ")")?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	////	primitive=PrimitiveVariableType | reference=[VariableDefinition] // fix crossreferencing
	//VariableType:
	//	{VariableType} primitive=(PrimitiveVariableType | ID);
	public VariableTypeElements getVariableTypeAccess() {
		return (pVariableType != null) ? pVariableType : (pVariableType = new VariableTypeElements());
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}

	//VariableQualifier:
	//	{VariableQualifier} "observable";
	public VariableQualifierElements getVariableQualifierAccess() {
		return (pVariableQualifier != null) ? pVariableQualifier : (pVariableQualifier = new VariableQualifierElements());
	}
	
	public ParserRule getVariableQualifierRule() {
		return getVariableQualifierAccess().getRule();
	}

	//VariableAssignment:
	//	{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//VariableAttribute:
	//	{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?;
	public VariableAttributeElements getVariableAttributeAccess() {
		return (pVariableAttribute != null) ? pVariableAttribute : (pVariableAttribute = new VariableAttributeElements());
	}
	
	public ParserRule getVariableAttributeRule() {
		return getVariableAttributeAccess().getRule();
	}

	//VariableExpression:
	//	{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*;
	public VariableExpressionElements getVariableExpressionAccess() {
		return (pVariableExpression != null) ? pVariableExpression : (pVariableExpression = new VariableExpressionElements());
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}

	//VariableExpressionOperator:
	//	"+" | "-" | "|";
	public VariableExpressionOperatorElements getVariableExpressionOperatorAccess() {
		return (pVariableExpressionOperator != null) ? pVariableExpressionOperator : (pVariableExpressionOperator = new VariableExpressionOperatorElements());
	}
	
	public ParserRule getVariableExpressionOperatorRule() {
		return getVariableExpressionOperatorAccess().getRule();
	}

	//PrimitiveVariableType:
	//	"ID" | "DNA" | "CHASSIS" | "PROCESS";
	public PrimitiveVariableTypeElements getPrimitiveVariableTypeAccess() {
		return (pPrimitiveVariableType != null) ? pPrimitiveVariableType : (pPrimitiveVariableType = new PrimitiveVariableTypeElements());
	}
	
	public ParserRule getPrimitiveVariableTypeRule() {
		return getPrimitiveVariableTypeAccess().getRule();
	}

	//CollectionID:
	//	"LIST" | "SET";
	public CollectionIDElements getCollectionIDAccess() {
		return (pCollectionID != null) ? pCollectionID : (pCollectionID = new CollectionIDElements());
	}
	
	public ParserRule getCollectionIDRule() {
		return getCollectionIDAccess().getRule();
	}

	/////////////
	//// rules //
	/////////////
	//RuleDefinition:
	//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | "<->") (rhs+=RuleObject ("+"
	//	rhs+=RuleObject)*)?;
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return (pRuleDefinition != null) ? pRuleDefinition : (pRuleDefinition = new RuleDefinitionElements());
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}

	//RuleObject:
	//	{RuleObject} subobjects+=ID ("~" subobjects+=ID)*;
	public RuleObjectElements getRuleObjectAccess() {
		return (pRuleObject != null) ? pRuleObject : (pRuleObject = new RuleObjectElements());
	}
	
	public ParserRule getRuleObjectRule() {
		return getRuleObjectAccess().getRule();
	}

	//// allow import of multiple model files e.g. libraries
	//Import:
	//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// a qualified name                                                                                      
	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// real numbers
	//REAL:
	//	Decimal | DecimalExp;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//Decimal hidden():
	//	("+" | "-")? INT ("." INT)?;
	public DecimalElements getDecimalAccess() {
		return (pDecimal != null) ? pDecimal : (pDecimal = new DecimalElements());
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//DecimalExp hidden():
	//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
	public DecimalExpElements getDecimalExpAccess() {
		return (pDecimalExp != null) ? pDecimalExp : (pDecimalExp = new DecimalExpElements());
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
