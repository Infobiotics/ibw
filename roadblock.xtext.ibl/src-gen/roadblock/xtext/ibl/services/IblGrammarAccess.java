/*
* generated by Xtext
*/
package roadblock.xtext.ibl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IblGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersModelMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		
		///////////////////////
		//// top level rules //
		///////////////////////
		//// a model is composed of top level model members
		//Model:
		//	{Model} members+=ModelMember*;
		public ParserRule getRule() { return rule; }

		//{Model} members+=ModelMember*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//members+=ModelMember*
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ModelMember
		public RuleCall getMembersModelMemberParserRuleCall_1_0() { return cMembersModelMemberParserRuleCall_1_0; }
	}

	public class ModelMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// model members are an import statement, variable definition or function definition
		//ModelMember:
		//	ImportStatement | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//ImportStatement | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ImportStatement
		public RuleCall getImportStatementParserRuleCall_0() { return cImportStatementParserRuleCall_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_1() { return cFunctionDefinitionParserRuleCall_1; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		////////////////////////
		//// import statement //
		////////////////////////
		//ImportStatement:
		//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//{Import} "import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeofKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeFunctionTypeParserRuleCall_4_0_0 = (RuleCall)cTypeAlternatives_4_0.eContents().get(0);
		private final RuleCall cTypeVariableNameParserRuleCall_4_0_1 = (RuleCall)cTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMembersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMembersFunctionBodyMemberParserRuleCall_9_0 = (RuleCall)cMembersAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cUSESKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cUsesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_11_1_0 = (RuleCall)cUsesAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cCommaKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cUsesAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_11_2_1_0 = (RuleCall)cUsesAssignment_11_2_1.eContents().get(0);
		
		/////////////////
		//// functions //
		/////////////////
		//// a function definition
		//FunctionDefinition:
		//	{FunctionDefinition} "define" name=VariableName "typeof" type=(FunctionType | VariableName) "("
		//	(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionBodyMember*
		//	"}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?;
		public ParserRule getRule() { return rule; }

		//{FunctionDefinition} "define" name=VariableName "typeof" type=(FunctionType | VariableName) "("
		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionBodyMember*
		//"}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?
		public Group getGroup() { return cGroup; }

		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"typeof"
		public Keyword getTypeofKeyword_3() { return cTypeofKeyword_3; }

		//type=(FunctionType | VariableName)
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//FunctionType | VariableName
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }

		//FunctionType
		public RuleCall getTypeFunctionTypeParserRuleCall_4_0_0() { return cTypeFunctionTypeParserRuleCall_4_0_0; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_4_0_1() { return cTypeVariableNameParserRuleCall_4_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_6_0_0() { return cParametersFunctionParameterMemberParserRuleCall_6_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_6_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//members+=FunctionBodyMember*
		public Assignment getMembersAssignment_9() { return cMembersAssignment_9; }

		//FunctionBodyMember
		public RuleCall getMembersFunctionBodyMemberParserRuleCall_9_0() { return cMembersFunctionBodyMemberParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?
		public Group getGroup_11() { return cGroup_11; }

		//"USES"
		public Keyword getUSESKeyword_11_0() { return cUSESKeyword_11_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_11_1() { return cUsesAssignment_11_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_11_1_0() { return cUsesFunctionUseMemberParserRuleCall_11_1_0; }

		//("," uses+=FunctionUseMember)*
		public Group getGroup_11_2() { return cGroup_11_2; }

		//","
		public Keyword getCommaKeyword_11_2_0() { return cCommaKeyword_11_2_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_11_2_1() { return cUsesAssignment_11_2_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_11_2_1_0() { return cUsesFunctionUseMemberParserRuleCall_11_2_1_0; }
	}

	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPROCESSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCELLKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSYSTEMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cREGIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// function types
		//FunctionType:
		//	"PROCESS" | "CELL" | "SYSTEM" | "REGION";
		public ParserRule getRule() { return rule; }

		//"PROCESS" | "CELL" | "SYSTEM" | "REGION"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_0() { return cPROCESSKeyword_0; }

		//"CELL"
		public Keyword getCELLKeyword_1() { return cCELLKeyword_1; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_2() { return cSYSTEMKeyword_2; }

		//"REGION"
		public Keyword getREGIONKeyword_3() { return cREGIONKeyword_3; }
	}

	public class FunctionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScopeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScopeFunctionParameterScopeParserRuleCall_2_1_0 = (RuleCall)cScopeAssignment_2_1.eContents().get(0);
		
		//// function parameter member
		//FunctionParameterMember:
		//	type=VariableType name=VariableName (":" scope=FunctionParameterScope)?;
		public ParserRule getRule() { return rule; }

		//type=VariableType name=VariableName (":" scope=FunctionParameterScope)?
		public Group getGroup() { return cGroup; }

		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }

		//(":" scope=FunctionParameterScope)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//scope=FunctionParameterScope
		public Assignment getScopeAssignment_2_1() { return cScopeAssignment_2_1; }

		//FunctionParameterScope
		public RuleCall getScopeFunctionParameterScopeParserRuleCall_2_1_0() { return cScopeFunctionParameterScopeParserRuleCall_2_1_0; }
	}

	public class FunctionParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// allowed scope of function parameters
		//FunctionParameterScope:
		//	"required" | "returned" | "optional";
		public ParserRule getRule() { return rule; }

		//"required" | "returned" | "optional"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//"returned"
		public Keyword getReturnedKeyword_1() { return cReturnedKeyword_1; }

		//"optional"
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
	}

	public class FunctionBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeviceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cATGCDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPropertyDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// function definition body member
		//FunctionBodyMember:
		//	RuleDefinition | DeviceDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | DeviceDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_1() { return cDeviceDefinitionParserRuleCall_1; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_2() { return cVariableDefinitionParserRuleCall_2; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_3() { return cVariableAssignmentParserRuleCall_3; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_4() { return cATGCDefinitionParserRuleCall_4; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_5() { return cPropertyDefinitionParserRuleCall_5; }
	}

	public class FunctionUseMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionUseMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// function use member
		//FunctionUseMember:
		//	type=VariableType name=VariableName;
		public ParserRule getRule() { return rule; }

		//type=VariableType name=VariableName
		public Group getGroup() { return cGroup; }

		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////////
		//// variables //
		/////////////////
		//// a variable
		//VariableName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class VariableComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableComplex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableComplexAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsVariableNameParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTildeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComponentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComponentsVariableNameParserRuleCall_2_1_0 = (RuleCall)cComponentsAssignment_2_1.eContents().get(0);
		
		//// a variable complex
		//VariableComplex:
		//	{VariableComplex} components+=VariableName ("~" components+=VariableName)+;
		public ParserRule getRule() { return rule; }

		//{VariableComplex} components+=VariableName ("~" components+=VariableName)+
		public Group getGroup() { return cGroup; }

		//{VariableComplex}
		public Action getVariableComplexAction_0() { return cVariableComplexAction_0; }

		//components+=VariableName
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//VariableName
		public RuleCall getComponentsVariableNameParserRuleCall_1_0() { return cComponentsVariableNameParserRuleCall_1_0; }

		//("~" components+=VariableName)+
		public Group getGroup_2() { return cGroup_2; }

		//"~"
		public Keyword getTildeKeyword_2_0() { return cTildeKeyword_2_0; }

		//components+=VariableName
		public Assignment getComponentsAssignment_2_1() { return cComponentsAssignment_2_1; }

		//VariableName
		public RuleCall getComponentsVariableNameParserRuleCall_2_1_0() { return cComponentsVariableNameParserRuleCall_2_1_0; }
	}

	public class VariableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeVariableNameParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//// a variable attribute
		//VariableAttribute:
		//	{VariableAttribute} name=VariableName "." attribute=VariableName;
		public ParserRule getRule() { return rule; }

		//{VariableAttribute} name=VariableName "." attribute=VariableName
		public Group getGroup() { return cGroup; }

		//{VariableAttribute}
		public Action getVariableAttributeAction_0() { return cVariableAttributeAction_0; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//attribute=VariableName
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//VariableName
		public RuleCall getAttributeVariableNameParserRuleCall_3_0() { return cAttributeVariableNameParserRuleCall_3_0; }
	}

	public class UserDefinedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefinedType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UserDefinedType:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierVariableQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDefinitionAlternatives_2_0 = (Alternatives)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionVariableDefinitionBuiltInParserRuleCall_2_0_0 = (RuleCall)cDefinitionAlternatives_2_0.eContents().get(0);
		private final RuleCall cDefinitionVariableDefinitionUserDefinedParserRuleCall_2_0_1 = (RuleCall)cDefinitionAlternatives_2_0.eContents().get(1);
		private final RuleCall cDefinitionVariableDefinitionCollectionParserRuleCall_2_0_2 = (RuleCall)cDefinitionAlternatives_2_0.eContents().get(2);
		private final RuleCall cDefinitionVariableDefinitionBasicParserRuleCall_2_0_3 = (RuleCall)cDefinitionAlternatives_2_0.eContents().get(3);
		
		//// a definition of a variable
		//VariableDefinition:
		//	{VariableDefinition} qualifier=VariableQualifier? definition=(VariableDefinitionBuiltIn |
		//	VariableDefinitionUserDefined | VariableDefinitionCollection | VariableDefinitionBasic);
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} qualifier=VariableQualifier? definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined
		//| VariableDefinitionCollection | VariableDefinitionBasic)
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//qualifier=VariableQualifier?
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//VariableQualifier
		public RuleCall getQualifierVariableQualifierParserRuleCall_1_0() { return cQualifierVariableQualifierParserRuleCall_1_0; }

		//definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined | VariableDefinitionCollection |
		//VariableDefinitionBasic)
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//VariableDefinitionBuiltIn | VariableDefinitionUserDefined | VariableDefinitionCollection | VariableDefinitionBasic
		public Alternatives getDefinitionAlternatives_2_0() { return cDefinitionAlternatives_2_0; }

		//VariableDefinitionBuiltIn
		public RuleCall getDefinitionVariableDefinitionBuiltInParserRuleCall_2_0_0() { return cDefinitionVariableDefinitionBuiltInParserRuleCall_2_0_0; }

		//VariableDefinitionUserDefined
		public RuleCall getDefinitionVariableDefinitionUserDefinedParserRuleCall_2_0_1() { return cDefinitionVariableDefinitionUserDefinedParserRuleCall_2_0_1; }

		//VariableDefinitionCollection
		public RuleCall getDefinitionVariableDefinitionCollectionParserRuleCall_2_0_2() { return cDefinitionVariableDefinitionCollectionParserRuleCall_2_0_2; }

		//VariableDefinitionBasic
		public RuleCall getDefinitionVariableDefinitionBasicParserRuleCall_2_0_3() { return cDefinitionVariableDefinitionBasicParserRuleCall_2_0_3; }
	}

	public class VariableDefinitionBuiltInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionBuiltIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionBuiltInAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cConstructorAlternatives_3_2_0 = (Alternatives)cConstructorAssignment_3_2.eContents().get(0);
		private final RuleCall cConstructorVariableTypeParserRuleCall_3_2_0_0 = (RuleCall)cConstructorAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0_1 = (RuleCall)cConstructorAlternatives_3_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//VariableDefinitionBuiltIn:
		//	{VariableDefinitionBuiltIn} type=VariableType name=VariableName ("=" "new" constructor=(VariableType | VariableName)
		//	"(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionBuiltIn} type=VariableType name=VariableName ("=" "new" constructor=(VariableType | VariableName) "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionBuiltIn}
		public Action getVariableDefinitionBuiltInAction_0() { return cVariableDefinitionBuiltInAction_0; }

		//type=VariableType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_0() { return cTypeVariableTypeParserRuleCall_1_0; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=(VariableType | VariableName) "(" (parameters+=ParameterAssignment (","
		//parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=(VariableType | VariableName)
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableType | VariableName
		public Alternatives getConstructorAlternatives_3_2_0() { return cConstructorAlternatives_3_2_0; }

		//VariableType
		public RuleCall getConstructorVariableTypeParserRuleCall_3_2_0_0() { return cConstructorVariableTypeParserRuleCall_3_2_0_0; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0_1() { return cConstructorVariableNameParserRuleCall_3_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VariableDefinitionUserDefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionUserDefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionUserDefinedAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//VariableDefinitionUserDefined:
		//	{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionUserDefined}
		public Action getVariableDefinitionUserDefinedAction_0() { return cVariableDefinitionUserDefinedAction_0; }

		//type=VariableName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_1_0() { return cTypeVariableNameParserRuleCall_1_0; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VariableDefinitionCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCollectionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_1_0_0 = (RuleCall)cCollectionAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cTypeAlternatives_1_2_0 = (Alternatives)cTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_2_0_0 = (RuleCall)cTypeAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cTypeVariableNameParserRuleCall_1_2_0_1 = (RuleCall)cTypeAlternatives_1_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cNameVariableNameParserRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueListParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//VariableDefinitionCollection:
		//	{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
		//	("=" value=List ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
		//("=" value=List ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionCollection}
		public Action getVariableDefinitionCollectionAction_0() { return cVariableDefinitionCollectionAction_0; }

		//collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName
		public Group getGroup_1() { return cGroup_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_1_0() { return cCollectionAssignment_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_1_0_0() { return cCollectionCollectionIDParserRuleCall_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//type=(VariableType | VariableName)
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//VariableType | VariableName
		public Alternatives getTypeAlternatives_1_2_0() { return cTypeAlternatives_1_2_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_2_0_0() { return cTypeVariableTypeParserRuleCall_1_2_0_0; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_1_2_0_1() { return cTypeVariableNameParserRuleCall_1_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//name=VariableName
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_4_0() { return cNameVariableNameParserRuleCall_1_4_0; }

		//("=" value=List ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=List
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//List
		public RuleCall getValueListParserRuleCall_2_1_0() { return cValueListParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class VariableDefinitionBasicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionBasic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionBasicAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//VariableDefinitionBasic:
		//	{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionBasic}
		public Action getVariableDefinitionBasicAction_0() { return cVariableDefinitionBasicAction_0; }

		//type=VariableType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_0() { return cTypeVariableTypeParserRuleCall_1_0; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_4_0() { return cExpressionVariableExpressionParserRuleCall_4_0; }
	}

	public class ParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVariableExpressionObjectParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// a parameter assignment
		//ParameterAssignment:
		//	name=VariableName "=" value=VariableExpressionObject;
		public ParserRule getRule() { return rule; }

		//name=VariableName "=" value=VariableExpressionObject
		public Group getGroup() { return cGroup; }

		//name=VariableName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_0_0() { return cNameVariableNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=VariableExpressionObject
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VariableExpressionObject
		public RuleCall getValueVariableExpressionObjectParserRuleCall_2_0() { return cValueVariableExpressionObjectParserRuleCall_2_0; }
	}

	public class VariableQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableQualifier");
		private final Keyword cObservableKeyword = (Keyword)rule.eContents().get(1);
		
		//// a variable qualifier
		//VariableQualifier:
		//	"observable";
		public ParserRule getRule() { return rule; }

		//"observable"
		public Keyword getObservableKeyword() { return cObservableKeyword; }
	}

	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMOLECULEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCELLKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRIBOSOMEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPROMOTERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPROTEINKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDNAKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRNAKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGENEKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cINTEGERKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRATEKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPROCESSKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSYSTEMKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//// variable types
		//VariableType:
		//	"MOLECULE" | "CELL" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" | "RATE" | "PROCESS" |
		//	"SYSTEM";
		public ParserRule getRule() { return rule; }

		//"MOLECULE" | "CELL" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" | "RATE" | "PROCESS" |
		//"SYSTEM"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"MOLECULE"
		public Keyword getMOLECULEKeyword_0() { return cMOLECULEKeyword_0; }

		//"CELL"
		public Keyword getCELLKeyword_1() { return cCELLKeyword_1; }

		//"RIBOSOME"
		public Keyword getRIBOSOMEKeyword_2() { return cRIBOSOMEKeyword_2; }

		//"PROMOTER"
		public Keyword getPROMOTERKeyword_3() { return cPROMOTERKeyword_3; }

		//"PROTEIN"
		public Keyword getPROTEINKeyword_4() { return cPROTEINKeyword_4; }

		//"DNA"
		public Keyword getDNAKeyword_5() { return cDNAKeyword_5; }

		//"RNA"
		public Keyword getRNAKeyword_6() { return cRNAKeyword_6; }

		//"GENE"
		public Keyword getGENEKeyword_7() { return cGENEKeyword_7; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_8() { return cINTEGERKeyword_8; }

		//"RATE"
		public Keyword getRATEKeyword_9() { return cRATEKeyword_9; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_10() { return cPROCESSKeyword_10; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_11() { return cSYSTEMKeyword_11; }
	}

	public class CollectionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// variable collections
		//CollectionID:
		//	"LIST" | "SET";
		public ParserRule getRule() { return rule; }

		//"LIST" | "SET"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//"SET"
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAssignmentObjectParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//// a variable assignment
		//VariableAssignment:
		//	{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableAssignment}
		public Action getVariableAssignmentAction_0() { return cVariableAssignmentAction_0; }

		//variable=VariableAssignmentObject
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAssignmentObject
		public RuleCall getVariableVariableAssignmentObjectParserRuleCall_1_0() { return cVariableVariableAssignmentObjectParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_3_0() { return cExpressionVariableExpressionParserRuleCall_3_0; }
	}

	public class VariableAssignmentObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignmentObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableAssignmentObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cVariableAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableAssignmentObject:
		//	{VariableAssignmentObject} VariableName | VariableAttribute;
		public ParserRule getRule() { return rule; }

		//{VariableAssignmentObject} VariableName | VariableAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//{VariableAssignmentObject} VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{VariableAssignmentObject}
		public Action getVariableAssignmentObjectAction_0_0() { return cVariableAssignmentObjectAction_0_0; }

		//VariableName
		public RuleCall getVariableNameParserRuleCall_0_1() { return cVariableNameParserRuleCall_0_1; }

		//VariableAttribute
		public RuleCall getVariableAttributeParserRuleCall_1() { return cVariableAttributeParserRuleCall_1; }
	}

	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersVariableExpressionObjectParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVariableExpressionOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersVariableExpressionObjectParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		
		//VariableExpression:
		//	{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator
		//	members+=VariableExpressionObject)*;
		public ParserRule getRule() { return rule; }

		//{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator members+=VariableExpressionObject)*
		public Group getGroup() { return cGroup; }

		//{VariableExpression}
		public Action getVariableExpressionAction_0() { return cVariableExpressionAction_0; }

		//members+=VariableExpressionObject
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//VariableExpressionObject
		public RuleCall getMembersVariableExpressionObjectParserRuleCall_1_0() { return cMembersVariableExpressionObjectParserRuleCall_1_0; }

		//(VariableExpressionOperator members+=VariableExpressionObject)*
		public Group getGroup_2() { return cGroup_2; }

		//VariableExpressionOperator
		public RuleCall getVariableExpressionOperatorParserRuleCall_2_0() { return cVariableExpressionOperatorParserRuleCall_2_0; }

		//members+=VariableExpressionObject
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//VariableExpressionObject
		public RuleCall getMembersVariableExpressionObjectParserRuleCall_2_1_0() { return cMembersVariableExpressionObjectParserRuleCall_2_1_0; }
	}

	public class VariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicVariableExpressionObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundVariableExpressionObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableExpressionObject:
		//	AtomicVariableExpressionObject | CompoundVariableExpressionObject;
		public ParserRule getRule() { return rule; }

		//AtomicVariableExpressionObject | CompoundVariableExpressionObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicVariableExpressionObject
		public RuleCall getAtomicVariableExpressionObjectParserRuleCall_0() { return cAtomicVariableExpressionObjectParserRuleCall_0; }

		//CompoundVariableExpressionObject
		public RuleCall getCompoundVariableExpressionObjectParserRuleCall_1() { return cCompoundVariableExpressionObjectParserRuleCall_1; }
	}

	public class AtomicVariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicVariableExpressionObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomicVariableExpressionObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableVariableNameParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeVariableAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Assignment cComplexAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cComplexVariableComplexParserRuleCall_2_0 = (RuleCall)cComplexAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueREALParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cQuantityAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cQuantityQuantityParserRuleCall_4_0 = (RuleCall)cQuantityAssignment_4.eContents().get(0);
		private final Assignment cStringAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cStringSTRINGTerminalRuleCall_5_0 = (RuleCall)cStringAssignment_5.eContents().get(0);
		
		//AtomicVariableExpressionObject:
		//	{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
		//	value=REAL | quantity=Quantity | string=STRING;
		public ParserRule getRule() { return rule; }

		//{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
		//value=REAL | quantity=Quantity | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtomicVariableExpressionObject} variable=VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{AtomicVariableExpressionObject}
		public Action getAtomicVariableExpressionObjectAction_0_0() { return cAtomicVariableExpressionObjectAction_0_0; }

		//variable=VariableName
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//VariableName
		public RuleCall getVariableVariableNameParserRuleCall_0_1_0() { return cVariableVariableNameParserRuleCall_0_1_0; }

		//attribute=VariableAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//VariableAttribute
		public RuleCall getAttributeVariableAttributeParserRuleCall_1_0() { return cAttributeVariableAttributeParserRuleCall_1_0; }

		//complex=VariableComplex
		public Assignment getComplexAssignment_2() { return cComplexAssignment_2; }

		//VariableComplex
		public RuleCall getComplexVariableComplexParserRuleCall_2_0() { return cComplexVariableComplexParserRuleCall_2_0; }

		//value=REAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//REAL
		public RuleCall getValueREALParserRuleCall_3_0() { return cValueREALParserRuleCall_3_0; }

		//quantity=Quantity
		public Assignment getQuantityAssignment_4() { return cQuantityAssignment_4; }

		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_4_0() { return cQuantityQuantityParserRuleCall_4_0; }

		//string=STRING
		public Assignment getStringAssignment_5() { return cStringAssignment_5; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_5_0() { return cStringSTRINGTerminalRuleCall_5_0; }
	}

	public class CompoundVariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundVariableExpressionObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundVariableExpressionObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//CompoundVariableExpressionObject:
		//	{CompoundVariableExpressionObject} list=List;
		public ParserRule getRule() { return rule; }

		//{CompoundVariableExpressionObject} list=List
		public Group getGroup() { return cGroup; }

		//{CompoundVariableExpressionObject}
		public Action getCompoundVariableExpressionObjectAction_0() { return cCompoundVariableExpressionObjectAction_0; }

		//list=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
	}

	public class VariableExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableExpressionOperator:
		//	"+" | "-" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLhsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_0_0 = (RuleCall)cLhsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_1_1_0 = (RuleCall)cLhsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cReversibleAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cReversibleAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_0_0 = (RuleCall)cRhsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPlusSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRhsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_1_1_0 = (RuleCall)cRhsAssignment_6_1_1.eContents().get(0);
		
		/////////////
		//// rules //
		/////////////
		//// rule definition
		//RuleDefinition:
		//	{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
		public ParserRule getRule() { return rule; }

		//{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup() { return cGroup; }

		//{RuleDefinition}
		public Action getRuleDefinitionAction_0() { return cRuleDefinitionAction_0; }

		//"RULE"
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(lhs+=RuleObject ("+" lhs+=RuleObject)*)?
		public Group getGroup_4() { return cGroup_4; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_0() { return cLhsAssignment_4_0; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_0_0() { return cLhsRuleObjectParserRuleCall_4_0_0; }

		//("+" lhs+=RuleObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_1_1() { return cLhsAssignment_4_1_1; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_1_1_0() { return cLhsRuleObjectParserRuleCall_4_1_1_0; }

		//"->" | reversible?="<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//reversible?="<->"
		public Assignment getReversibleAssignment_5_1() { return cReversibleAssignment_5_1; }

		//"<->"
		public Keyword getReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0() { return cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0; }

		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup_6() { return cGroup_6; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_0() { return cRhsAssignment_6_0; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_0_0() { return cRhsRuleObjectParserRuleCall_6_0_0; }

		//("+" rhs+=RuleObject)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"+"
		public Keyword getPlusSignKeyword_6_1_0() { return cPlusSignKeyword_6_1_0; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_1_1() { return cRhsAssignment_6_1_1; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_1_1_0() { return cRhsRuleObjectParserRuleCall_6_1_1_0; }
	}

	public class RuleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRuleObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cVariableComplexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// left or right hand side of rule
		//RuleObject:
		//	{RuleObject} VariableName | VariableComplex;
		public ParserRule getRule() { return rule; }

		//{RuleObject} VariableName | VariableComplex
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RuleObject} VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{RuleObject}
		public Action getRuleObjectAction_0_0() { return cRuleObjectAction_0_0; }

		//VariableName
		public RuleCall getVariableNameParserRuleCall_0_1() { return cVariableNameParserRuleCall_0_1; }

		//VariableComplex
		public RuleCall getVariableComplexParserRuleCall_1() { return cVariableComplexParserRuleCall_1; }
	}

	public class DeviceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDEVICEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDEVICEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPartsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPartsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPartsListParserRuleCall_9_0 = (RuleCall)cPartsAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Assignment cParametersAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_12_0_0 = (RuleCall)cParametersAssignment_12_0.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Keyword cCommaKeyword_12_1_0 = (Keyword)cGroup_12_1.eContents().get(0);
		private final Assignment cParametersAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_12_1_1_0 = (RuleCall)cParametersAssignment_12_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cMembersAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cMembersDeviceMembersParserRuleCall_15_0 = (RuleCall)cMembersAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		///////////////
		//// devices //
		///////////////
		//// device definition
		//DeviceDefinition:
		//	{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")" "{" members+=DeviceMembers* "}";
		public ParserRule getRule() { return rule; }

		//{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")" "{" members+=DeviceMembers* "}"
		public Group getGroup() { return cGroup; }

		//{DeviceDefinition}
		public Action getDeviceDefinitionAction_0() { return cDeviceDefinitionAction_0; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_1() { return cDEVICEKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"new"
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_5() { return cDEVICEKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//"parts"
		public Keyword getPartsKeyword_7() { return cPartsKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//parts=List
		public Assignment getPartsAssignment_9() { return cPartsAssignment_9; }

		//List
		public RuleCall getPartsListParserRuleCall_9_0() { return cPartsListParserRuleCall_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_12() { return cGroup_12; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_12_0() { return cParametersAssignment_12_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_12_0_0() { return cParametersParameterAssignmentParserRuleCall_12_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_12_1() { return cGroup_12_1; }

		//","
		public Keyword getCommaKeyword_12_1_0() { return cCommaKeyword_12_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_12_1_1() { return cParametersAssignment_12_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_12_1_1_0() { return cParametersParameterAssignmentParserRuleCall_12_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }

		//members+=DeviceMembers*
		public Assignment getMembersAssignment_15() { return cMembersAssignment_15; }

		//DeviceMembers
		public RuleCall getMembersDeviceMembersParserRuleCall_15_0() { return cMembersDeviceMembersParserRuleCall_15_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class DeviceMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceMembers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cATGCDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeviceMembers:
		//	VariableDefinition | PropertyDefinition | ATGCDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition | PropertyDefinition | ATGCDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0() { return cVariableDefinitionParserRuleCall_0; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_1() { return cPropertyDefinitionParserRuleCall_1; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_2() { return cATGCDefinitionParserRuleCall_2; }
	}

	public class ATGCDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATGCDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cATGCDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cATGCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandATGCCommandParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsVariableNameParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsVariableNameParserRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		
		//////////////////
		//// atgc rules //
		//////////////////
		//ATGCDefinition:
		//	{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*;
		public ParserRule getRule() { return rule; }

		//{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*
		public Group getGroup() { return cGroup; }

		//{ATGCDefinition}
		public Action getATGCDefinitionAction_0() { return cATGCDefinitionAction_0; }

		//"ATGC"
		public Keyword getATGCKeyword_1() { return cATGCKeyword_1; }

		//command=ATGCCommand
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }

		//ATGCCommand
		public RuleCall getCommandATGCCommandParserRuleCall_2_0() { return cCommandATGCCommandParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//arguments+=VariableName
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//VariableName
		public RuleCall getArgumentsVariableNameParserRuleCall_4_0() { return cArgumentsVariableNameParserRuleCall_4_0; }

		//("," arguments+=VariableName)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//arguments+=VariableName
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }

		//VariableName
		public RuleCall getArgumentsVariableNameParserRuleCall_5_1_0() { return cArgumentsVariableNameParserRuleCall_5_1_0; }
	}

	public class ATGCCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATGCCommand");
		private final Keyword cARRANGEKeyword = (Keyword)rule.eContents().get(1);
		
		//ATGCCommand:
		//	"ARRANGE";
		public ParserRule getRule() { return rule; }

		//"ARRANGE"
		public Keyword getARRANGEKeyword() { return cARRANGEKeyword; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVERIFYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPropertyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_0_1_0 = (RuleCall)cPropertyAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final RuleCall cBooleanOperatorParserRuleCall_2_0_2_0 = (RuleCall)cGroup_2_0_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_0_2_1_0 = (RuleCall)cPropertyAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cConditionAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cConditionPropertyConditionParserRuleCall_2_0_4_0 = (RuleCall)cConditionAssignment_2_0_4.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEXPECTEDKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_1_2_0 = (RuleCall)cNameAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cATTIMEINSTANTKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cTimeAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cTimeQuantityParserRuleCall_2_1_5_0 = (RuleCall)cTimeAssignment_2_1_5.eContents().get(0);
		private final Keyword cISKeyword_2_1_6 = (Keyword)cGroup_2_1.eContents().get(6);
		private final Alternatives cAlternatives_2_1_7 = (Alternatives)cGroup_2_1.eContents().get(7);
		private final Group cGroup_2_1_7_0 = (Group)cAlternatives_2_1_7.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1_7_0_0 = (Assignment)cGroup_2_1_7_0.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0 = (RuleCall)cOperatorAssignment_2_1_7_0_0.eContents().get(0);
		private final Assignment cConcentrationAssignment_2_1_7_0_1 = (Assignment)cGroup_2_1_7_0.eContents().get(1);
		private final RuleCall cConcentrationQuantityParserRuleCall_2_1_7_0_1_0 = (RuleCall)cConcentrationAssignment_2_1_7_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_1_7_1 = (Keyword)cAlternatives_2_1_7.eContents().get(1);
		
		///////////////////////////
		//// model checker rules //
		///////////////////////////
		//PropertyDefinition:
		//	{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
		//	condition=PropertyCondition | "EXPECTED" "[" name=VariableName "]" "AT TIME INSTANT" time=Quantity "IS"
		//	(operator=RelationalOperator concentration=Quantity | "?"));
		public ParserRule getRule() { return rule; }

		//{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
		//condition=PropertyCondition | "EXPECTED" "[" name=VariableName "]" "AT TIME INSTANT" time=Quantity "IS"
		//(operator=RelationalOperator concentration=Quantity | "?"))
		public Group getGroup() { return cGroup; }

		//{PropertyDefinition}
		public Action getPropertyDefinitionAction_0() { return cPropertyDefinitionAction_0; }

		//"VERIFY"
		public Keyword getVERIFYKeyword_1() { return cVERIFYKeyword_1; }

		//"[" property+=Property (BooleanOperator property+=Property)* "]" condition=PropertyCondition | "EXPECTED" "["
		//name=VariableName "]" "AT TIME INSTANT" time=Quantity "IS" (operator=RelationalOperator concentration=Quantity | "?")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"[" property+=Property (BooleanOperator property+=Property)* "]" condition=PropertyCondition
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_0_1() { return cPropertyAssignment_2_0_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_0_1_0() { return cPropertyPropertyParserRuleCall_2_0_1_0; }

		//(BooleanOperator property+=Property)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//BooleanOperator
		public RuleCall getBooleanOperatorParserRuleCall_2_0_2_0() { return cBooleanOperatorParserRuleCall_2_0_2_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_0_2_1() { return cPropertyAssignment_2_0_2_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_0_2_1_0() { return cPropertyPropertyParserRuleCall_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_3() { return cRightSquareBracketKeyword_2_0_3; }

		//condition=PropertyCondition
		public Assignment getConditionAssignment_2_0_4() { return cConditionAssignment_2_0_4; }

		//PropertyCondition
		public RuleCall getConditionPropertyConditionParserRuleCall_2_0_4_0() { return cConditionPropertyConditionParserRuleCall_2_0_4_0; }

		//"EXPECTED" "[" name=VariableName "]" "AT TIME INSTANT" time=Quantity "IS" (operator=RelationalOperator
		//concentration=Quantity | "?")
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"EXPECTED"
		public Keyword getEXPECTEDKeyword_2_1_0() { return cEXPECTEDKeyword_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_1() { return cLeftSquareBracketKeyword_2_1_1; }

		//name=VariableName
		public Assignment getNameAssignment_2_1_2() { return cNameAssignment_2_1_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_1_2_0() { return cNameVariableNameParserRuleCall_2_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//"AT TIME INSTANT"
		public Keyword getATTIMEINSTANTKeyword_2_1_4() { return cATTIMEINSTANTKeyword_2_1_4; }

		//time=Quantity
		public Assignment getTimeAssignment_2_1_5() { return cTimeAssignment_2_1_5; }

		//Quantity
		public RuleCall getTimeQuantityParserRuleCall_2_1_5_0() { return cTimeQuantityParserRuleCall_2_1_5_0; }

		//"IS"
		public Keyword getISKeyword_2_1_6() { return cISKeyword_2_1_6; }

		//operator=RelationalOperator concentration=Quantity | "?"
		public Alternatives getAlternatives_2_1_7() { return cAlternatives_2_1_7; }

		//operator=RelationalOperator concentration=Quantity
		public Group getGroup_2_1_7_0() { return cGroup_2_1_7_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2_1_7_0_0() { return cOperatorAssignment_2_1_7_0_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0() { return cOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0; }

		//concentration=Quantity
		public Assignment getConcentrationAssignment_2_1_7_0_1() { return cConcentrationAssignment_2_1_7_0_1; }

		//Quantity
		public RuleCall getConcentrationQuantityParserRuleCall_2_1_7_0_1_0() { return cConcentrationQuantityParserRuleCall_2_1_7_0_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2_1_7_1() { return cQuestionMarkKeyword_2_1_7_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsVariableNameParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsQuantityParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//Property:
		//	{Property} lhs=VariableName operator=RelationalOperator rhs=Quantity;
		public ParserRule getRule() { return rule; }

		//{Property} lhs=VariableName operator=RelationalOperator rhs=Quantity
		public Group getGroup() { return cGroup; }

		//{Property}
		public Action getPropertyAction_0() { return cPropertyAction_0; }

		//lhs=VariableName
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//VariableName
		public RuleCall getLhsVariableNameParserRuleCall_1_0() { return cLhsVariableNameParserRuleCall_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_0() { return cOperatorRelationalOperatorParserRuleCall_2_0; }

		//rhs=Quantity
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Quantity
		public RuleCall getRhsQuantityParserRuleCall_3_0() { return cRhsQuantityParserRuleCall_3_0; }
	}

	public class PropertyConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cWILLHOLDKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNEVERHOLDSKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cALWAYSHOLDSKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cEVENTUALLYHOLDSKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cSOMETIMESHOLDSKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWITHINTIMEBOUNDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLowerBoundAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLowerBoundQuantityParserRuleCall_2_2_0 = (RuleCall)cLowerBoundAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cUpperBoundsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cUpperBoundsQuantityParserRuleCall_2_4_0 = (RuleCall)cUpperBoundsAssignment_2_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cWITHPROBABILITYBOUNDKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Alternatives cAlternatives_2_6_1 = (Alternatives)cGroup_2_6.eContents().get(1);
		private final Group cGroup_2_6_1_0 = (Group)cAlternatives_2_6_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2_6_1_0_0 = (Assignment)cGroup_2_6_1_0.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0 = (RuleCall)cOperatorAssignment_2_6_1_0_0.eContents().get(0);
		private final Assignment cProbabilityAssignment_2_6_1_0_1 = (Assignment)cGroup_2_6_1_0.eContents().get(1);
		private final RuleCall cProbabilityREALParserRuleCall_2_6_1_0_1_0 = (RuleCall)cProbabilityAssignment_2_6_1_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_6_1_1 = (Keyword)cAlternatives_2_6_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGIVENKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_3_1_0 = (RuleCall)cInitialConditionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_3_2_1_0 = (RuleCall)cInitialConditionsAssignment_3_2_1.eContents().get(0);
		
		//PropertyCondition:
		//	{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS" | "EVENTUALLY HOLDS" | "SOMETIMES HOLDS")
		//	("WITHIN TIME BOUND" "[" lowerBound=Quantity "," upperBounds=Quantity "]" ("WITH PROBABILITY BOUND"
		//	(operator=RelationalOperator probability=REAL | "?"))?)? ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//	initialConditions+=PropertyInitialCondition)*)?;
		public ParserRule getRule() { return rule; }

		//{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS" | "EVENTUALLY HOLDS" | "SOMETIMES HOLDS")
		//("WITHIN TIME BOUND" "[" lowerBound=Quantity "," upperBounds=Quantity "]" ("WITH PROBABILITY BOUND"
		//(operator=RelationalOperator probability=REAL | "?"))?)? ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup() { return cGroup; }

		//{PropertyCondition}
		public Action getPropertyConditionAction_0() { return cPropertyConditionAction_0; }

		//"WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS" | "EVENTUALLY HOLDS" | "SOMETIMES HOLDS"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"WILL HOLD"
		public Keyword getWILLHOLDKeyword_1_0() { return cWILLHOLDKeyword_1_0; }

		//"NEVER HOLDS"
		public Keyword getNEVERHOLDSKeyword_1_1() { return cNEVERHOLDSKeyword_1_1; }

		//"ALWAYS HOLDS"
		public Keyword getALWAYSHOLDSKeyword_1_2() { return cALWAYSHOLDSKeyword_1_2; }

		//"EVENTUALLY HOLDS"
		public Keyword getEVENTUALLYHOLDSKeyword_1_3() { return cEVENTUALLYHOLDSKeyword_1_3; }

		//"SOMETIMES HOLDS"
		public Keyword getSOMETIMESHOLDSKeyword_1_4() { return cSOMETIMESHOLDSKeyword_1_4; }

		//("WITHIN TIME BOUND" "[" lowerBound=Quantity "," upperBounds=Quantity "]" ("WITH PROBABILITY BOUND"
		//(operator=RelationalOperator probability=REAL | "?"))?)?
		public Group getGroup_2() { return cGroup_2; }

		//"WITHIN TIME BOUND"
		public Keyword getWITHINTIMEBOUNDKeyword_2_0() { return cWITHINTIMEBOUNDKeyword_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }

		//lowerBound=Quantity
		public Assignment getLowerBoundAssignment_2_2() { return cLowerBoundAssignment_2_2; }

		//Quantity
		public RuleCall getLowerBoundQuantityParserRuleCall_2_2_0() { return cLowerBoundQuantityParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//upperBounds=Quantity
		public Assignment getUpperBoundsAssignment_2_4() { return cUpperBoundsAssignment_2_4; }

		//Quantity
		public RuleCall getUpperBoundsQuantityParserRuleCall_2_4_0() { return cUpperBoundsQuantityParserRuleCall_2_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }

		//("WITH PROBABILITY BOUND" (operator=RelationalOperator probability=REAL | "?"))?
		public Group getGroup_2_6() { return cGroup_2_6; }

		//"WITH PROBABILITY BOUND"
		public Keyword getWITHPROBABILITYBOUNDKeyword_2_6_0() { return cWITHPROBABILITYBOUNDKeyword_2_6_0; }

		//operator=RelationalOperator probability=REAL | "?"
		public Alternatives getAlternatives_2_6_1() { return cAlternatives_2_6_1; }

		//operator=RelationalOperator probability=REAL
		public Group getGroup_2_6_1_0() { return cGroup_2_6_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2_6_1_0_0() { return cOperatorAssignment_2_6_1_0_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0() { return cOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0; }

		//probability=REAL
		public Assignment getProbabilityAssignment_2_6_1_0_1() { return cProbabilityAssignment_2_6_1_0_1; }

		//REAL
		public RuleCall getProbabilityREALParserRuleCall_2_6_1_0_1_0() { return cProbabilityREALParserRuleCall_2_6_1_0_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2_6_1_1() { return cQuestionMarkKeyword_2_6_1_1; }

		//("GIVEN" initialConditions+=PropertyInitialCondition ("," initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"GIVEN"
		public Keyword getGIVENKeyword_3_0() { return cGIVENKeyword_3_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_3_1() { return cInitialConditionsAssignment_3_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_3_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_3_1_0; }

		//("," initialConditions+=PropertyInitialCondition)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_3_2_1() { return cInitialConditionsAssignment_3_2_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_3_2_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_3_2_1_0; }
	}

	public class PropertyInitialConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyInitialCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyInitialConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAssignmentObjectParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueQuantityParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PropertyInitialCondition:
		//	{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=Quantity;
		public ParserRule getRule() { return rule; }

		//{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=Quantity
		public Group getGroup() { return cGroup; }

		//{PropertyInitialCondition}
		public Action getPropertyInitialConditionAction_0() { return cPropertyInitialConditionAction_0; }

		//variable=VariableAssignmentObject
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAssignmentObject
		public RuleCall getVariableVariableAssignmentObjectParserRuleCall_1_0() { return cVariableVariableAssignmentObjectParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Quantity
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Quantity
		public RuleCall getValueQuantityParserRuleCall_3_0() { return cValueQuantityParserRuleCall_3_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////
		//// basic types //
		///////////////////
		//// a real number
		//REAL:
		//	Decimal | DecimalExp;
		public ParserRule getRule() { return rule; }

		//Decimal | DecimalExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decimal
		public RuleCall getDecimalParserRuleCall_0() { return cDecimalParserRuleCall_0; }

		//DecimalExp
		public RuleCall getDecimalExpParserRuleCall_1() { return cDecimalExpParserRuleCall_1; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Decimal hidden():
		//	("+" | "-")? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DecimalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cEKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DecimalExp hidden():
		//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//"E" | "e"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"E"
		public Keyword getEKeyword_3_0() { return cEKeyword_3_0; }

		//"e"
		public Keyword getEKeyword_3_1() { return cEKeyword_3_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"+"
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}

	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitsUnitParserRuleCall_2_0 = (RuleCall)cUnitsAssignment_2.eContents().get(0);
		
		//// a quantity with units
		//Quantity:
		//	{Quantity} value=REAL units=Unit;
		public ParserRule getRule() { return rule; }

		//{Quantity} value=REAL units=Unit
		public Group getGroup() { return cGroup; }

		//{Quantity}
		public Action getQuantityAction_0() { return cQuantityAction_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_1_0() { return cValueREALParserRuleCall_1_0; }

		//units=Unit
		public Assignment getUnitsAssignment_2() { return cUnitsAssignment_2; }

		//Unit
		public RuleCall getUnitsUnitParserRuleCall_2_0() { return cUnitsUnitParserRuleCall_2_0; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cS1Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMin1Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMMKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUMKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNMKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPMKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cFMKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMoleculeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMoleculesKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//Unit:
		//	"s" | "min" | "mins" | "s^-1" | "min^-1" | "M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules";
		public ParserRule getRule() { return rule; }

		//"s" | "min" | "mins" | "s^-1" | "min^-1" | "M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"s"
		public Keyword getSKeyword_0() { return cSKeyword_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }

		//"mins"
		public Keyword getMinsKeyword_2() { return cMinsKeyword_2; }

		//"s^-1"
		public Keyword getS1Keyword_3() { return cS1Keyword_3; }

		//"min^-1"
		public Keyword getMin1Keyword_4() { return cMin1Keyword_4; }

		//"M"
		public Keyword getMKeyword_5() { return cMKeyword_5; }

		//"mM"
		public Keyword getMMKeyword_6() { return cMMKeyword_6; }

		//"uM"
		public Keyword getUMKeyword_7() { return cUMKeyword_7; }

		//"nM"
		public Keyword getNMKeyword_8() { return cNMKeyword_8; }

		//"pM"
		public Keyword getPMKeyword_9() { return cPMKeyword_9; }

		//"fM"
		public Keyword getFMKeyword_10() { return cFMKeyword_10; }

		//"molecule"
		public Keyword getMoleculeKeyword_11() { return cMoleculeKeyword_11; }

		//"molecules"
		public Keyword getMoleculesKeyword_12() { return cMoleculesKeyword_12; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// relational operators
		//RelationalOperator:
		//	"==" | "!=" | "<" | ">" | "<=" | ">=";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "<" | ">" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cANDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cORKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cANDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cNOTKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cORKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cNOTKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//// boolean operator
		//BooleanOperator:
		//	"&" | "|" | "AND" | "OR" | "AND" "NOT" | "OR" "NOT";
		public ParserRule getRule() { return rule; }

		//"&" | "|" | "AND" | "OR" | "AND" "NOT" | "OR" "NOT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//"AND"
		public Keyword getANDKeyword_2() { return cANDKeyword_2; }

		//"OR"
		public Keyword getORKeyword_3() { return cORKeyword_3; }

		//"AND" "NOT"
		public Group getGroup_4() { return cGroup_4; }

		//"AND"
		public Keyword getANDKeyword_4_0() { return cANDKeyword_4_0; }

		//"NOT"
		public Keyword getNOTKeyword_4_1() { return cNOTKeyword_4_1; }

		//"OR" "NOT"
		public Group getGroup_5() { return cGroup_5; }

		//"OR"
		public Keyword getORKeyword_5_0() { return cORKeyword_5_0; }

		//"NOT"
		public Keyword getNOTKeyword_5_1() { return cNOTKeyword_5_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// qualified name
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesAtomicVariableExpressionObjectParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0 = (RuleCall)cEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//List:
		//	{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]";
		public ParserRule getRule() { return rule; }

		//{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]"
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//entries+=AtomicVariableExpressionObject
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }

		//AtomicVariableExpressionObject
		public RuleCall getEntriesAtomicVariableExpressionObjectParserRuleCall_2_0() { return cEntriesAtomicVariableExpressionObjectParserRuleCall_2_0; }

		//("," entries+=AtomicVariableExpressionObject)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//entries+=AtomicVariableExpressionObject
		public Assignment getEntriesAssignment_3_1() { return cEntriesAssignment_3_1; }

		//AtomicVariableExpressionObject
		public RuleCall getEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0() { return cEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	
	
	private ModelElements pModel;
	private ModelMemberElements pModelMember;
	private ImportStatementElements pImportStatement;
	private FunctionDefinitionElements pFunctionDefinition;
	private FunctionTypeElements pFunctionType;
	private FunctionParameterMemberElements pFunctionParameterMember;
	private FunctionParameterScopeElements pFunctionParameterScope;
	private FunctionBodyMemberElements pFunctionBodyMember;
	private FunctionUseMemberElements pFunctionUseMember;
	private VariableNameElements pVariableName;
	private VariableComplexElements pVariableComplex;
	private VariableAttributeElements pVariableAttribute;
	private UserDefinedTypeElements pUserDefinedType;
	private VariableDefinitionElements pVariableDefinition;
	private VariableDefinitionBuiltInElements pVariableDefinitionBuiltIn;
	private VariableDefinitionUserDefinedElements pVariableDefinitionUserDefined;
	private VariableDefinitionCollectionElements pVariableDefinitionCollection;
	private VariableDefinitionBasicElements pVariableDefinitionBasic;
	private ParameterAssignmentElements pParameterAssignment;
	private VariableQualifierElements pVariableQualifier;
	private VariableTypeElements pVariableType;
	private CollectionIDElements pCollectionID;
	private VariableAssignmentElements pVariableAssignment;
	private VariableAssignmentObjectElements pVariableAssignmentObject;
	private VariableExpressionElements pVariableExpression;
	private VariableExpressionObjectElements pVariableExpressionObject;
	private AtomicVariableExpressionObjectElements pAtomicVariableExpressionObject;
	private CompoundVariableExpressionObjectElements pCompoundVariableExpressionObject;
	private VariableExpressionOperatorElements pVariableExpressionOperator;
	private RuleDefinitionElements pRuleDefinition;
	private RuleObjectElements pRuleObject;
	private DeviceDefinitionElements pDeviceDefinition;
	private DeviceMembersElements pDeviceMembers;
	private ATGCDefinitionElements pATGCDefinition;
	private ATGCCommandElements pATGCCommand;
	private PropertyDefinitionElements pPropertyDefinition;
	private PropertyElements pProperty;
	private PropertyConditionElements pPropertyCondition;
	private PropertyInitialConditionElements pPropertyInitialCondition;
	private REALElements pREAL;
	private DecimalElements pDecimal;
	private DecimalExpElements pDecimalExp;
	private QuantityElements pQuantity;
	private UnitElements pUnit;
	private RelationalOperatorElements pRelationalOperator;
	private BooleanOperatorElements pBooleanOperator;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private ListElements pList;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IblGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("roadblock.xtext.ibl.Ibl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////////////////
	//// top level rules //
	///////////////////////
	//// a model is composed of top level model members
	//Model:
	//	{Model} members+=ModelMember*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// model members are an import statement, variable definition or function definition
	//ModelMember:
	//	ImportStatement | FunctionDefinition;
	public ModelMemberElements getModelMemberAccess() {
		return (pModelMember != null) ? pModelMember : (pModelMember = new ModelMemberElements());
	}
	
	public ParserRule getModelMemberRule() {
		return getModelMemberAccess().getRule();
	}

	////////////////////////
	//// import statement //
	////////////////////////
	//ImportStatement:
	//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	/////////////////
	//// functions //
	/////////////////
	//// a function definition
	//FunctionDefinition:
	//	{FunctionDefinition} "define" name=VariableName "typeof" type=(FunctionType | VariableName) "("
	//	(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionBodyMember*
	//	"}" ("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//// function types
	//FunctionType:
	//	"PROCESS" | "CELL" | "SYSTEM" | "REGION";
	public FunctionTypeElements getFunctionTypeAccess() {
		return (pFunctionType != null) ? pFunctionType : (pFunctionType = new FunctionTypeElements());
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}

	//// function parameter member
	//FunctionParameterMember:
	//	type=VariableType name=VariableName (":" scope=FunctionParameterScope)?;
	public FunctionParameterMemberElements getFunctionParameterMemberAccess() {
		return (pFunctionParameterMember != null) ? pFunctionParameterMember : (pFunctionParameterMember = new FunctionParameterMemberElements());
	}
	
	public ParserRule getFunctionParameterMemberRule() {
		return getFunctionParameterMemberAccess().getRule();
	}

	//// allowed scope of function parameters
	//FunctionParameterScope:
	//	"required" | "returned" | "optional";
	public FunctionParameterScopeElements getFunctionParameterScopeAccess() {
		return (pFunctionParameterScope != null) ? pFunctionParameterScope : (pFunctionParameterScope = new FunctionParameterScopeElements());
	}
	
	public ParserRule getFunctionParameterScopeRule() {
		return getFunctionParameterScopeAccess().getRule();
	}

	//// function definition body member
	//FunctionBodyMember:
	//	RuleDefinition | DeviceDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition;
	public FunctionBodyMemberElements getFunctionBodyMemberAccess() {
		return (pFunctionBodyMember != null) ? pFunctionBodyMember : (pFunctionBodyMember = new FunctionBodyMemberElements());
	}
	
	public ParserRule getFunctionBodyMemberRule() {
		return getFunctionBodyMemberAccess().getRule();
	}

	//// function use member
	//FunctionUseMember:
	//	type=VariableType name=VariableName;
	public FunctionUseMemberElements getFunctionUseMemberAccess() {
		return (pFunctionUseMember != null) ? pFunctionUseMember : (pFunctionUseMember = new FunctionUseMemberElements());
	}
	
	public ParserRule getFunctionUseMemberRule() {
		return getFunctionUseMemberAccess().getRule();
	}

	/////////////////
	//// variables //
	/////////////////
	//// a variable
	//VariableName:
	//	ID;
	public VariableNameElements getVariableNameAccess() {
		return (pVariableName != null) ? pVariableName : (pVariableName = new VariableNameElements());
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//// a variable complex
	//VariableComplex:
	//	{VariableComplex} components+=VariableName ("~" components+=VariableName)+;
	public VariableComplexElements getVariableComplexAccess() {
		return (pVariableComplex != null) ? pVariableComplex : (pVariableComplex = new VariableComplexElements());
	}
	
	public ParserRule getVariableComplexRule() {
		return getVariableComplexAccess().getRule();
	}

	//// a variable attribute
	//VariableAttribute:
	//	{VariableAttribute} name=VariableName "." attribute=VariableName;
	public VariableAttributeElements getVariableAttributeAccess() {
		return (pVariableAttribute != null) ? pVariableAttribute : (pVariableAttribute = new VariableAttributeElements());
	}
	
	public ParserRule getVariableAttributeRule() {
		return getVariableAttributeAccess().getRule();
	}

	//UserDefinedType:
	//	name=ID;
	public UserDefinedTypeElements getUserDefinedTypeAccess() {
		return (pUserDefinedType != null) ? pUserDefinedType : (pUserDefinedType = new UserDefinedTypeElements());
	}
	
	public ParserRule getUserDefinedTypeRule() {
		return getUserDefinedTypeAccess().getRule();
	}

	//// a definition of a variable
	//VariableDefinition:
	//	{VariableDefinition} qualifier=VariableQualifier? definition=(VariableDefinitionBuiltIn |
	//	VariableDefinitionUserDefined | VariableDefinitionCollection | VariableDefinitionBasic);
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//VariableDefinitionBuiltIn:
	//	{VariableDefinitionBuiltIn} type=VariableType name=VariableName ("=" "new" constructor=(VariableType | VariableName)
	//	"(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public VariableDefinitionBuiltInElements getVariableDefinitionBuiltInAccess() {
		return (pVariableDefinitionBuiltIn != null) ? pVariableDefinitionBuiltIn : (pVariableDefinitionBuiltIn = new VariableDefinitionBuiltInElements());
	}
	
	public ParserRule getVariableDefinitionBuiltInRule() {
		return getVariableDefinitionBuiltInAccess().getRule();
	}

	//VariableDefinitionUserDefined:
	//	{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public VariableDefinitionUserDefinedElements getVariableDefinitionUserDefinedAccess() {
		return (pVariableDefinitionUserDefined != null) ? pVariableDefinitionUserDefined : (pVariableDefinitionUserDefined = new VariableDefinitionUserDefinedElements());
	}
	
	public ParserRule getVariableDefinitionUserDefinedRule() {
		return getVariableDefinitionUserDefinedAccess().getRule();
	}

	//VariableDefinitionCollection:
	//	{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
	//	("=" value=List ")")?;
	public VariableDefinitionCollectionElements getVariableDefinitionCollectionAccess() {
		return (pVariableDefinitionCollection != null) ? pVariableDefinitionCollection : (pVariableDefinitionCollection = new VariableDefinitionCollectionElements());
	}
	
	public ParserRule getVariableDefinitionCollectionRule() {
		return getVariableDefinitionCollectionAccess().getRule();
	}

	//VariableDefinitionBasic:
	//	{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression;
	public VariableDefinitionBasicElements getVariableDefinitionBasicAccess() {
		return (pVariableDefinitionBasic != null) ? pVariableDefinitionBasic : (pVariableDefinitionBasic = new VariableDefinitionBasicElements());
	}
	
	public ParserRule getVariableDefinitionBasicRule() {
		return getVariableDefinitionBasicAccess().getRule();
	}

	//// a parameter assignment
	//ParameterAssignment:
	//	name=VariableName "=" value=VariableExpressionObject;
	public ParameterAssignmentElements getParameterAssignmentAccess() {
		return (pParameterAssignment != null) ? pParameterAssignment : (pParameterAssignment = new ParameterAssignmentElements());
	}
	
	public ParserRule getParameterAssignmentRule() {
		return getParameterAssignmentAccess().getRule();
	}

	//// a variable qualifier
	//VariableQualifier:
	//	"observable";
	public VariableQualifierElements getVariableQualifierAccess() {
		return (pVariableQualifier != null) ? pVariableQualifier : (pVariableQualifier = new VariableQualifierElements());
	}
	
	public ParserRule getVariableQualifierRule() {
		return getVariableQualifierAccess().getRule();
	}

	//// variable types
	//VariableType:
	//	"MOLECULE" | "CELL" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" | "RATE" | "PROCESS" |
	//	"SYSTEM";
	public VariableTypeElements getVariableTypeAccess() {
		return (pVariableType != null) ? pVariableType : (pVariableType = new VariableTypeElements());
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}

	//// variable collections
	//CollectionID:
	//	"LIST" | "SET";
	public CollectionIDElements getCollectionIDAccess() {
		return (pCollectionID != null) ? pCollectionID : (pCollectionID = new CollectionIDElements());
	}
	
	public ParserRule getCollectionIDRule() {
		return getCollectionIDAccess().getRule();
	}

	//// a variable assignment
	//VariableAssignment:
	//	{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//VariableAssignmentObject:
	//	{VariableAssignmentObject} VariableName | VariableAttribute;
	public VariableAssignmentObjectElements getVariableAssignmentObjectAccess() {
		return (pVariableAssignmentObject != null) ? pVariableAssignmentObject : (pVariableAssignmentObject = new VariableAssignmentObjectElements());
	}
	
	public ParserRule getVariableAssignmentObjectRule() {
		return getVariableAssignmentObjectAccess().getRule();
	}

	//VariableExpression:
	//	{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator
	//	members+=VariableExpressionObject)*;
	public VariableExpressionElements getVariableExpressionAccess() {
		return (pVariableExpression != null) ? pVariableExpression : (pVariableExpression = new VariableExpressionElements());
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}

	//VariableExpressionObject:
	//	AtomicVariableExpressionObject | CompoundVariableExpressionObject;
	public VariableExpressionObjectElements getVariableExpressionObjectAccess() {
		return (pVariableExpressionObject != null) ? pVariableExpressionObject : (pVariableExpressionObject = new VariableExpressionObjectElements());
	}
	
	public ParserRule getVariableExpressionObjectRule() {
		return getVariableExpressionObjectAccess().getRule();
	}

	//AtomicVariableExpressionObject:
	//	{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
	//	value=REAL | quantity=Quantity | string=STRING;
	public AtomicVariableExpressionObjectElements getAtomicVariableExpressionObjectAccess() {
		return (pAtomicVariableExpressionObject != null) ? pAtomicVariableExpressionObject : (pAtomicVariableExpressionObject = new AtomicVariableExpressionObjectElements());
	}
	
	public ParserRule getAtomicVariableExpressionObjectRule() {
		return getAtomicVariableExpressionObjectAccess().getRule();
	}

	//CompoundVariableExpressionObject:
	//	{CompoundVariableExpressionObject} list=List;
	public CompoundVariableExpressionObjectElements getCompoundVariableExpressionObjectAccess() {
		return (pCompoundVariableExpressionObject != null) ? pCompoundVariableExpressionObject : (pCompoundVariableExpressionObject = new CompoundVariableExpressionObjectElements());
	}
	
	public ParserRule getCompoundVariableExpressionObjectRule() {
		return getCompoundVariableExpressionObjectAccess().getRule();
	}

	//VariableExpressionOperator:
	//	"+" | "-" | "|";
	public VariableExpressionOperatorElements getVariableExpressionOperatorAccess() {
		return (pVariableExpressionOperator != null) ? pVariableExpressionOperator : (pVariableExpressionOperator = new VariableExpressionOperatorElements());
	}
	
	public ParserRule getVariableExpressionOperatorRule() {
		return getVariableExpressionOperatorAccess().getRule();
	}

	/////////////
	//// rules //
	/////////////
	//// rule definition
	//RuleDefinition:
	//	{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
	//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return (pRuleDefinition != null) ? pRuleDefinition : (pRuleDefinition = new RuleDefinitionElements());
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}

	//// left or right hand side of rule
	//RuleObject:
	//	{RuleObject} VariableName | VariableComplex;
	public RuleObjectElements getRuleObjectAccess() {
		return (pRuleObject != null) ? pRuleObject : (pRuleObject = new RuleObjectElements());
	}
	
	public ParserRule getRuleObjectRule() {
		return getRuleObjectAccess().getRule();
	}

	///////////////
	//// devices //
	///////////////
	//// device definition
	//DeviceDefinition:
	//	{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")" "{" members+=DeviceMembers* "}";
	public DeviceDefinitionElements getDeviceDefinitionAccess() {
		return (pDeviceDefinition != null) ? pDeviceDefinition : (pDeviceDefinition = new DeviceDefinitionElements());
	}
	
	public ParserRule getDeviceDefinitionRule() {
		return getDeviceDefinitionAccess().getRule();
	}

	//DeviceMembers:
	//	VariableDefinition | PropertyDefinition | ATGCDefinition;
	public DeviceMembersElements getDeviceMembersAccess() {
		return (pDeviceMembers != null) ? pDeviceMembers : (pDeviceMembers = new DeviceMembersElements());
	}
	
	public ParserRule getDeviceMembersRule() {
		return getDeviceMembersAccess().getRule();
	}

	//////////////////
	//// atgc rules //
	//////////////////
	//ATGCDefinition:
	//	{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*;
	public ATGCDefinitionElements getATGCDefinitionAccess() {
		return (pATGCDefinition != null) ? pATGCDefinition : (pATGCDefinition = new ATGCDefinitionElements());
	}
	
	public ParserRule getATGCDefinitionRule() {
		return getATGCDefinitionAccess().getRule();
	}

	//ATGCCommand:
	//	"ARRANGE";
	public ATGCCommandElements getATGCCommandAccess() {
		return (pATGCCommand != null) ? pATGCCommand : (pATGCCommand = new ATGCCommandElements());
	}
	
	public ParserRule getATGCCommandRule() {
		return getATGCCommandAccess().getRule();
	}

	///////////////////////////
	//// model checker rules //
	///////////////////////////
	//PropertyDefinition:
	//	{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
	//	condition=PropertyCondition | "EXPECTED" "[" name=VariableName "]" "AT TIME INSTANT" time=Quantity "IS"
	//	(operator=RelationalOperator concentration=Quantity | "?"));
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//Property:
	//	{Property} lhs=VariableName operator=RelationalOperator rhs=Quantity;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyCondition:
	//	{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS" | "EVENTUALLY HOLDS" | "SOMETIMES HOLDS")
	//	("WITHIN TIME BOUND" "[" lowerBound=Quantity "," upperBounds=Quantity "]" ("WITH PROBABILITY BOUND"
	//	(operator=RelationalOperator probability=REAL | "?"))?)? ("GIVEN" initialConditions+=PropertyInitialCondition (","
	//	initialConditions+=PropertyInitialCondition)*)?;
	public PropertyConditionElements getPropertyConditionAccess() {
		return (pPropertyCondition != null) ? pPropertyCondition : (pPropertyCondition = new PropertyConditionElements());
	}
	
	public ParserRule getPropertyConditionRule() {
		return getPropertyConditionAccess().getRule();
	}

	//PropertyInitialCondition:
	//	{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=Quantity;
	public PropertyInitialConditionElements getPropertyInitialConditionAccess() {
		return (pPropertyInitialCondition != null) ? pPropertyInitialCondition : (pPropertyInitialCondition = new PropertyInitialConditionElements());
	}
	
	public ParserRule getPropertyInitialConditionRule() {
		return getPropertyInitialConditionAccess().getRule();
	}

	///////////////////
	//// basic types //
	///////////////////
	//// a real number
	//REAL:
	//	Decimal | DecimalExp;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//Decimal hidden():
	//	("+" | "-")? INT ("." INT)?;
	public DecimalElements getDecimalAccess() {
		return (pDecimal != null) ? pDecimal : (pDecimal = new DecimalElements());
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//DecimalExp hidden():
	//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
	public DecimalExpElements getDecimalExpAccess() {
		return (pDecimalExp != null) ? pDecimalExp : (pDecimalExp = new DecimalExpElements());
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}

	//// a quantity with units
	//Quantity:
	//	{Quantity} value=REAL units=Unit;
	public QuantityElements getQuantityAccess() {
		return (pQuantity != null) ? pQuantity : (pQuantity = new QuantityElements());
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}

	//Unit:
	//	"s" | "min" | "mins" | "s^-1" | "min^-1" | "M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules";
	public UnitElements getUnitAccess() {
		return (pUnit != null) ? pUnit : (pUnit = new UnitElements());
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//// relational operators
	//RelationalOperator:
	//	"==" | "!=" | "<" | ">" | "<=" | ">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// boolean operator
	//BooleanOperator:
	//	"&" | "|" | "AND" | "OR" | "AND" "NOT" | "OR" "NOT";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (pBooleanOperator != null) ? pBooleanOperator : (pBooleanOperator = new BooleanOperatorElements());
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//// qualified name
	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//List:
	//	{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
