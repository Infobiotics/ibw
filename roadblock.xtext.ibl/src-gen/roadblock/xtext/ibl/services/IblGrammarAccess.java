/*
* generated by Xtext
*/
package roadblock.xtext.ibl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IblGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersModelMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		
		///////////////////////
		//// top level rules //
		///////////////////////
		//// a model is composed of top level model members
		//Model:
		//	{Model} members+=ModelMember*;
		public ParserRule getRule() { return rule; }

		//{Model} members+=ModelMember*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//members+=ModelMember*
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ModelMember
		public RuleCall getMembersModelMemberParserRuleCall_1_0() { return cMembersModelMemberParserRuleCall_1_0; }
	}

	public class ModelMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcessDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// model members are an import statement, variable definition or function definition
		//ModelMember: //	Import | VariableDefinition | FunctionDefinition
		//	Import | VariableDefinition | ProcessDefinition;
		public ParserRule getRule() { return rule; }

		////	Import | VariableDefinition | FunctionDefinition
		//Import | VariableDefinition | ProcessDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		////	Import | VariableDefinition | FunctionDefinition
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//ProcessDefinition
		public RuleCall getProcessDefinitionParserRuleCall_2() { return cProcessDefinitionParserRuleCall_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		////////////////////////
		//// import statement //
		////////////////////////
		//Import:
		//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//{Import} "import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersVariableDefinitionMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// a variable definition
		//VariableDefinition:
		//	{VariableDefinition} "define" type=ID? name=ID "{" members+=VariableDefinitionMember* "}";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} "define" type=ID? name=ID "{" members+=VariableDefinitionMember* "}"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=ID?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=VariableDefinitionMember*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//VariableDefinitionMember
		public RuleCall getMembersVariableDefinitionMemberParserRuleCall_5_0() { return cMembersVariableDefinitionMemberParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersFunctionDefinitionMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cUSESKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cUsesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_10_1_0 = (RuleCall)cUsesAssignment_10_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cUsesAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_10_2_1_0 = (RuleCall)cUsesAssignment_10_2_1.eContents().get(0);
		
		//// a function definition
		//FunctionDefinition:
		//	{FunctionDefinition} "define" type=ID? name=ID "(" (parameters+=FunctionParameterMember (","
		//	parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember
		//	("," uses+=FunctionUseMember)*)?;
		public ParserRule getRule() { return rule; }

		//{FunctionDefinition} "define" type=ID? name=ID "(" (parameters+=FunctionParameterMember (","
		//parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember
		//("," uses+=FunctionUseMember)*)?
		public Group getGroup() { return cGroup; }

		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//type=ID?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_5_0_0() { return cParametersFunctionParameterMemberParserRuleCall_5_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_5_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=FunctionDefinitionMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//FunctionDefinitionMember
		public RuleCall getMembersFunctionDefinitionMemberParserRuleCall_8_0() { return cMembersFunctionDefinitionMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?
		public Group getGroup_10() { return cGroup_10; }

		//"USES"
		public Keyword getUSESKeyword_10_0() { return cUSESKeyword_10_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_10_1() { return cUsesAssignment_10_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_10_1_0() { return cUsesFunctionUseMemberParserRuleCall_10_1_0; }

		//("," uses+=FunctionUseMember)*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//","
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_10_2_1() { return cUsesAssignment_10_2_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_10_2_1_0() { return cUsesFunctionUseMemberParserRuleCall_10_2_1_0; }
	}

	public class FunctionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeParameterScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		/////////////////
		//// functions //
		/////////////////
		//// function parameter member
		//FunctionParameterMember:
		//	type=ID name=ID ":" scope=ParameterScope;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID ":" scope=ParameterScope
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//scope=ParameterScope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//ParameterScope
		public RuleCall getScopeParameterScopeParserRuleCall_3_0() { return cScopeParameterScopeParserRuleCall_3_0; }
	}

	public class ParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// allowed scope of function parameters
		//ParameterScope:
		//	"required" | "returned" | "optional";
		public ParserRule getRule() { return rule; }

		//"required" | "returned" | "optional"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//"returned"
		public Keyword getReturnedKeyword_1() { return cReturnedKeyword_1; }

		//"optional"
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
	}

	public class FunctionDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinitionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeviceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cATGCDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPropertyDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// function definition member
		////	RuleDefinition | VariableAssignment | VariableDeclaration | DeviceDefinition | ATGCDefinition
		//FunctionDefinitionMember:
		//	RuleDefinition | DeviceDefinition | VariableAssignment | VariableDeclaration | ATGCDefinition | PropertyDefinition;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | DeviceDefinition | VariableAssignment | VariableDeclaration | ATGCDefinition | PropertyDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_1() { return cDeviceDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_4() { return cATGCDefinitionParserRuleCall_4; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_5() { return cPropertyDefinitionParserRuleCall_5; }
	}

	public class FunctionUseMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionUseMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// function use member
		//FunctionUseMember:
		//	type=ID name=ID;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/////////////////
		//// variables //
		/////////////////
		//// a variable
		//Variable:
		//	{Variable} name=ID;
		public ParserRule getRule() { return rule; }

		//{Variable} name=ID
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VariableComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableComplex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableComplexAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsVariableParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTildeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComponentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComponentsVariableParserRuleCall_2_1_0 = (RuleCall)cComponentsAssignment_2_1.eContents().get(0);
		
		//// a variable complex
		//VariableComplex returns EString:
		//	{VariableComplex} components+=Variable ("~" components+=Variable)+;
		public ParserRule getRule() { return rule; }

		//{VariableComplex} components+=Variable ("~" components+=Variable)+
		public Group getGroup() { return cGroup; }

		//{VariableComplex}
		public Action getVariableComplexAction_0() { return cVariableComplexAction_0; }

		//components+=Variable
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//Variable
		public RuleCall getComponentsVariableParserRuleCall_1_0() { return cComponentsVariableParserRuleCall_1_0; }

		//("~" components+=Variable)+
		public Group getGroup_2() { return cGroup_2; }

		//"~"
		public Keyword getTildeKeyword_2_0() { return cTildeKeyword_2_0; }

		//components+=Variable
		public Assignment getComponentsAssignment_2_1() { return cComponentsAssignment_2_1; }

		//Variable
		public RuleCall getComponentsVariableParserRuleCall_2_1_0() { return cComponentsVariableParserRuleCall_2_1_0; }
	}

	public class VariableDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionMember");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// entries allowed inside variable definition
		//VariableDefinitionMember:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierVariableQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_2_0_0_0 = (RuleCall)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_0_1_0 = (RuleCall)cNameAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cCollectionAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_2_1_0_0 = (RuleCall)cCollectionAssignment_2_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_1_2_0 = (RuleCall)cTypeAssignment_2_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cNameAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_2_1_4_0 = (RuleCall)cNameAssignment_2_1_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstructorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstructorIDTerminalRuleCall_3_1_0 = (RuleCall)cConstructorAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cParametersAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_3_3_0_0 = (RuleCall)cParametersAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_3_1_1 = (Assignment)cGroup_3_3_1.eContents().get(1);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_3_3_1_1_0 = (RuleCall)cParametersAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//// a declaration of a variable
		//VariableDeclaration:
		//	{VariableDeclaration} qualifier=VariableQualifier? (type=ID name=ID | collection=CollectionID "<" type=ID ">" name=ID)
		//	("=" constructor=ID "(" (parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} qualifier=VariableQualifier? (type=ID name=ID | collection=CollectionID "<" type=ID ">" name=ID)
		//("=" constructor=ID "(" (parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }

		//qualifier=VariableQualifier?
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//VariableQualifier
		public RuleCall getQualifierVariableQualifierParserRuleCall_1_0() { return cQualifierVariableQualifierParserRuleCall_1_0; }

		//type=ID name=ID | collection=CollectionID "<" type=ID ">" name=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=ID name=ID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type=ID
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0_0_0() { return cTypeIDTerminalRuleCall_2_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_0_1() { return cNameAssignment_2_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_1_0() { return cNameIDTerminalRuleCall_2_0_1_0; }

		//collection=CollectionID "<" type=ID ">" name=ID
		public Group getGroup_2_1() { return cGroup_2_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_2_1_0() { return cCollectionAssignment_2_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_2_1_0_0() { return cCollectionCollectionIDParserRuleCall_2_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_1_1() { return cLessThanSignKeyword_2_1_1; }

		//type=ID
		public Assignment getTypeAssignment_2_1_2() { return cTypeAssignment_2_1_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_1_2_0() { return cTypeIDTerminalRuleCall_2_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_1_3() { return cGreaterThanSignKeyword_2_1_3; }

		//name=ID
		public Assignment getNameAssignment_2_1_4() { return cNameAssignment_2_1_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_4_0() { return cNameIDTerminalRuleCall_2_1_4_0; }

		//("=" constructor=ID "(" (parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//constructor=ID
		public Assignment getConstructorAssignment_3_1() { return cConstructorAssignment_3_1; }

		//ID
		public RuleCall getConstructorIDTerminalRuleCall_3_1_0() { return cConstructorIDTerminalRuleCall_3_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_3_3_0() { return cParametersAssignment_3_3_0; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_3_3_0_0() { return cParametersVariableAssignmentParserRuleCall_3_3_0_0; }

		//("," parameters+=VariableAssignment)*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//","
		public Keyword getCommaKeyword_3_3_1_0() { return cCommaKeyword_3_3_1_0; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_3_3_1_1() { return cParametersAssignment_3_3_1_1; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_3_3_1_1_0() { return cParametersVariableAssignmentParserRuleCall_3_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class VariableQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableQualifier");
		private final Keyword cObservableKeyword = (Keyword)rule.eContents().get(1);
		
		//VariableQualifier:
		//	"observable";
		public ParserRule getRule() { return rule; }

		//"observable"
		public Keyword getObservableKeyword() { return cObservableKeyword; }
	}

	public class CollectionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CollectionID:
		//	"LIST" | "SET";
		public ParserRule getRule() { return rule; }

		//"LIST" | "SET"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//"SET"
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAttributeParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//VariableAssignment:
		//	{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableAssignment}
		public Action getVariableAssignmentAction_0() { return cVariableAssignmentAction_0; }

		//variable=VariableAttribute
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAttribute
		public RuleCall getVariableVariableAttributeParserRuleCall_1_0() { return cVariableVariableAttributeParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_3_0() { return cExpressionVariableExpressionParserRuleCall_3_0; }
	}

	public class VariableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameREALParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cTildeKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		
		//VariableAttribute:
		//	{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?;
		public ParserRule getRule() { return rule; }

		//{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?
		public Group getGroup() { return cGroup; }

		//{VariableAttribute}
		public Action getVariableAttributeAction_0() { return cVariableAttributeAction_0; }

		//name=(ID | REAL)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | REAL
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//REAL
		public RuleCall getNameREALParserRuleCall_1_0_1() { return cNameREALParserRuleCall_1_0_1; }

		//(("." | "~") attribute=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"." | "~"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//"~"
		public Keyword getTildeKeyword_2_0_1() { return cTildeKeyword_2_0_1; }

		//attribute=ID
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }

		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_1_0() { return cAttributeIDTerminalRuleCall_2_1_0; }
	}

	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersVariableAttributeParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVariableExpressionOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersVariableAttributeParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		
		//VariableExpression:
		//	{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*;
		public ParserRule getRule() { return rule; }

		//{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*
		public Group getGroup() { return cGroup; }

		//{VariableExpression}
		public Action getVariableExpressionAction_0() { return cVariableExpressionAction_0; }

		//members+=VariableAttribute
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//VariableAttribute
		public RuleCall getMembersVariableAttributeParserRuleCall_1_0() { return cMembersVariableAttributeParserRuleCall_1_0; }

		//(VariableExpressionOperator members+=VariableAttribute)*
		public Group getGroup_2() { return cGroup_2; }

		//VariableExpressionOperator
		public RuleCall getVariableExpressionOperatorParserRuleCall_2_0() { return cVariableExpressionOperatorParserRuleCall_2_0; }

		//members+=VariableAttribute
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//VariableAttribute
		public RuleCall getMembersVariableAttributeParserRuleCall_2_1_0() { return cMembersVariableAttributeParserRuleCall_2_1_0; }
	}

	public class VariableExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableExpressionOperator:
		//	"+" | "-" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLhsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_0_0 = (RuleCall)cLhsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_1_1_0 = (RuleCall)cLhsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cReversibleAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cReversibleAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_0_0 = (RuleCall)cRhsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPlusSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRhsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_1_1_0 = (RuleCall)cRhsAssignment_6_1_1.eContents().get(0);
		
		/////////////
		//// rules //
		/////////////
		//// rule definition
		//RuleDefinition:
		//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
		public ParserRule getRule() { return rule; }

		//{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup() { return cGroup; }

		//{RuleDefinition}
		public Action getRuleDefinitionAction_0() { return cRuleDefinitionAction_0; }

		//"RULE"
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(lhs+=RuleObject ("+" lhs+=RuleObject)*)?
		public Group getGroup_4() { return cGroup_4; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_0() { return cLhsAssignment_4_0; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_0_0() { return cLhsRuleObjectParserRuleCall_4_0_0; }

		//("+" lhs+=RuleObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_1_1() { return cLhsAssignment_4_1_1; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_1_1_0() { return cLhsRuleObjectParserRuleCall_4_1_1_0; }

		//"->" | reversible?="<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//reversible?="<->"
		public Assignment getReversibleAssignment_5_1() { return cReversibleAssignment_5_1; }

		//"<->"
		public Keyword getReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0() { return cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0; }

		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup_6() { return cGroup_6; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_0() { return cRhsAssignment_6_0; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_0_0() { return cRhsRuleObjectParserRuleCall_6_0_0; }

		//("+" rhs+=RuleObject)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"+"
		public Keyword getPlusSignKeyword_6_1_0() { return cPlusSignKeyword_6_1_0; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_1_1() { return cRhsAssignment_6_1_1; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_1_1_0() { return cRhsRuleObjectParserRuleCall_6_1_1_0; }
	}

	public class RuleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableComplexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// left or right hand side of rule
		//RuleObject returns EString:
		//	Variable | VariableComplex;
		public ParserRule getRule() { return rule; }

		//Variable | VariableComplex
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//VariableComplex
		public RuleCall getVariableComplexParserRuleCall_1() { return cVariableComplexParserRuleCall_1; }
	}

	public class ProcessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPROCESSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersProcessParameterMemberParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersProcessParameterMemberParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersProcessDefinitionMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cUSESKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cUsesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cUsesProcessUseMemberParserRuleCall_10_1_0 = (RuleCall)cUsesAssignment_10_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cUsesAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final RuleCall cUsesProcessUseMemberParserRuleCall_10_2_1_0 = (RuleCall)cUsesAssignment_10_2_1.eContents().get(0);
		
		/////////////////
		//// processes //
		/////////////////
		//// processes are collections of rules
		//// a process definition
		//ProcessDefinition:
		//	{ProcessDefinition} "define" "PROCESS" name=ID "(" // process parameters
		//	(parameters+=ProcessParameterMember ("," parameters+=ProcessParameterMember)*)? ")" "{" // process rules
		//	members+=ProcessDefinitionMember* "}" ("USES" // process 
		//	uses+=ProcessUseMember ("," uses+=ProcessUseMember)*)?;
		public ParserRule getRule() { return rule; }

		//{ProcessDefinition} "define" "PROCESS" name=ID "(" // process parameters
		//(parameters+=ProcessParameterMember ("," parameters+=ProcessParameterMember)*)? ")" "{" // process rules
		//members+=ProcessDefinitionMember* "}" ("USES" // process 
		//uses+=ProcessUseMember ("," uses+=ProcessUseMember)*)?
		public Group getGroup() { return cGroup; }

		//{ProcessDefinition}
		public Action getProcessDefinitionAction_0() { return cProcessDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_2() { return cPROCESSKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=ProcessParameterMember ("," parameters+=ProcessParameterMember)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=ProcessParameterMember
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//ProcessParameterMember
		public RuleCall getParametersProcessParameterMemberParserRuleCall_5_0_0() { return cParametersProcessParameterMemberParserRuleCall_5_0_0; }

		//("," parameters+=ProcessParameterMember)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=ProcessParameterMember
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//ProcessParameterMember
		public RuleCall getParametersProcessParameterMemberParserRuleCall_5_1_1_0() { return cParametersProcessParameterMemberParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//// process rules
		//members+=ProcessDefinitionMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//ProcessDefinitionMember
		public RuleCall getMembersProcessDefinitionMemberParserRuleCall_8_0() { return cMembersProcessDefinitionMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//("USES" // process 
		//uses+=ProcessUseMember ("," uses+=ProcessUseMember)*)?
		public Group getGroup_10() { return cGroup_10; }

		//"USES"
		public Keyword getUSESKeyword_10_0() { return cUSESKeyword_10_0; }

		//// process 
		//uses+=ProcessUseMember
		public Assignment getUsesAssignment_10_1() { return cUsesAssignment_10_1; }

		//ProcessUseMember
		public RuleCall getUsesProcessUseMemberParserRuleCall_10_1_0() { return cUsesProcessUseMemberParserRuleCall_10_1_0; }

		//("," uses+=ProcessUseMember)*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//","
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }

		//uses+=ProcessUseMember
		public Assignment getUsesAssignment_10_2_1() { return cUsesAssignment_10_2_1; }

		//ProcessUseMember
		public RuleCall getUsesProcessUseMemberParserRuleCall_10_2_1_0() { return cUsesProcessUseMemberParserRuleCall_10_2_1_0; }
	}

	public class ProcessParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessParameterMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScopeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScopeProcessParameterScopeParserRuleCall_4_0 = (RuleCall)cScopeAssignment_4.eContents().get(0);
		
		//// process parameter member
		//ProcessParameterMember:
		//	{ProcessParameterMember} type=ID name=ID ":" scope=ProcessParameterScope;
		public ParserRule getRule() { return rule; }

		//{ProcessParameterMember} type=ID name=ID ":" scope=ProcessParameterScope
		public Group getGroup() { return cGroup; }

		//{ProcessParameterMember}
		public Action getProcessParameterMemberAction_0() { return cProcessParameterMemberAction_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//scope=ProcessParameterScope
		public Assignment getScopeAssignment_4() { return cScopeAssignment_4; }

		//ProcessParameterScope
		public RuleCall getScopeProcessParameterScopeParserRuleCall_4_0() { return cScopeProcessParameterScopeParserRuleCall_4_0; }
	}

	public class ProcessParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// allowed scope of process parameters
		//ProcessParameterScope:
		//	"required" | "returned" | "optional";
		public ParserRule getRule() { return rule; }

		//"required" | "returned" | "optional"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//"returned"
		public Keyword getReturnedKeyword_1() { return cReturnedKeyword_1; }

		//"optional"
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
	}

	public class ProcessDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessDefinitionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// process definition member
		//ProcessDefinitionMember:
		//	RuleDefinition | VariableAssignment;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_1() { return cVariableAssignmentParserRuleCall_1; }
	}

	public class ProcessUseMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessUseMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessUseMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// process use member
		//ProcessUseMember:
		//	{ProcessUseMember} type=ID name=ID;
		public ParserRule getRule() { return rule; }

		//{ProcessUseMember} type=ID name=ID
		public Group getGroup() { return cGroup; }

		//{ProcessUseMember}
		public Action getProcessUseMemberAction_0() { return cProcessUseMemberAction_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ProcessCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPROCESSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstructorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstructorIDTerminalRuleCall_4_0 = (RuleCall)cConstructorAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// a process call
		//ProcessCall:
		//	{ProcessCall} "PROCESS" name=ID "=" constructor=ID "(" (parameters+=VariableAssignment (","
		//	parameters+=VariableAssignment)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ProcessCall} "PROCESS" name=ID "=" constructor=ID "(" (parameters+=VariableAssignment (","
		//parameters+=VariableAssignment)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ProcessCall}
		public Action getProcessCallAction_0() { return cProcessCallAction_0; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_1() { return cPROCESSKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//constructor=ID
		public Assignment getConstructorAssignment_4() { return cConstructorAssignment_4; }

		//ID
		public RuleCall getConstructorIDTerminalRuleCall_4_0() { return cConstructorIDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_6_0_0() { return cParametersVariableAssignmentParserRuleCall_6_0_0; }

		//("," parameters+=VariableAssignment)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_6_1_1_0() { return cParametersVariableAssignmentParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class DeviceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDEVICEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDEVICEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPartsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPartsIDTerminalRuleCall_6_0_0 = (RuleCall)cPartsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cPartsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cPartsIDTerminalRuleCall_6_1_1_0 = (RuleCall)cPartsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cParametersAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_9_0_0 = (RuleCall)cParametersAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cParametersAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cParametersVariableAssignmentParserRuleCall_9_1_1_0 = (RuleCall)cParametersAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMembersAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMembersDeviceMembersParserRuleCall_12_0 = (RuleCall)cMembersAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		///////////////
		//// devices //
		///////////////
		//// device definition
		//DeviceDefinition:
		//	{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
		//	(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" members+=DeviceMembers* "}";
		public ParserRule getRule() { return rule; }

		//{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" members+=DeviceMembers* "}"
		public Group getGroup() { return cGroup; }

		//{DeviceDefinition}
		public Action getDeviceDefinitionAction_0() { return cDeviceDefinitionAction_0; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_1() { return cDEVICEKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_4() { return cDEVICEKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//parts+=ID ("," parts+=ID)*
		public Group getGroup_6() { return cGroup_6; }

		//parts+=ID
		public Assignment getPartsAssignment_6_0() { return cPartsAssignment_6_0; }

		//ID
		public RuleCall getPartsIDTerminalRuleCall_6_0_0() { return cPartsIDTerminalRuleCall_6_0_0; }

		//("," parts+=ID)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parts+=ID
		public Assignment getPartsAssignment_6_1_1() { return cPartsAssignment_6_1_1; }

		//ID
		public RuleCall getPartsIDTerminalRuleCall_6_1_1_0() { return cPartsIDTerminalRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }

		//(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)?
		public Group getGroup_9() { return cGroup_9; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_9_0() { return cParametersAssignment_9_0; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_9_0_0() { return cParametersVariableAssignmentParserRuleCall_9_0_0; }

		//("," parameters+=VariableAssignment)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//parameters+=VariableAssignment
		public Assignment getParametersAssignment_9_1_1() { return cParametersAssignment_9_1_1; }

		//VariableAssignment
		public RuleCall getParametersVariableAssignmentParserRuleCall_9_1_1_0() { return cParametersVariableAssignmentParserRuleCall_9_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//members+=DeviceMembers*
		public Assignment getMembersAssignment_12() { return cMembersAssignment_12; }

		//DeviceMembers
		public RuleCall getMembersDeviceMembersParserRuleCall_12_0() { return cMembersDeviceMembersParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class DeviceMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceMembers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeviceMembers:
		//	ProcessCall | PropertyDefinition;
		public ParserRule getRule() { return rule; }

		//ProcessCall | PropertyDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcessCall
		public RuleCall getProcessCallParserRuleCall_0() { return cProcessCallParserRuleCall_0; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_1() { return cPropertyDefinitionParserRuleCall_1; }
	}

	public class ATGCDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATGCDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cATGCDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cATGCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandIDTerminalRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsIDTerminalRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		
		//////////////////
		//// atgc rules //
		//////////////////
		//ATGCDefinition:
		//	{ATGCDefinition} "ATGC" command=ID ":" arguments+=ID ("," arguments+=ID)*;
		public ParserRule getRule() { return rule; }

		//{ATGCDefinition} "ATGC" command=ID ":" arguments+=ID ("," arguments+=ID)*
		public Group getGroup() { return cGroup; }

		//{ATGCDefinition}
		public Action getATGCDefinitionAction_0() { return cATGCDefinitionAction_0; }

		//"ATGC"
		public Keyword getATGCKeyword_1() { return cATGCKeyword_1; }

		//command=ID
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }

		//ID
		public RuleCall getCommandIDTerminalRuleCall_2_0() { return cCommandIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//arguments+=ID
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_4_0() { return cArgumentsIDTerminalRuleCall_4_0; }

		//("," arguments+=ID)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//arguments+=ID
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }

		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_5_1_0() { return cArgumentsIDTerminalRuleCall_5_1_0; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVERIFYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPropertyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_0_1_0 = (RuleCall)cPropertyAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final RuleCall cBooleanOperatorParserRuleCall_2_0_2_0 = (RuleCall)cGroup_2_0_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_0_2_1_0 = (RuleCall)cPropertyAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cConditionAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cConditionPropertyConditionParserRuleCall_2_0_4_0 = (RuleCall)cConditionAssignment_2_0_4.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEXPECTEDKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_1_2_0 = (RuleCall)cNameAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cATTIMEINSTANTKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cTimeAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cTimeREALParserRuleCall_2_1_5_0 = (RuleCall)cTimeAssignment_2_1_5.eContents().get(0);
		private final Keyword cISKeyword_2_1_6 = (Keyword)cGroup_2_1.eContents().get(6);
		private final Alternatives cAlternatives_2_1_7 = (Alternatives)cGroup_2_1.eContents().get(7);
		private final Group cGroup_2_1_7_0 = (Group)cAlternatives_2_1_7.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1_7_0_0 = (Assignment)cGroup_2_1_7_0.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0 = (RuleCall)cOperatorAssignment_2_1_7_0_0.eContents().get(0);
		private final Assignment cConcentrationAssignment_2_1_7_0_1 = (Assignment)cGroup_2_1_7_0.eContents().get(1);
		private final RuleCall cConcentrationQuantityParserRuleCall_2_1_7_0_1_0 = (RuleCall)cConcentrationAssignment_2_1_7_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_1_7_1 = (Keyword)cAlternatives_2_1_7.eContents().get(1);
		
		///////////////////////////
		//// model checker rules //
		///////////////////////////
		//PropertyDefinition:
		//	{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
		//	condition=PropertyCondition | "EXPECTED" "[" name=ID "]" "AT TIME INSTANT" time=REAL "IS" (operator=RelationalOperator
		//	concentration=Quantity | "?"));
		public ParserRule getRule() { return rule; }

		//{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
		//condition=PropertyCondition | "EXPECTED" "[" name=ID "]" "AT TIME INSTANT" time=REAL "IS" (operator=RelationalOperator
		//concentration=Quantity | "?"))
		public Group getGroup() { return cGroup; }

		//{PropertyDefinition}
		public Action getPropertyDefinitionAction_0() { return cPropertyDefinitionAction_0; }

		//"VERIFY"
		public Keyword getVERIFYKeyword_1() { return cVERIFYKeyword_1; }

		//"[" property+=Property (BooleanOperator property+=Property)* "]" condition=PropertyCondition | "EXPECTED" "[" name=ID
		//"]" "AT TIME INSTANT" time=REAL "IS" (operator=RelationalOperator concentration=Quantity | "?")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"[" property+=Property (BooleanOperator property+=Property)* "]" condition=PropertyCondition
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_0_1() { return cPropertyAssignment_2_0_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_0_1_0() { return cPropertyPropertyParserRuleCall_2_0_1_0; }

		//(BooleanOperator property+=Property)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//BooleanOperator
		public RuleCall getBooleanOperatorParserRuleCall_2_0_2_0() { return cBooleanOperatorParserRuleCall_2_0_2_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_0_2_1() { return cPropertyAssignment_2_0_2_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_0_2_1_0() { return cPropertyPropertyParserRuleCall_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_3() { return cRightSquareBracketKeyword_2_0_3; }

		//condition=PropertyCondition
		public Assignment getConditionAssignment_2_0_4() { return cConditionAssignment_2_0_4; }

		//PropertyCondition
		public RuleCall getConditionPropertyConditionParserRuleCall_2_0_4_0() { return cConditionPropertyConditionParserRuleCall_2_0_4_0; }

		//"EXPECTED" "[" name=ID "]" "AT TIME INSTANT" time=REAL "IS" (operator=RelationalOperator concentration=Quantity | "?")
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"EXPECTED"
		public Keyword getEXPECTEDKeyword_2_1_0() { return cEXPECTEDKeyword_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_1() { return cLeftSquareBracketKeyword_2_1_1; }

		//name=ID
		public Assignment getNameAssignment_2_1_2() { return cNameAssignment_2_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_2_0() { return cNameIDTerminalRuleCall_2_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//"AT TIME INSTANT"
		public Keyword getATTIMEINSTANTKeyword_2_1_4() { return cATTIMEINSTANTKeyword_2_1_4; }

		//time=REAL
		public Assignment getTimeAssignment_2_1_5() { return cTimeAssignment_2_1_5; }

		//REAL
		public RuleCall getTimeREALParserRuleCall_2_1_5_0() { return cTimeREALParserRuleCall_2_1_5_0; }

		//"IS"
		public Keyword getISKeyword_2_1_6() { return cISKeyword_2_1_6; }

		//operator=RelationalOperator concentration=Quantity | "?"
		public Alternatives getAlternatives_2_1_7() { return cAlternatives_2_1_7; }

		//operator=RelationalOperator concentration=Quantity
		public Group getGroup_2_1_7_0() { return cGroup_2_1_7_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2_1_7_0_0() { return cOperatorAssignment_2_1_7_0_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0() { return cOperatorRelationalOperatorParserRuleCall_2_1_7_0_0_0; }

		//concentration=Quantity
		public Assignment getConcentrationAssignment_2_1_7_0_1() { return cConcentrationAssignment_2_1_7_0_1; }

		//Quantity
		public RuleCall getConcentrationQuantityParserRuleCall_2_1_7_0_1_0() { return cConcentrationQuantityParserRuleCall_2_1_7_0_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2_1_7_1() { return cQuestionMarkKeyword_2_1_7_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsIDTerminalRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsQuantityParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//Property:
		//	{Property} lhs=ID operator=RelationalOperator rhs=Quantity;
		public ParserRule getRule() { return rule; }

		//{Property} lhs=ID operator=RelationalOperator rhs=Quantity
		public Group getGroup() { return cGroup; }

		//{Property}
		public Action getPropertyAction_0() { return cPropertyAction_0; }

		//lhs=ID
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0() { return cLhsIDTerminalRuleCall_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_0() { return cOperatorRelationalOperatorParserRuleCall_2_0; }

		//rhs=Quantity
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Quantity
		public RuleCall getRhsQuantityParserRuleCall_3_0() { return cRhsQuantityParserRuleCall_3_0; }
	}

	public class PropertyConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cWILLHOLDKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNEVERHOLDSKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cALWAYSHOLDSKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWITHINTIMEBOUNDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLowerBoundAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLowerBoundREALParserRuleCall_2_2_0 = (RuleCall)cLowerBoundAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cUpperBoundsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cUpperBoundsREALParserRuleCall_2_4_0 = (RuleCall)cUpperBoundsAssignment_2_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cWITHPROBABILITYBOUNDKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Alternatives cAlternatives_2_6_1 = (Alternatives)cGroup_2_6.eContents().get(1);
		private final Group cGroup_2_6_1_0 = (Group)cAlternatives_2_6_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2_6_1_0_0 = (Assignment)cGroup_2_6_1_0.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0 = (RuleCall)cOperatorAssignment_2_6_1_0_0.eContents().get(0);
		private final Assignment cProbabilityAssignment_2_6_1_0_1 = (Assignment)cGroup_2_6_1_0.eContents().get(1);
		private final RuleCall cProbabilityREALParserRuleCall_2_6_1_0_1_0 = (RuleCall)cProbabilityAssignment_2_6_1_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_6_1_1 = (Keyword)cAlternatives_2_6_1.eContents().get(1);
		
		//PropertyCondition:
		//	{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS") ("WITHIN TIME BOUND" "[" lowerBound=REAL ","
		//	upperBounds=REAL "]" ("WITH PROBABILITY BOUND" (operator=RelationalOperator probability=REAL | "?"))?)?;
		public ParserRule getRule() { return rule; }

		//{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS") ("WITHIN TIME BOUND" "[" lowerBound=REAL ","
		//upperBounds=REAL "]" ("WITH PROBABILITY BOUND" (operator=RelationalOperator probability=REAL | "?"))?)?
		public Group getGroup() { return cGroup; }

		//{PropertyCondition}
		public Action getPropertyConditionAction_0() { return cPropertyConditionAction_0; }

		//"WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"WILL HOLD"
		public Keyword getWILLHOLDKeyword_1_0() { return cWILLHOLDKeyword_1_0; }

		//"NEVER HOLDS"
		public Keyword getNEVERHOLDSKeyword_1_1() { return cNEVERHOLDSKeyword_1_1; }

		//"ALWAYS HOLDS"
		public Keyword getALWAYSHOLDSKeyword_1_2() { return cALWAYSHOLDSKeyword_1_2; }

		//("WITHIN TIME BOUND" "[" lowerBound=REAL "," upperBounds=REAL "]" ("WITH PROBABILITY BOUND" (operator=RelationalOperator
		//probability=REAL | "?"))?)?
		public Group getGroup_2() { return cGroup_2; }

		//"WITHIN TIME BOUND"
		public Keyword getWITHINTIMEBOUNDKeyword_2_0() { return cWITHINTIMEBOUNDKeyword_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }

		//lowerBound=REAL
		public Assignment getLowerBoundAssignment_2_2() { return cLowerBoundAssignment_2_2; }

		//REAL
		public RuleCall getLowerBoundREALParserRuleCall_2_2_0() { return cLowerBoundREALParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//upperBounds=REAL
		public Assignment getUpperBoundsAssignment_2_4() { return cUpperBoundsAssignment_2_4; }

		//REAL
		public RuleCall getUpperBoundsREALParserRuleCall_2_4_0() { return cUpperBoundsREALParserRuleCall_2_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }

		//("WITH PROBABILITY BOUND" (operator=RelationalOperator probability=REAL | "?"))?
		public Group getGroup_2_6() { return cGroup_2_6; }

		//"WITH PROBABILITY BOUND"
		public Keyword getWITHPROBABILITYBOUNDKeyword_2_6_0() { return cWITHPROBABILITYBOUNDKeyword_2_6_0; }

		//operator=RelationalOperator probability=REAL | "?"
		public Alternatives getAlternatives_2_6_1() { return cAlternatives_2_6_1; }

		//operator=RelationalOperator probability=REAL
		public Group getGroup_2_6_1_0() { return cGroup_2_6_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2_6_1_0_0() { return cOperatorAssignment_2_6_1_0_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0() { return cOperatorRelationalOperatorParserRuleCall_2_6_1_0_0_0; }

		//probability=REAL
		public Assignment getProbabilityAssignment_2_6_1_0_1() { return cProbabilityAssignment_2_6_1_0_1; }

		//REAL
		public RuleCall getProbabilityREALParserRuleCall_2_6_1_0_1_0() { return cProbabilityREALParserRuleCall_2_6_1_0_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2_6_1_1() { return cQuestionMarkKeyword_2_6_1_1; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////
		//// basic types //
		///////////////////
		//// a real number
		//REAL:
		//	Decimal | DecimalExp;
		public ParserRule getRule() { return rule; }

		//Decimal | DecimalExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decimal
		public RuleCall getDecimalParserRuleCall_0() { return cDecimalParserRuleCall_0; }

		//DecimalExp
		public RuleCall getDecimalExpParserRuleCall_1() { return cDecimalExpParserRuleCall_1; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Decimal hidden():
		//	("+" | "-")? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DecimalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cEKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DecimalExp hidden():
		//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//"E" | "e"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"E"
		public Keyword getEKeyword_3_0() { return cEKeyword_3_0; }

		//"e"
		public Keyword getEKeyword_3_1() { return cEKeyword_3_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"+"
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}

	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitsIDTerminalRuleCall_2_0 = (RuleCall)cUnitsAssignment_2.eContents().get(0);
		
		//// a quantity with units
		//Quantity:
		//	{Quantity} value=REAL units=ID;
		public ParserRule getRule() { return rule; }

		//{Quantity} value=REAL units=ID
		public Group getGroup() { return cGroup; }

		//{Quantity}
		public Action getQuantityAction_0() { return cQuantityAction_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_1_0() { return cValueREALParserRuleCall_1_0; }

		//units=ID
		public Assignment getUnitsAssignment_2() { return cUnitsAssignment_2; }

		//ID
		public RuleCall getUnitsIDTerminalRuleCall_2_0() { return cUnitsIDTerminalRuleCall_2_0; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// relational operators
		//RelationalOperator:
		//	"==" | "!=" | "<" | ">" | "<=" | ">=";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "<" | ">" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// boolean operator
		//BooleanOperator:
		//	"&" | "|";
		public ParserRule getRule() { return rule; }

		//"&" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// qualified name
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private ModelMemberElements pModelMember;
	private ImportElements pImport;
	private VariableDefinitionElements pVariableDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private FunctionParameterMemberElements pFunctionParameterMember;
	private ParameterScopeElements pParameterScope;
	private FunctionDefinitionMemberElements pFunctionDefinitionMember;
	private FunctionUseMemberElements pFunctionUseMember;
	private VariableElements pVariable;
	private VariableComplexElements pVariableComplex;
	private VariableDefinitionMemberElements pVariableDefinitionMember;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableQualifierElements pVariableQualifier;
	private CollectionIDElements pCollectionID;
	private VariableAssignmentElements pVariableAssignment;
	private VariableAttributeElements pVariableAttribute;
	private VariableExpressionElements pVariableExpression;
	private VariableExpressionOperatorElements pVariableExpressionOperator;
	private RuleDefinitionElements pRuleDefinition;
	private RuleObjectElements pRuleObject;
	private ProcessDefinitionElements pProcessDefinition;
	private ProcessParameterMemberElements pProcessParameterMember;
	private ProcessParameterScopeElements pProcessParameterScope;
	private ProcessDefinitionMemberElements pProcessDefinitionMember;
	private ProcessUseMemberElements pProcessUseMember;
	private ProcessCallElements pProcessCall;
	private DeviceDefinitionElements pDeviceDefinition;
	private DeviceMembersElements pDeviceMembers;
	private ATGCDefinitionElements pATGCDefinition;
	private PropertyDefinitionElements pPropertyDefinition;
	private PropertyElements pProperty;
	private PropertyConditionElements pPropertyCondition;
	private REALElements pREAL;
	private DecimalElements pDecimal;
	private DecimalExpElements pDecimalExp;
	private QuantityElements pQuantity;
	private RelationalOperatorElements pRelationalOperator;
	private BooleanOperatorElements pBooleanOperator;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IblGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("roadblock.xtext.ibl.Ibl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////////////////
	//// top level rules //
	///////////////////////
	//// a model is composed of top level model members
	//Model:
	//	{Model} members+=ModelMember*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// model members are an import statement, variable definition or function definition
	//ModelMember: //	Import | VariableDefinition | FunctionDefinition
	//	Import | VariableDefinition | ProcessDefinition;
	public ModelMemberElements getModelMemberAccess() {
		return (pModelMember != null) ? pModelMember : (pModelMember = new ModelMemberElements());
	}
	
	public ParserRule getModelMemberRule() {
		return getModelMemberAccess().getRule();
	}

	////////////////////////
	//// import statement //
	////////////////////////
	//Import:
	//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// a variable definition
	//VariableDefinition:
	//	{VariableDefinition} "define" type=ID? name=ID "{" members+=VariableDefinitionMember* "}";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//// a function definition
	//FunctionDefinition:
	//	{FunctionDefinition} "define" type=ID? name=ID "(" (parameters+=FunctionParameterMember (","
	//	parameters+=FunctionParameterMember)*)? ")" "{" members+=FunctionDefinitionMember* "}" ("USES" uses+=FunctionUseMember
	//	("," uses+=FunctionUseMember)*)?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	/////////////////
	//// functions //
	/////////////////
	//// function parameter member
	//FunctionParameterMember:
	//	type=ID name=ID ":" scope=ParameterScope;
	public FunctionParameterMemberElements getFunctionParameterMemberAccess() {
		return (pFunctionParameterMember != null) ? pFunctionParameterMember : (pFunctionParameterMember = new FunctionParameterMemberElements());
	}
	
	public ParserRule getFunctionParameterMemberRule() {
		return getFunctionParameterMemberAccess().getRule();
	}

	//// allowed scope of function parameters
	//ParameterScope:
	//	"required" | "returned" | "optional";
	public ParameterScopeElements getParameterScopeAccess() {
		return (pParameterScope != null) ? pParameterScope : (pParameterScope = new ParameterScopeElements());
	}
	
	public ParserRule getParameterScopeRule() {
		return getParameterScopeAccess().getRule();
	}

	//// function definition member
	////	RuleDefinition | VariableAssignment | VariableDeclaration | DeviceDefinition | ATGCDefinition
	//FunctionDefinitionMember:
	//	RuleDefinition | DeviceDefinition | VariableAssignment | VariableDeclaration | ATGCDefinition | PropertyDefinition;
	public FunctionDefinitionMemberElements getFunctionDefinitionMemberAccess() {
		return (pFunctionDefinitionMember != null) ? pFunctionDefinitionMember : (pFunctionDefinitionMember = new FunctionDefinitionMemberElements());
	}
	
	public ParserRule getFunctionDefinitionMemberRule() {
		return getFunctionDefinitionMemberAccess().getRule();
	}

	//// function use member
	//FunctionUseMember:
	//	type=ID name=ID;
	public FunctionUseMemberElements getFunctionUseMemberAccess() {
		return (pFunctionUseMember != null) ? pFunctionUseMember : (pFunctionUseMember = new FunctionUseMemberElements());
	}
	
	public ParserRule getFunctionUseMemberRule() {
		return getFunctionUseMemberAccess().getRule();
	}

	/////////////////
	//// variables //
	/////////////////
	//// a variable
	//Variable:
	//	{Variable} name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//// a variable complex
	//VariableComplex returns EString:
	//	{VariableComplex} components+=Variable ("~" components+=Variable)+;
	public VariableComplexElements getVariableComplexAccess() {
		return (pVariableComplex != null) ? pVariableComplex : (pVariableComplex = new VariableComplexElements());
	}
	
	public ParserRule getVariableComplexRule() {
		return getVariableComplexAccess().getRule();
	}

	//// entries allowed inside variable definition
	//VariableDefinitionMember:
	//	VariableDeclaration;
	public VariableDefinitionMemberElements getVariableDefinitionMemberAccess() {
		return (pVariableDefinitionMember != null) ? pVariableDefinitionMember : (pVariableDefinitionMember = new VariableDefinitionMemberElements());
	}
	
	public ParserRule getVariableDefinitionMemberRule() {
		return getVariableDefinitionMemberAccess().getRule();
	}

	//// a declaration of a variable
	//VariableDeclaration:
	//	{VariableDeclaration} qualifier=VariableQualifier? (type=ID name=ID | collection=CollectionID "<" type=ID ">" name=ID)
	//	("=" constructor=ID "(" (parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")")?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableQualifier:
	//	"observable";
	public VariableQualifierElements getVariableQualifierAccess() {
		return (pVariableQualifier != null) ? pVariableQualifier : (pVariableQualifier = new VariableQualifierElements());
	}
	
	public ParserRule getVariableQualifierRule() {
		return getVariableQualifierAccess().getRule();
	}

	//CollectionID:
	//	"LIST" | "SET";
	public CollectionIDElements getCollectionIDAccess() {
		return (pCollectionID != null) ? pCollectionID : (pCollectionID = new CollectionIDElements());
	}
	
	public ParserRule getCollectionIDRule() {
		return getCollectionIDAccess().getRule();
	}

	//VariableAssignment:
	//	{VariableAssignment} variable=VariableAttribute "=" expression=VariableExpression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//VariableAttribute:
	//	{VariableAttribute} name=(ID | REAL) (("." | "~") attribute=ID)?;
	public VariableAttributeElements getVariableAttributeAccess() {
		return (pVariableAttribute != null) ? pVariableAttribute : (pVariableAttribute = new VariableAttributeElements());
	}
	
	public ParserRule getVariableAttributeRule() {
		return getVariableAttributeAccess().getRule();
	}

	//VariableExpression:
	//	{VariableExpression} members+=VariableAttribute (VariableExpressionOperator members+=VariableAttribute)*;
	public VariableExpressionElements getVariableExpressionAccess() {
		return (pVariableExpression != null) ? pVariableExpression : (pVariableExpression = new VariableExpressionElements());
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}

	//VariableExpressionOperator:
	//	"+" | "-" | "|";
	public VariableExpressionOperatorElements getVariableExpressionOperatorAccess() {
		return (pVariableExpressionOperator != null) ? pVariableExpressionOperator : (pVariableExpressionOperator = new VariableExpressionOperatorElements());
	}
	
	public ParserRule getVariableExpressionOperatorRule() {
		return getVariableExpressionOperatorAccess().getRule();
	}

	/////////////
	//// rules //
	/////////////
	//// rule definition
	//RuleDefinition:
	//	{RuleDefinition} "RULE" name=ID ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
	//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return (pRuleDefinition != null) ? pRuleDefinition : (pRuleDefinition = new RuleDefinitionElements());
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}

	//// left or right hand side of rule
	//RuleObject returns EString:
	//	Variable | VariableComplex;
	public RuleObjectElements getRuleObjectAccess() {
		return (pRuleObject != null) ? pRuleObject : (pRuleObject = new RuleObjectElements());
	}
	
	public ParserRule getRuleObjectRule() {
		return getRuleObjectAccess().getRule();
	}

	/////////////////
	//// processes //
	/////////////////
	//// processes are collections of rules
	//// a process definition
	//ProcessDefinition:
	//	{ProcessDefinition} "define" "PROCESS" name=ID "(" // process parameters
	//	(parameters+=ProcessParameterMember ("," parameters+=ProcessParameterMember)*)? ")" "{" // process rules
	//	members+=ProcessDefinitionMember* "}" ("USES" // process 
	//	uses+=ProcessUseMember ("," uses+=ProcessUseMember)*)?;
	public ProcessDefinitionElements getProcessDefinitionAccess() {
		return (pProcessDefinition != null) ? pProcessDefinition : (pProcessDefinition = new ProcessDefinitionElements());
	}
	
	public ParserRule getProcessDefinitionRule() {
		return getProcessDefinitionAccess().getRule();
	}

	//// process parameter member
	//ProcessParameterMember:
	//	{ProcessParameterMember} type=ID name=ID ":" scope=ProcessParameterScope;
	public ProcessParameterMemberElements getProcessParameterMemberAccess() {
		return (pProcessParameterMember != null) ? pProcessParameterMember : (pProcessParameterMember = new ProcessParameterMemberElements());
	}
	
	public ParserRule getProcessParameterMemberRule() {
		return getProcessParameterMemberAccess().getRule();
	}

	//// allowed scope of process parameters
	//ProcessParameterScope:
	//	"required" | "returned" | "optional";
	public ProcessParameterScopeElements getProcessParameterScopeAccess() {
		return (pProcessParameterScope != null) ? pProcessParameterScope : (pProcessParameterScope = new ProcessParameterScopeElements());
	}
	
	public ParserRule getProcessParameterScopeRule() {
		return getProcessParameterScopeAccess().getRule();
	}

	//// process definition member
	//ProcessDefinitionMember:
	//	RuleDefinition | VariableAssignment;
	public ProcessDefinitionMemberElements getProcessDefinitionMemberAccess() {
		return (pProcessDefinitionMember != null) ? pProcessDefinitionMember : (pProcessDefinitionMember = new ProcessDefinitionMemberElements());
	}
	
	public ParserRule getProcessDefinitionMemberRule() {
		return getProcessDefinitionMemberAccess().getRule();
	}

	//// process use member
	//ProcessUseMember:
	//	{ProcessUseMember} type=ID name=ID;
	public ProcessUseMemberElements getProcessUseMemberAccess() {
		return (pProcessUseMember != null) ? pProcessUseMember : (pProcessUseMember = new ProcessUseMemberElements());
	}
	
	public ParserRule getProcessUseMemberRule() {
		return getProcessUseMemberAccess().getRule();
	}

	//// a process call
	//ProcessCall:
	//	{ProcessCall} "PROCESS" name=ID "=" constructor=ID "(" (parameters+=VariableAssignment (","
	//	parameters+=VariableAssignment)*)? ")";
	public ProcessCallElements getProcessCallAccess() {
		return (pProcessCall != null) ? pProcessCall : (pProcessCall = new ProcessCallElements());
	}
	
	public ParserRule getProcessCallRule() {
		return getProcessCallAccess().getRule();
	}

	///////////////
	//// devices //
	///////////////
	//// device definition
	//DeviceDefinition:
	//	{DeviceDefinition} "DEVICE" name=ID "=" "DEVICE" "(" (parts+=ID ("," parts+=ID)*) ")" "("
	//	(parameters+=VariableAssignment ("," parameters+=VariableAssignment)*)? ")" "{" members+=DeviceMembers* "}";
	public DeviceDefinitionElements getDeviceDefinitionAccess() {
		return (pDeviceDefinition != null) ? pDeviceDefinition : (pDeviceDefinition = new DeviceDefinitionElements());
	}
	
	public ParserRule getDeviceDefinitionRule() {
		return getDeviceDefinitionAccess().getRule();
	}

	//DeviceMembers:
	//	ProcessCall | PropertyDefinition;
	public DeviceMembersElements getDeviceMembersAccess() {
		return (pDeviceMembers != null) ? pDeviceMembers : (pDeviceMembers = new DeviceMembersElements());
	}
	
	public ParserRule getDeviceMembersRule() {
		return getDeviceMembersAccess().getRule();
	}

	//////////////////
	//// atgc rules //
	//////////////////
	//ATGCDefinition:
	//	{ATGCDefinition} "ATGC" command=ID ":" arguments+=ID ("," arguments+=ID)*;
	public ATGCDefinitionElements getATGCDefinitionAccess() {
		return (pATGCDefinition != null) ? pATGCDefinition : (pATGCDefinition = new ATGCDefinitionElements());
	}
	
	public ParserRule getATGCDefinitionRule() {
		return getATGCDefinitionAccess().getRule();
	}

	///////////////////////////
	//// model checker rules //
	///////////////////////////
	//PropertyDefinition:
	//	{PropertyDefinition} "VERIFY" ("[" property+=Property (BooleanOperator property+=Property)* "]"
	//	condition=PropertyCondition | "EXPECTED" "[" name=ID "]" "AT TIME INSTANT" time=REAL "IS" (operator=RelationalOperator
	//	concentration=Quantity | "?"));
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//Property:
	//	{Property} lhs=ID operator=RelationalOperator rhs=Quantity;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyCondition:
	//	{PropertyCondition} ("WILL HOLD" | "NEVER HOLDS" | "ALWAYS HOLDS") ("WITHIN TIME BOUND" "[" lowerBound=REAL ","
	//	upperBounds=REAL "]" ("WITH PROBABILITY BOUND" (operator=RelationalOperator probability=REAL | "?"))?)?;
	public PropertyConditionElements getPropertyConditionAccess() {
		return (pPropertyCondition != null) ? pPropertyCondition : (pPropertyCondition = new PropertyConditionElements());
	}
	
	public ParserRule getPropertyConditionRule() {
		return getPropertyConditionAccess().getRule();
	}

	///////////////////
	//// basic types //
	///////////////////
	//// a real number
	//REAL:
	//	Decimal | DecimalExp;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//Decimal hidden():
	//	("+" | "-")? INT ("." INT)?;
	public DecimalElements getDecimalAccess() {
		return (pDecimal != null) ? pDecimal : (pDecimal = new DecimalElements());
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//DecimalExp hidden():
	//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
	public DecimalExpElements getDecimalExpAccess() {
		return (pDecimalExp != null) ? pDecimalExp : (pDecimalExp = new DecimalExpElements());
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}

	//// a quantity with units
	//Quantity:
	//	{Quantity} value=REAL units=ID;
	public QuantityElements getQuantityAccess() {
		return (pQuantity != null) ? pQuantity : (pQuantity = new QuantityElements());
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}

	//// relational operators
	//RelationalOperator:
	//	"==" | "!=" | "<" | ">" | "<=" | ">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// boolean operator
	//BooleanOperator:
	//	"&" | "|";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (pBooleanOperator != null) ? pBooleanOperator : (pBooleanOperator = new BooleanOperatorElements());
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//// qualified name
	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
