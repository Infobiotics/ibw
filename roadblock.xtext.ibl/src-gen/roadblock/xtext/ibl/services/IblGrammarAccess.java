/*
* generated by Xtext
*/
package roadblock.xtext.ibl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IblGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersModelMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		
		///////////////////////
		//// top level rules //
		///////////////////////
		//// a model is composed of top level model members
		//Model:
		//	{Model} members+=ModelMember*;
		public ParserRule getRule() { return rule; }

		//{Model} members+=ModelMember*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//members+=ModelMember*
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ModelMember
		public RuleCall getMembersModelMemberParserRuleCall_1_0() { return cMembersModelMemberParserRuleCall_1_0; }
	}

	public class ModelMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// model members are an import statement, variable definition or function definition
		//ModelMember:
		//	ImportStatement | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//ImportStatement | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ImportStatement
		public RuleCall getImportStatementParserRuleCall_0() { return cImportStatementParserRuleCall_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_1() { return cFunctionDefinitionParserRuleCall_1; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		////////////////////////
		//// import statement //
		////////////////////////
		//ImportStatement:
		//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//{Import} "import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
	}

	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPROCESSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSYSTEMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCHROMOSOMEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPLASMIDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCELLKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cREGIONKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		///////////////////////////
		//// Function definition //
		///////////////////////////
		//// function types
		//FunctionType:
		//	"PROCESS" | "SYSTEM" | "CHROMOSOME" | "PLASMID" | "CELL" | "REGION";
		public ParserRule getRule() { return rule; }

		//"PROCESS" | "SYSTEM" | "CHROMOSOME" | "PLASMID" | "CELL" | "REGION"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_0() { return cPROCESSKeyword_0; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_1() { return cSYSTEMKeyword_1; }

		//"CHROMOSOME"
		public Keyword getCHROMOSOMEKeyword_2() { return cCHROMOSOMEKeyword_2; }

		//"PLASMID"
		public Keyword getPLASMIDKeyword_3() { return cPLASMIDKeyword_3; }

		//"CELL"
		public Keyword getCELLKeyword_4() { return cCELLKeyword_4; }

		//"REGION"
		public Keyword getREGIONKeyword_5() { return cREGIONKeyword_5; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeofKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFunctionBodyAlternatives_4_0 = (Alternatives)cFunctionBodyAssignment_4.eContents().get(0);
		private final RuleCall cFunctionBodyProcessBodyParserRuleCall_4_0_0 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(0);
		private final RuleCall cFunctionBodySystemBodyParserRuleCall_4_0_1 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(1);
		private final RuleCall cFunctionBodyPlasmidBodyParserRuleCall_4_0_2 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(2);
		private final RuleCall cFunctionBodyChromosomeBodyParserRuleCall_4_0_3 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(3);
		private final RuleCall cFunctionBodyCellBodyParserRuleCall_4_0_4 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(4);
		private final RuleCall cFunctionBodyRegionBodyParserRuleCall_4_0_5 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(5);
		private final RuleCall cFunctionBodyCustomFunctionBodyParserRuleCall_4_0_6 = (RuleCall)cFunctionBodyAlternatives_4_0.eContents().get(6);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUSESKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUsesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_5_1_0 = (RuleCall)cUsesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cUsesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cUsesFunctionUseMemberParserRuleCall_5_2_1_0 = (RuleCall)cUsesAssignment_5_2_1.eContents().get(0);
		
		//// a function definition
		//FunctionDefinition:
		//	{FunctionDefinition} "define" name=VariableName "typeof" functionBody=(ProcessBody | SystemBody | PlasmidBody |
		//	ChromosomeBody | CellBody | RegionBody | CustomFunctionBody) ("USES" uses+=FunctionUseMember (","
		//	uses+=FunctionUseMember)*)?;
		public ParserRule getRule() { return rule; }

		//{FunctionDefinition} "define" name=VariableName "typeof" functionBody=(ProcessBody | SystemBody | PlasmidBody |
		//ChromosomeBody | CellBody | RegionBody | CustomFunctionBody) ("USES" uses+=FunctionUseMember (","
		//uses+=FunctionUseMember)*)?
		public Group getGroup() { return cGroup; }

		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }

		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"typeof"
		public Keyword getTypeofKeyword_3() { return cTypeofKeyword_3; }

		//functionBody=(ProcessBody | SystemBody | PlasmidBody | ChromosomeBody | CellBody | RegionBody | CustomFunctionBody)
		public Assignment getFunctionBodyAssignment_4() { return cFunctionBodyAssignment_4; }

		//ProcessBody | SystemBody | PlasmidBody | ChromosomeBody | CellBody | RegionBody | CustomFunctionBody
		public Alternatives getFunctionBodyAlternatives_4_0() { return cFunctionBodyAlternatives_4_0; }

		//ProcessBody
		public RuleCall getFunctionBodyProcessBodyParserRuleCall_4_0_0() { return cFunctionBodyProcessBodyParserRuleCall_4_0_0; }

		//SystemBody
		public RuleCall getFunctionBodySystemBodyParserRuleCall_4_0_1() { return cFunctionBodySystemBodyParserRuleCall_4_0_1; }

		//PlasmidBody
		public RuleCall getFunctionBodyPlasmidBodyParserRuleCall_4_0_2() { return cFunctionBodyPlasmidBodyParserRuleCall_4_0_2; }

		//ChromosomeBody
		public RuleCall getFunctionBodyChromosomeBodyParserRuleCall_4_0_3() { return cFunctionBodyChromosomeBodyParserRuleCall_4_0_3; }

		//CellBody
		public RuleCall getFunctionBodyCellBodyParserRuleCall_4_0_4() { return cFunctionBodyCellBodyParserRuleCall_4_0_4; }

		//RegionBody
		public RuleCall getFunctionBodyRegionBodyParserRuleCall_4_0_5() { return cFunctionBodyRegionBodyParserRuleCall_4_0_5; }

		//CustomFunctionBody
		public RuleCall getFunctionBodyCustomFunctionBodyParserRuleCall_4_0_6() { return cFunctionBodyCustomFunctionBodyParserRuleCall_4_0_6; }

		//("USES" uses+=FunctionUseMember ("," uses+=FunctionUseMember)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"USES"
		public Keyword getUSESKeyword_5_0() { return cUSESKeyword_5_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_5_1() { return cUsesAssignment_5_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_5_1_0() { return cUsesFunctionUseMemberParserRuleCall_5_1_0; }

		//("," uses+=FunctionUseMember)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//uses+=FunctionUseMember
		public Assignment getUsesAssignment_5_2_1() { return cUsesAssignment_5_2_1; }

		//FunctionUseMember
		public RuleCall getUsesFunctionUseMemberParserRuleCall_5_2_1_0() { return cUsesFunctionUseMemberParserRuleCall_5_2_1_0; }
	}

	public class ProcessBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPROCESSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersProcessBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Process body definition
		//ProcessBody:
		//	{ProcessBody} "PROCESS" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//	members+=ProcessBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{ProcessBody} "PROCESS" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//members+=ProcessBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{ProcessBody}
		public Action getProcessBodyAction_0() { return cProcessBodyAction_0; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_1() { return cPROCESSKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=ProcessBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//ProcessBodyMember
		public RuleCall getMembersProcessBodyMemberParserRuleCall_6_0() { return cMembersProcessBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SystemBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSYSTEMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersSystemBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// System body definition
		//SystemBody:
		//	{SystemBody} "SYSTEM" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//	members+=SystemBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{SystemBody} "SYSTEM" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//members+=SystemBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{SystemBody}
		public Action getSystemBodyAction_0() { return cSystemBodyAction_0; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_1() { return cSYSTEMKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=SystemBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//SystemBodyMember
		public RuleCall getMembersSystemBodyMemberParserRuleCall_6_0() { return cMembersSystemBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PlasmidBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlasmidBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlasmidBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPLASMIDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersPlasmidBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Plasmid body definition
		//PlasmidBody:
		//	{PlasmidBody} "PLASMID" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//	members+=PlasmidBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{PlasmidBody} "PLASMID" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//members+=PlasmidBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{PlasmidBody}
		public Action getPlasmidBodyAction_0() { return cPlasmidBodyAction_0; }

		//"PLASMID"
		public Keyword getPLASMIDKeyword_1() { return cPLASMIDKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=PlasmidBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//PlasmidBodyMember
		public RuleCall getMembersPlasmidBodyMemberParserRuleCall_6_0() { return cMembersPlasmidBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ChromosomeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChromosomeBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChromosomeBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCHROMOSOMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersChromosomeBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Chromosome body definition
		//ChromosomeBody:
		//	{ChromosomeBody} "CHROMOSOME" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		//	")" "{" members+=ChromosomeBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{ChromosomeBody} "CHROMOSOME" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")"
		//"{" members+=ChromosomeBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{ChromosomeBody}
		public Action getChromosomeBodyAction_0() { return cChromosomeBodyAction_0; }

		//"CHROMOSOME"
		public Keyword getCHROMOSOMEKeyword_1() { return cCHROMOSOMEKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=ChromosomeBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//ChromosomeBodyMember
		public RuleCall getMembersChromosomeBodyMemberParserRuleCall_6_0() { return cMembersChromosomeBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class CellBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCELLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersCellBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Cell body definition
		//CellBody:
		//	{CellBody} "CELL" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//	members+=CellBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{CellBody} "CELL" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//members+=CellBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{CellBody}
		public Action getCellBodyAction_0() { return cCellBodyAction_0; }

		//"CELL"
		public Keyword getCELLKeyword_1() { return cCELLKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=CellBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//CellBodyMember
		public RuleCall getMembersCellBodyMemberParserRuleCall_6_0() { return cMembersCellBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class RegionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cREGIONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersRegionBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Region body definition
		//RegionBody:
		//	{RegionBody} "REGION" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//	members+=RegionBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{RegionBody} "REGION" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
		//members+=RegionBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{RegionBody}
		public Action getRegionBodyAction_0() { return cRegionBodyAction_0; }

		//"REGION"
		public Keyword getREGIONKeyword_1() { return cREGIONKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=RegionBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//RegionBodyMember
		public RuleCall getMembersRegionBodyMemberParserRuleCall_6_0() { return cMembersRegionBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class CustomFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCustomFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionTypeVariableNameParserRuleCall_1_0 = (RuleCall)cFunctionTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterMemberParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersCustomFunctionBodyMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// User defined function body definition
		//CustomFunctionBody:
		//	{CustomFunctionBody} functionType=VariableName "(" (parameters+=FunctionParameterMember (","
		//	parameters+=FunctionParameterMember)*)? ")" "{" members+=CustomFunctionBodyMember* "}";
		public ParserRule getRule() { return rule; }

		//{CustomFunctionBody} functionType=VariableName "(" (parameters+=FunctionParameterMember (","
		//parameters+=FunctionParameterMember)*)? ")" "{" members+=CustomFunctionBodyMember* "}"
		public Group getGroup() { return cGroup; }

		//{CustomFunctionBody}
		public Action getCustomFunctionBodyAction_0() { return cCustomFunctionBodyAction_0; }

		//functionType=VariableName
		public Assignment getFunctionTypeAssignment_1() { return cFunctionTypeAssignment_1; }

		//VariableName
		public RuleCall getFunctionTypeVariableNameParserRuleCall_1_0() { return cFunctionTypeVariableNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_0_0() { return cParametersFunctionParameterMemberParserRuleCall_3_0_0; }

		//("," parameters+=FunctionParameterMember)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FunctionParameterMember
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FunctionParameterMember
		public RuleCall getParametersFunctionParameterMemberParserRuleCall_3_1_1_0() { return cParametersFunctionParameterMemberParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=CustomFunctionBodyMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//CustomFunctionBodyMember
		public RuleCall getMembersCustomFunctionBodyMemberParserRuleCall_6_0() { return cMembersCustomFunctionBodyMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ProcessBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcessInstantiationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////////////////////
		//// Body members //
		////////////////////
		//// Process definition body member
		//ProcessBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ProcessInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ProcessInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_3() { return cProcessInstantiationParserRuleCall_3; }
	}

	public class SystemBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cATGCDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeviceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// System definition body member
		//SystemBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//	ProcessInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//ProcessInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_3() { return cATGCDefinitionParserRuleCall_3; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_4() { return cPropertyDefinitionParserRuleCall_4; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_5() { return cDeviceDefinitionParserRuleCall_5; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_6() { return cProcessInstantiationParserRuleCall_6; }
	}

	public class PlasmidBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlasmidBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cATGCDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeviceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSystemInstantiationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// Plasmid definition body member
		//PlasmidBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//	ProcessInstantiation | SystemInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//ProcessInstantiation | SystemInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_3() { return cATGCDefinitionParserRuleCall_3; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_4() { return cPropertyDefinitionParserRuleCall_4; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_5() { return cDeviceDefinitionParserRuleCall_5; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_6() { return cProcessInstantiationParserRuleCall_6; }

		//SystemInstantiation
		public RuleCall getSystemInstantiationParserRuleCall_7() { return cSystemInstantiationParserRuleCall_7; }
	}

	public class ChromosomeBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChromosomeBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cATGCDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeviceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSystemInstantiationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// Chromosome definition body member
		//ChromosomeBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//	ProcessInstantiation | SystemInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//ProcessInstantiation | SystemInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_3() { return cATGCDefinitionParserRuleCall_3; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_4() { return cPropertyDefinitionParserRuleCall_4; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_5() { return cDeviceDefinitionParserRuleCall_5; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_6() { return cProcessInstantiationParserRuleCall_6; }

		//SystemInstantiation
		public RuleCall getSystemInstantiationParserRuleCall_7() { return cSystemInstantiationParserRuleCall_7; }
	}

	public class CellBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cATGCDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeviceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSystemInstantiationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPlasmidInstantiationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cChromosomeInstantiationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// Cell definition body member
		//CellBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//	ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_3() { return cATGCDefinitionParserRuleCall_3; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_4() { return cPropertyDefinitionParserRuleCall_4; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_5() { return cDeviceDefinitionParserRuleCall_5; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_6() { return cProcessInstantiationParserRuleCall_6; }

		//SystemInstantiation
		public RuleCall getSystemInstantiationParserRuleCall_7() { return cSystemInstantiationParserRuleCall_7; }

		//PlasmidInstantiation
		public RuleCall getPlasmidInstantiationParserRuleCall_8() { return cPlasmidInstantiationParserRuleCall_8; }

		//ChromosomeInstantiation
		public RuleCall getChromosomeInstantiationParserRuleCall_9() { return cChromosomeInstantiationParserRuleCall_9; }
	}

	public class RegionBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegionBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCellInstantiationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Region definition body member
		//RegionBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | CellInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | CellInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//CellInstantiation
		public RuleCall getCellInstantiationParserRuleCall_3() { return cCellInstantiationParserRuleCall_3; }
	}

	public class CustomFunctionBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomFunctionBodyMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cATGCDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeviceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSystemInstantiationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPlasmidInstantiationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cChromosomeInstantiationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// User defined function body member
		//CustomFunctionBodyMember:
		//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//	ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation;
		public ParserRule getRule() { return rule; }

		//RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
		//ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDefinition
		public RuleCall getRuleDefinitionParserRuleCall_0() { return cRuleDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_3() { return cATGCDefinitionParserRuleCall_3; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_4() { return cPropertyDefinitionParserRuleCall_4; }

		//DeviceDefinition
		public RuleCall getDeviceDefinitionParserRuleCall_5() { return cDeviceDefinitionParserRuleCall_5; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_6() { return cProcessInstantiationParserRuleCall_6; }

		//SystemInstantiation
		public RuleCall getSystemInstantiationParserRuleCall_7() { return cSystemInstantiationParserRuleCall_7; }

		//PlasmidInstantiation
		public RuleCall getPlasmidInstantiationParserRuleCall_8() { return cPlasmidInstantiationParserRuleCall_8; }

		//ChromosomeInstantiation
		public RuleCall getChromosomeInstantiationParserRuleCall_9() { return cChromosomeInstantiationParserRuleCall_9; }
	}

	public class FunctionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cCollectionAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_0_1_0_0 = (RuleCall)cCollectionAssignment_0_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final Alternatives cTypeAlternatives_0_1_2_0 = (Alternatives)cTypeAssignment_0_1_2.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_1_2_0_0 = (RuleCall)cTypeAlternatives_0_1_2_0.eContents().get(0);
		private final RuleCall cTypeVariableNameParserRuleCall_0_1_2_0_1 = (RuleCall)cTypeAlternatives_0_1_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScopeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScopeFunctionParameterScopeParserRuleCall_2_1_0 = (RuleCall)cScopeAssignment_2_1.eContents().get(0);
		
		////////////////////////
		//// function members //
		////////////////////////
		//// function parameter member
		//FunctionParameterMember:
		//	(type=VariableType | collection=CollectionID "<" type=(VariableType | VariableName) ">") name=VariableName (":"
		//	scope=FunctionParameterScope)?;
		public ParserRule getRule() { return rule; }

		//(type=VariableType | collection=CollectionID "<" type=(VariableType | VariableName) ">") name=VariableName (":"
		//scope=FunctionParameterScope)?
		public Group getGroup() { return cGroup; }

		//type=VariableType | collection=CollectionID "<" type=(VariableType | VariableName) ">"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//type=VariableType
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0_0() { return cTypeVariableTypeParserRuleCall_0_0_0; }

		//collection=CollectionID "<" type=(VariableType | VariableName) ">"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_0_1_0() { return cCollectionAssignment_0_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_0_1_0_0() { return cCollectionCollectionIDParserRuleCall_0_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1_1() { return cLessThanSignKeyword_0_1_1; }

		//type=(VariableType | VariableName)
		public Assignment getTypeAssignment_0_1_2() { return cTypeAssignment_0_1_2; }

		//VariableType | VariableName
		public Alternatives getTypeAlternatives_0_1_2_0() { return cTypeAlternatives_0_1_2_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_1_2_0_0() { return cTypeVariableTypeParserRuleCall_0_1_2_0_0; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_0_1_2_0_1() { return cTypeVariableNameParserRuleCall_0_1_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_3() { return cGreaterThanSignKeyword_0_1_3; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }

		//(":" scope=FunctionParameterScope)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//scope=FunctionParameterScope
		public Assignment getScopeAssignment_2_1() { return cScopeAssignment_2_1; }

		//FunctionParameterScope
		public RuleCall getScopeFunctionParameterScopeParserRuleCall_2_1_0() { return cScopeFunctionParameterScopeParserRuleCall_2_1_0; }
	}

	public class FunctionParameterScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOptionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// allowed scope of function parameters
		//FunctionParameterScope:
		//	"input" | "output" | "optional";
		public ParserRule getRule() { return rule; }

		//"input" | "output" | "optional"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//"optional"
		public Keyword getOptionalKeyword_2() { return cOptionalKeyword_2; }
	}

	public class FunctionUseMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionUseMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// function use member
		//FunctionUseMember:
		//	type=VariableType name=VariableName;
		public ParserRule getRule() { return rule; }

		//type=VariableType name=VariableName
		public Group getGroup() { return cGroup; }

		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }
	}

	public class DeviceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDEVICEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDEVICEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPartsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPartsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPartsListParserRuleCall_9_0 = (RuleCall)cPartsAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cInputKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cEqualsSignKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cInputAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cInputListParserRuleCall_12_2_0 = (RuleCall)cInputAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cOutputKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cEqualsSignKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cOutputputAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cOutputputListParserRuleCall_13_3_0 = (RuleCall)cOutputputAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cMembersAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cMembersDeviceMembersParserRuleCall_16_0 = (RuleCall)cMembersAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		///////////////
		//// devices //
		//////////////
		//// device definition
		//DeviceDefinition:
		//	{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "(" ("input" "="
		//	input=List)? ("," "output" "=" outputput=List)? ")" "{" members+=DeviceMembers* "}";
		public ParserRule getRule() { return rule; }

		//{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "(" ("input" "="
		//input=List)? ("," "output" "=" outputput=List)? ")" "{" members+=DeviceMembers* "}"
		public Group getGroup() { return cGroup; }

		//{DeviceDefinition}
		public Action getDeviceDefinitionAction_0() { return cDeviceDefinitionAction_0; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_1() { return cDEVICEKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"new"
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }

		//"DEVICE"
		public Keyword getDEVICEKeyword_5() { return cDEVICEKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//"parts"
		public Keyword getPartsKeyword_7() { return cPartsKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//parts=List
		public Assignment getPartsAssignment_9() { return cPartsAssignment_9; }

		//List
		public RuleCall getPartsListParserRuleCall_9_0() { return cPartsListParserRuleCall_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }

		//("input" "=" input=List)?
		public Group getGroup_12() { return cGroup_12; }

		//"input"
		public Keyword getInputKeyword_12_0() { return cInputKeyword_12_0; }

		//"="
		public Keyword getEqualsSignKeyword_12_1() { return cEqualsSignKeyword_12_1; }

		//input=List
		public Assignment getInputAssignment_12_2() { return cInputAssignment_12_2; }

		//List
		public RuleCall getInputListParserRuleCall_12_2_0() { return cInputListParserRuleCall_12_2_0; }

		//("," "output" "=" outputput=List)?
		public Group getGroup_13() { return cGroup_13; }

		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }

		//"output"
		public Keyword getOutputKeyword_13_1() { return cOutputKeyword_13_1; }

		//"="
		public Keyword getEqualsSignKeyword_13_2() { return cEqualsSignKeyword_13_2; }

		//outputput=List
		public Assignment getOutputputAssignment_13_3() { return cOutputputAssignment_13_3; }

		//List
		public RuleCall getOutputputListParserRuleCall_13_3_0() { return cOutputputListParserRuleCall_13_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }

		//members+=DeviceMembers*
		public Assignment getMembersAssignment_16() { return cMembersAssignment_16; }

		//DeviceMembers
		public RuleCall getMembersDeviceMembersParserRuleCall_16_0() { return cMembersDeviceMembersParserRuleCall_16_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class DeviceMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceMembers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cATGCDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcessInstantiationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DeviceMembers:
		//	VariableDefinition | PropertyDefinition | ATGCDefinition | ProcessInstantiation;
		public ParserRule getRule() { return rule; }

		//VariableDefinition | PropertyDefinition | ATGCDefinition | ProcessInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0() { return cVariableDefinitionParserRuleCall_0; }

		//PropertyDefinition
		public RuleCall getPropertyDefinitionParserRuleCall_1() { return cPropertyDefinitionParserRuleCall_1; }

		//ATGCDefinition
		public RuleCall getATGCDefinitionParserRuleCall_2() { return cATGCDefinitionParserRuleCall_2; }

		//ProcessInstantiation
		public RuleCall getProcessInstantiationParserRuleCall_3() { return cProcessInstantiationParserRuleCall_3; }
	}

	public class ProcessInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPROCESSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//////////////////////
		//// instantiations //
		//////////////////////
		//// System instantiation 
		//ProcessInstantiation:
		//	{ProcessInstantiation} "PROCESS" name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{ProcessInstantiation} "PROCESS" name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{ProcessInstantiation}
		public Action getProcessInstantiationAction_0() { return cProcessInstantiationAction_0; }

		//"PROCESS"
		public Keyword getPROCESSKeyword_1() { return cPROCESSKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class SystemInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSYSTEMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//// System instantiation 
		//SystemInstantiation:
		//	{SystemInstantiation} "SYSTEM" name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{SystemInstantiation} "SYSTEM" name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{SystemInstantiation}
		public Action getSystemInstantiationAction_0() { return cSystemInstantiationAction_0; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_1() { return cSYSTEMKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class PlasmidInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlasmidInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlasmidInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPLASMIDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//// Plasmid instantiation 
		//PlasmidInstantiation:
		//	{PlasmidInstantiation} "PLASMID" name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{PlasmidInstantiation} "PLASMID" name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{PlasmidInstantiation}
		public Action getPlasmidInstantiationAction_0() { return cPlasmidInstantiationAction_0; }

		//"PLASMID"
		public Keyword getPLASMIDKeyword_1() { return cPLASMIDKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class ChromosomeInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChromosomeInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChromosomeInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCHROMOSOMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//// Chromosome instantiation 
		//ChromosomeInstantiation:
		//	{ChromosomeInstantiation} "CHROMOSOME" name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{ChromosomeInstantiation} "CHROMOSOME" name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{ChromosomeInstantiation}
		public Action getChromosomeInstantiationAction_0() { return cChromosomeInstantiationAction_0; }

		//"CHROMOSOME"
		public Keyword getCHROMOSOMEKeyword_1() { return cCHROMOSOMEKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class CellInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCELLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//// Cell instantiation 
		//CellInstantiation:
		//	{CellInstantiation} "CELL" name=VariableName ("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment
		//	("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{CellInstantiation} "CELL" name=VariableName ("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment
		//("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{CellInstantiation}
		public Action getCellInstantiationAction_0() { return cCellInstantiationAction_0; }

		//"CELL"
		public Keyword getCELLKeyword_1() { return cCELLKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////////
		//// variables //
		/////////////////
		//// a variable
		//VariableName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMOLECULEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCHASSISKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCOMPLEXKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRIBOSOMEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPROMOTERKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPROTEINKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDNAKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRNAKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGENEKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cINTEGERKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRATEKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//// variable types
		//VariableType:
		//	"MOLECULE" | "CHASSIS" | "COMPLEX" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" |
		//	"RATE";
		public ParserRule getRule() { return rule; }

		//"MOLECULE" | "CHASSIS" | "COMPLEX" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" | "RATE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"MOLECULE"
		public Keyword getMOLECULEKeyword_0() { return cMOLECULEKeyword_0; }

		//"CHASSIS"
		public Keyword getCHASSISKeyword_1() { return cCHASSISKeyword_1; }

		//"COMPLEX"
		public Keyword getCOMPLEXKeyword_2() { return cCOMPLEXKeyword_2; }

		//"RIBOSOME"
		public Keyword getRIBOSOMEKeyword_3() { return cRIBOSOMEKeyword_3; }

		//"PROMOTER"
		public Keyword getPROMOTERKeyword_4() { return cPROMOTERKeyword_4; }

		//"PROTEIN"
		public Keyword getPROTEINKeyword_5() { return cPROTEINKeyword_5; }

		//"DNA"
		public Keyword getDNAKeyword_6() { return cDNAKeyword_6; }

		//"RNA"
		public Keyword getRNAKeyword_7() { return cRNAKeyword_7; }

		//"GENE"
		public Keyword getGENEKeyword_8() { return cGENEKeyword_8; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_9() { return cINTEGERKeyword_9; }

		//"RATE"
		public Keyword getRATEKeyword_10() { return cRATEKeyword_10; }
	}

	public class VariableComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableComplex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableComplexAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsVariableNameParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTildeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComponentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComponentsVariableNameParserRuleCall_2_1_0 = (RuleCall)cComponentsAssignment_2_1.eContents().get(0);
		
		//// a variable complex
		//VariableComplex:
		//	{VariableComplex} components+=VariableName ("~" components+=VariableName)+;
		public ParserRule getRule() { return rule; }

		//{VariableComplex} components+=VariableName ("~" components+=VariableName)+
		public Group getGroup() { return cGroup; }

		//{VariableComplex}
		public Action getVariableComplexAction_0() { return cVariableComplexAction_0; }

		//components+=VariableName
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//VariableName
		public RuleCall getComponentsVariableNameParserRuleCall_1_0() { return cComponentsVariableNameParserRuleCall_1_0; }

		//("~" components+=VariableName)+
		public Group getGroup_2() { return cGroup_2; }

		//"~"
		public Keyword getTildeKeyword_2_0() { return cTildeKeyword_2_0; }

		//components+=VariableName
		public Assignment getComponentsAssignment_2_1() { return cComponentsAssignment_2_1; }

		//VariableName
		public RuleCall getComponentsVariableNameParserRuleCall_2_1_0() { return cComponentsVariableNameParserRuleCall_2_1_0; }
	}

	public class VariableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameVariableNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cComplexAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComplexVariableComplexParserRuleCall_1_1_0 = (RuleCall)cComplexAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeVariableNameParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//// a variable attribute
		//VariableAttribute:
		//	{VariableAttribute} (name=VariableName | complex=VariableComplex) "." attribute=VariableName;
		public ParserRule getRule() { return rule; }

		//{VariableAttribute} (name=VariableName | complex=VariableComplex) "." attribute=VariableName
		public Group getGroup() { return cGroup; }

		//{VariableAttribute}
		public Action getVariableAttributeAction_0() { return cVariableAttributeAction_0; }

		//name=VariableName | complex=VariableComplex
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=VariableName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0_0() { return cNameVariableNameParserRuleCall_1_0_0; }

		//complex=VariableComplex
		public Assignment getComplexAssignment_1_1() { return cComplexAssignment_1_1; }

		//VariableComplex
		public RuleCall getComplexVariableComplexParserRuleCall_1_1_0() { return cComplexVariableComplexParserRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//attribute=VariableName
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//VariableName
		public RuleCall getAttributeVariableNameParserRuleCall_3_0() { return cAttributeVariableNameParserRuleCall_3_0; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDefinitionAlternatives_1_0 = (Alternatives)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionVariableDefinitionBuiltInParserRuleCall_1_0_0 = (RuleCall)cDefinitionAlternatives_1_0.eContents().get(0);
		private final RuleCall cDefinitionVariableDefinitionUserDefinedParserRuleCall_1_0_1 = (RuleCall)cDefinitionAlternatives_1_0.eContents().get(1);
		private final RuleCall cDefinitionVariableDefinitionCollectionParserRuleCall_1_0_2 = (RuleCall)cDefinitionAlternatives_1_0.eContents().get(2);
		private final RuleCall cDefinitionVariableDefinitionBasicParserRuleCall_1_0_3 = (RuleCall)cDefinitionAlternatives_1_0.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualifierVariableQualifierParserRuleCall_2_1_0 = (RuleCall)cQualifierAssignment_2_1.eContents().get(0);
		
		//// a definition of a variable
		//VariableDefinition:
		//	{VariableDefinition} definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined |
		//	VariableDefinitionCollection | VariableDefinitionBasic) (":" qualifier=VariableQualifier)?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined |
		//VariableDefinitionCollection | VariableDefinitionBasic) (":" qualifier=VariableQualifier)?
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined | VariableDefinitionCollection |
		//VariableDefinitionBasic)
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//VariableDefinitionBuiltIn | VariableDefinitionUserDefined | VariableDefinitionCollection | VariableDefinitionBasic
		public Alternatives getDefinitionAlternatives_1_0() { return cDefinitionAlternatives_1_0; }

		//VariableDefinitionBuiltIn
		public RuleCall getDefinitionVariableDefinitionBuiltInParserRuleCall_1_0_0() { return cDefinitionVariableDefinitionBuiltInParserRuleCall_1_0_0; }

		//VariableDefinitionUserDefined
		public RuleCall getDefinitionVariableDefinitionUserDefinedParserRuleCall_1_0_1() { return cDefinitionVariableDefinitionUserDefinedParserRuleCall_1_0_1; }

		//VariableDefinitionCollection
		public RuleCall getDefinitionVariableDefinitionCollectionParserRuleCall_1_0_2() { return cDefinitionVariableDefinitionCollectionParserRuleCall_1_0_2; }

		//VariableDefinitionBasic
		public RuleCall getDefinitionVariableDefinitionBasicParserRuleCall_1_0_3() { return cDefinitionVariableDefinitionBasicParserRuleCall_1_0_3; }

		//(":" qualifier=VariableQualifier)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//qualifier=VariableQualifier
		public Assignment getQualifierAssignment_2_1() { return cQualifierAssignment_2_1; }

		//VariableQualifier
		public RuleCall getQualifierVariableQualifierParserRuleCall_2_1_0() { return cQualifierVariableQualifierParserRuleCall_2_1_0; }
	}

	public class VariableQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableQualifier");
		private final Keyword cObservableKeyword = (Keyword)rule.eContents().get(1);
		
		//// a variable qualifier
		//VariableQualifier:
		//	"observable";
		public ParserRule getRule() { return rule; }

		//"observable"
		public Keyword getObservableKeyword() { return cObservableKeyword; }
	}

	public class VariableDefinitionBuiltInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionBuiltIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionBuiltInAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameVariableNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cComplexAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cComplexVariableComplexParserRuleCall_2_1_0 = (RuleCall)cComplexAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cConstructorAlternatives_3_2_0 = (Alternatives)cConstructorAssignment_3_2.eContents().get(0);
		private final RuleCall cConstructorVariableTypeParserRuleCall_3_2_0_0 = (RuleCall)cConstructorAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0_1 = (RuleCall)cConstructorAlternatives_3_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//VariableDefinitionBuiltIn:
		//	{VariableDefinitionBuiltIn} type=VariableType (name=VariableName | complex=VariableComplex) ("=" "new"
		//	constructor=(VariableType | VariableName) "(" (parameters+=ParameterAssignment (","
		//	parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionBuiltIn} type=VariableType (name=VariableName | complex=VariableComplex) ("=" "new"
		//constructor=(VariableType | VariableName) "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		//")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionBuiltIn}
		public Action getVariableDefinitionBuiltInAction_0() { return cVariableDefinitionBuiltInAction_0; }

		//type=VariableType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_0() { return cTypeVariableTypeParserRuleCall_1_0; }

		//name=VariableName | complex=VariableComplex
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=VariableName
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0_0() { return cNameVariableNameParserRuleCall_2_0_0; }

		//complex=VariableComplex
		public Assignment getComplexAssignment_2_1() { return cComplexAssignment_2_1; }

		//VariableComplex
		public RuleCall getComplexVariableComplexParserRuleCall_2_1_0() { return cComplexVariableComplexParserRuleCall_2_1_0; }

		//("=" "new" constructor=(VariableType | VariableName) "(" (parameters+=ParameterAssignment (","
		//parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=(VariableType | VariableName)
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableType | VariableName
		public Alternatives getConstructorAlternatives_3_2_0() { return cConstructorAlternatives_3_2_0; }

		//VariableType
		public RuleCall getConstructorVariableTypeParserRuleCall_3_2_0_0() { return cConstructorVariableTypeParserRuleCall_3_2_0_0; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0_1() { return cConstructorVariableNameParserRuleCall_3_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VariableDefinitionUserDefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionUserDefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionUserDefinedAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNewKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConstructorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConstructorVariableNameParserRuleCall_3_2_0 = (RuleCall)cConstructorAssignment_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cParametersAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_0_0 = (RuleCall)cParametersAssignment_3_4_0.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cCommaKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cParametersParameterAssignmentParserRuleCall_3_4_1_1_0 = (RuleCall)cParametersAssignment_3_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//VariableDefinitionUserDefined:
		//	{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
		//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionUserDefined}
		public Action getVariableDefinitionUserDefinedAction_0() { return cVariableDefinitionUserDefinedAction_0; }

		//type=VariableName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_1_0() { return cTypeVariableNameParserRuleCall_1_0; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//"new"
		public Keyword getNewKeyword_3_1() { return cNewKeyword_3_1; }

		//constructor=VariableName
		public Assignment getConstructorAssignment_3_2() { return cConstructorAssignment_3_2; }

		//VariableName
		public RuleCall getConstructorVariableNameParserRuleCall_3_2_0() { return cConstructorVariableNameParserRuleCall_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3() { return cLeftParenthesisKeyword_3_3; }

		//(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_0() { return cParametersAssignment_3_4_0; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_0_0() { return cParametersParameterAssignmentParserRuleCall_3_4_0_0; }

		//("," parameters+=ParameterAssignment)*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//","
		public Keyword getCommaKeyword_3_4_1_0() { return cCommaKeyword_3_4_1_0; }

		//parameters+=ParameterAssignment
		public Assignment getParametersAssignment_3_4_1_1() { return cParametersAssignment_3_4_1_1; }

		//ParameterAssignment
		public RuleCall getParametersParameterAssignmentParserRuleCall_3_4_1_1_0() { return cParametersParameterAssignmentParserRuleCall_3_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VariableDefinitionCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCollectionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCollectionCollectionIDParserRuleCall_1_0_0 = (RuleCall)cCollectionAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cTypeAlternatives_1_2_0 = (Alternatives)cTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_2_0_0 = (RuleCall)cTypeAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cTypeVariableNameParserRuleCall_1_2_0_1 = (RuleCall)cTypeAlternatives_1_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cNameVariableNameParserRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueListParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//VariableDefinitionCollection:
		//	{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
		//	("=" value=List ")")?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
		//("=" value=List ")")?
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionCollection}
		public Action getVariableDefinitionCollectionAction_0() { return cVariableDefinitionCollectionAction_0; }

		//collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName
		public Group getGroup_1() { return cGroup_1; }

		//collection=CollectionID
		public Assignment getCollectionAssignment_1_0() { return cCollectionAssignment_1_0; }

		//CollectionID
		public RuleCall getCollectionCollectionIDParserRuleCall_1_0_0() { return cCollectionCollectionIDParserRuleCall_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//type=(VariableType | VariableName)
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//VariableType | VariableName
		public Alternatives getTypeAlternatives_1_2_0() { return cTypeAlternatives_1_2_0; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_2_0_0() { return cTypeVariableTypeParserRuleCall_1_2_0_0; }

		//VariableName
		public RuleCall getTypeVariableNameParserRuleCall_1_2_0_1() { return cTypeVariableNameParserRuleCall_1_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//name=VariableName
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_4_0() { return cNameVariableNameParserRuleCall_1_4_0; }

		//("=" value=List ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=List
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//List
		public RuleCall getValueListParserRuleCall_2_1_0() { return cValueListParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class CollectionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHASHKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// variable collections
		//CollectionID:
		//	"LIST" | "SET" | "HASH";
		public ParserRule getRule() { return rule; }

		//"LIST" | "SET" | "HASH"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//"SET"
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }

		//"HASH"
		public Keyword getHASHKeyword_2() { return cHASHKeyword_2; }
	}

	public class VariableDefinitionBasicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinitionBasic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionBasicAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//VariableDefinitionBasic:
		//	{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableDefinitionBasic}
		public Action getVariableDefinitionBasicAction_0() { return cVariableDefinitionBasicAction_0; }

		//type=VariableType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_0() { return cTypeVariableTypeParserRuleCall_1_0; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_4_0() { return cExpressionVariableExpressionParserRuleCall_4_0; }
	}

	public class ParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVariableExpressionObjectParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// a parameter assignment
		//ParameterAssignment:
		//	name=VariableName "=" value=VariableExpressionObject;
		public ParserRule getRule() { return rule; }

		//name=VariableName "=" value=VariableExpressionObject
		public Group getGroup() { return cGroup; }

		//name=VariableName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_0_0() { return cNameVariableNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=VariableExpressionObject
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VariableExpressionObject
		public RuleCall getValueVariableExpressionObjectParserRuleCall_2_0() { return cValueVariableExpressionObjectParserRuleCall_2_0; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAssignmentObjectParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionVariableExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//// a variable assignment
		//VariableAssignment:
		//	{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression;
		public ParserRule getRule() { return rule; }

		//{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression
		public Group getGroup() { return cGroup; }

		//{VariableAssignment}
		public Action getVariableAssignmentAction_0() { return cVariableAssignmentAction_0; }

		//variable=VariableAssignmentObject
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAssignmentObject
		public RuleCall getVariableVariableAssignmentObjectParserRuleCall_1_0() { return cVariableVariableAssignmentObjectParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=VariableExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//VariableExpression
		public RuleCall getExpressionVariableExpressionParserRuleCall_3_0() { return cExpressionVariableExpressionParserRuleCall_3_0; }
	}

	public class VariableAssignmentObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignmentObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableAssignmentObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cVariableAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableAssignmentObject:
		//	{VariableAssignmentObject} VariableName | VariableAttribute;
		public ParserRule getRule() { return rule; }

		//{VariableAssignmentObject} VariableName | VariableAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//{VariableAssignmentObject} VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{VariableAssignmentObject}
		public Action getVariableAssignmentObjectAction_0_0() { return cVariableAssignmentObjectAction_0_0; }

		//VariableName
		public RuleCall getVariableNameParserRuleCall_0_1() { return cVariableNameParserRuleCall_0_1; }

		//VariableAttribute
		public RuleCall getVariableAttributeParserRuleCall_1() { return cVariableAttributeParserRuleCall_1; }
	}

	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersVariableExpressionObjectParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVariableExpressionOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersVariableExpressionObjectParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		
		//VariableExpression:
		//	{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator
		//	members+=VariableExpressionObject)*;
		public ParserRule getRule() { return rule; }

		//{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator members+=VariableExpressionObject)*
		public Group getGroup() { return cGroup; }

		//{VariableExpression}
		public Action getVariableExpressionAction_0() { return cVariableExpressionAction_0; }

		//members+=VariableExpressionObject
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//VariableExpressionObject
		public RuleCall getMembersVariableExpressionObjectParserRuleCall_1_0() { return cMembersVariableExpressionObjectParserRuleCall_1_0; }

		//(VariableExpressionOperator members+=VariableExpressionObject)*
		public Group getGroup_2() { return cGroup_2; }

		//VariableExpressionOperator
		public RuleCall getVariableExpressionOperatorParserRuleCall_2_0() { return cVariableExpressionOperatorParserRuleCall_2_0; }

		//members+=VariableExpressionObject
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//VariableExpressionObject
		public RuleCall getMembersVariableExpressionObjectParserRuleCall_2_1_0() { return cMembersVariableExpressionObjectParserRuleCall_2_1_0; }
	}

	public class VariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicVariableExpressionObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundVariableExpressionObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableExpressionObject:
		//	AtomicVariableExpressionObject | CompoundVariableExpressionObject;
		public ParserRule getRule() { return rule; }

		//AtomicVariableExpressionObject | CompoundVariableExpressionObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicVariableExpressionObject
		public RuleCall getAtomicVariableExpressionObjectParserRuleCall_0() { return cAtomicVariableExpressionObjectParserRuleCall_0; }

		//CompoundVariableExpressionObject
		public RuleCall getCompoundVariableExpressionObjectParserRuleCall_1() { return cCompoundVariableExpressionObjectParserRuleCall_1; }
	}

	public class AtomicVariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicVariableExpressionObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomicVariableExpressionObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableVariableNameParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeVariableAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Assignment cComplexAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cComplexVariableComplexParserRuleCall_2_0 = (RuleCall)cComplexAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueREALParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cQuantityAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cQuantityQuantityParserRuleCall_4_0 = (RuleCall)cQuantityAssignment_4.eContents().get(0);
		private final Assignment cStringAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cStringSTRINGTerminalRuleCall_5_0 = (RuleCall)cStringAssignment_5.eContents().get(0);
		
		//AtomicVariableExpressionObject:
		//	{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
		//	value=REAL | quantity=Quantity | string=STRING;
		public ParserRule getRule() { return rule; }

		//{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
		//value=REAL | quantity=Quantity | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtomicVariableExpressionObject} variable=VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{AtomicVariableExpressionObject}
		public Action getAtomicVariableExpressionObjectAction_0_0() { return cAtomicVariableExpressionObjectAction_0_0; }

		//variable=VariableName
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//VariableName
		public RuleCall getVariableVariableNameParserRuleCall_0_1_0() { return cVariableVariableNameParserRuleCall_0_1_0; }

		//attribute=VariableAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//VariableAttribute
		public RuleCall getAttributeVariableAttributeParserRuleCall_1_0() { return cAttributeVariableAttributeParserRuleCall_1_0; }

		//complex=VariableComplex
		public Assignment getComplexAssignment_2() { return cComplexAssignment_2; }

		//VariableComplex
		public RuleCall getComplexVariableComplexParserRuleCall_2_0() { return cComplexVariableComplexParserRuleCall_2_0; }

		//value=REAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//REAL
		public RuleCall getValueREALParserRuleCall_3_0() { return cValueREALParserRuleCall_3_0; }

		//quantity=Quantity
		public Assignment getQuantityAssignment_4() { return cQuantityAssignment_4; }

		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_4_0() { return cQuantityQuantityParserRuleCall_4_0; }

		//string=STRING
		public Assignment getStringAssignment_5() { return cStringAssignment_5; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_5_0() { return cStringSTRINGTerminalRuleCall_5_0; }
	}

	public class CompoundVariableExpressionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundVariableExpressionObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundVariableExpressionObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//CompoundVariableExpressionObject:
		//	{CompoundVariableExpressionObject} list=List;
		public ParserRule getRule() { return rule; }

		//{CompoundVariableExpressionObject} list=List
		public Group getGroup() { return cGroup; }

		//{CompoundVariableExpressionObject}
		public Action getCompoundVariableExpressionObjectAction_0() { return cCompoundVariableExpressionObjectAction_0; }

		//list=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
	}

	public class VariableExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableExpressionOperator:
		//	"+" | "-" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLhsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_0_0 = (RuleCall)cLhsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLhsRuleObjectParserRuleCall_4_1_1_0 = (RuleCall)cLhsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cReversibleAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cReversibleAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_0_0 = (RuleCall)cRhsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPlusSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRhsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRhsRuleObjectParserRuleCall_6_1_1_0 = (RuleCall)cRhsAssignment_6_1_1.eContents().get(0);
		
		/////////////
		//// rules //
		/////////////
		//// rule definition
		//RuleDefinition:
		//	{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
		public ParserRule getRule() { return rule; }

		//{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup() { return cGroup; }

		//{RuleDefinition}
		public Action getRuleDefinitionAction_0() { return cRuleDefinitionAction_0; }

		//"RULE"
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }

		//name=VariableName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_2_0() { return cNameVariableNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(lhs+=RuleObject ("+" lhs+=RuleObject)*)?
		public Group getGroup_4() { return cGroup_4; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_0() { return cLhsAssignment_4_0; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_0_0() { return cLhsRuleObjectParserRuleCall_4_0_0; }

		//("+" lhs+=RuleObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//lhs+=RuleObject
		public Assignment getLhsAssignment_4_1_1() { return cLhsAssignment_4_1_1; }

		//RuleObject
		public RuleCall getLhsRuleObjectParserRuleCall_4_1_1_0() { return cLhsRuleObjectParserRuleCall_4_1_1_0; }

		//"->" | reversible?="<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//reversible?="<->"
		public Assignment getReversibleAssignment_5_1() { return cReversibleAssignment_5_1; }

		//"<->"
		public Keyword getReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0() { return cReversibleLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0; }

		//(rhs+=RuleObject ("+" rhs+=RuleObject)*)?
		public Group getGroup_6() { return cGroup_6; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_0() { return cRhsAssignment_6_0; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_0_0() { return cRhsRuleObjectParserRuleCall_6_0_0; }

		//("+" rhs+=RuleObject)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"+"
		public Keyword getPlusSignKeyword_6_1_0() { return cPlusSignKeyword_6_1_0; }

		//rhs+=RuleObject
		public Assignment getRhsAssignment_6_1_1() { return cRhsAssignment_6_1_1; }

		//RuleObject
		public RuleCall getRhsRuleObjectParserRuleCall_6_1_1_0() { return cRhsRuleObjectParserRuleCall_6_1_1_0; }
	}

	public class RuleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRuleObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cVariableComplexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// left or right hand side of rule
		//RuleObject:
		//	{RuleObject} VariableName | VariableComplex;
		public ParserRule getRule() { return rule; }

		//{RuleObject} VariableName | VariableComplex
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RuleObject} VariableName
		public Group getGroup_0() { return cGroup_0; }

		//{RuleObject}
		public Action getRuleObjectAction_0_0() { return cRuleObjectAction_0_0; }

		//VariableName
		public RuleCall getVariableNameParserRuleCall_0_1() { return cVariableNameParserRuleCall_0_1; }

		//VariableComplex
		public RuleCall getVariableComplexParserRuleCall_1() { return cVariableComplexParserRuleCall_1; }
	}

	public class ATGCDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATGCDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cATGCDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cATGCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandATGCCommandParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsVariableNameParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsVariableNameParserRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		
		//////////////////
		//// atgc rules //
		//////////////////
		//ATGCDefinition:
		//	{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*;
		public ParserRule getRule() { return rule; }

		//{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*
		public Group getGroup() { return cGroup; }

		//{ATGCDefinition}
		public Action getATGCDefinitionAction_0() { return cATGCDefinitionAction_0; }

		//"ATGC"
		public Keyword getATGCKeyword_1() { return cATGCKeyword_1; }

		//command=ATGCCommand
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }

		//ATGCCommand
		public RuleCall getCommandATGCCommandParserRuleCall_2_0() { return cCommandATGCCommandParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//arguments+=VariableName
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//VariableName
		public RuleCall getArgumentsVariableNameParserRuleCall_4_0() { return cArgumentsVariableNameParserRuleCall_4_0; }

		//("," arguments+=VariableName)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//arguments+=VariableName
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }

		//VariableName
		public RuleCall getArgumentsVariableNameParserRuleCall_5_1_0() { return cArgumentsVariableNameParserRuleCall_5_1_0; }
	}

	public class ATGCCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATGCCommand");
		private final Keyword cARRANGEKeyword = (Keyword)rule.eContents().get(1);
		
		//ATGCCommand:
		//	"ARRANGE";
		public ParserRule getRule() { return rule; }

		//"ARRANGE"
		public Keyword getARRANGEKeyword() { return cARRANGEKeyword; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVERIFYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPropertyAlternatives_2_0 = (Alternatives)cPropertyAssignment_2.eContents().get(0);
		private final RuleCall cPropertyProbabilityPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertyAlternatives_2_0.eContents().get(0);
		private final RuleCall cPropertyRewardPropertyParserRuleCall_2_0_1 = (RuleCall)cPropertyAlternatives_2_0.eContents().get(1);
		
		///////////////////////////
		//// model checker rules //
		///////////////////////////
		//PropertyDefinition:
		//	{PropertyDefinition} "VERIFY" property=(ProbabilityProperty | RewardProperty);
		public ParserRule getRule() { return rule; }

		//{PropertyDefinition} "VERIFY" property=(ProbabilityProperty | RewardProperty)
		public Group getGroup() { return cGroup; }

		//{PropertyDefinition}
		public Action getPropertyDefinitionAction_0() { return cPropertyDefinitionAction_0; }

		//"VERIFY"
		public Keyword getVERIFYKeyword_1() { return cVERIFYKeyword_1; }

		//property=(ProbabilityProperty | RewardProperty)
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//ProbabilityProperty | RewardProperty
		public Alternatives getPropertyAlternatives_2_0() { return cPropertyAlternatives_2_0; }

		//ProbabilityProperty
		public RuleCall getPropertyProbabilityPropertyParserRuleCall_2_0_0() { return cPropertyProbabilityPropertyParserRuleCall_2_0_0; }

		//RewardProperty
		public RuleCall getPropertyRewardPropertyParserRuleCall_2_0_1() { return cPropertyRewardPropertyParserRuleCall_2_0_1; }
	}

	public class ProbabilityPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProbabilityProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProbabilityPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateFormula1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateFormula1StateFormulaParserRuleCall_1_0 = (RuleCall)cStateFormula1Assignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0_0 = (Alternatives)cAlternatives_2_0_0.eContents().get(0);
		private final Assignment cIsEventuallyAssignment_2_0_0_0_0 = (Assignment)cAlternatives_2_0_0_0.eContents().get(0);
		private final Keyword cIsEventuallyEVENTUALLYHOLDSKeyword_2_0_0_0_0_0 = (Keyword)cIsEventuallyAssignment_2_0_0_0_0.eContents().get(0);
		private final Assignment cIsNeverAssignment_2_0_0_0_1 = (Assignment)cAlternatives_2_0_0_0.eContents().get(1);
		private final Keyword cIsNeverNEVERHOLDSKeyword_2_0_0_0_1_0 = (Keyword)cIsNeverAssignment_2_0_0_0_1.eContents().get(0);
		private final Assignment cIsAlwaysAssignment_2_0_0_0_2 = (Assignment)cAlternatives_2_0_0_0.eContents().get(2);
		private final Keyword cIsAlwaysALWAYSHOLDSKeyword_2_0_0_0_2_0 = (Keyword)cIsAlwaysAssignment_2_0_0_0_2.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_0_1_0 = (Alternatives)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cIsUntilThenAssignment_2_0_0_1_0_0 = (Assignment)cAlternatives_2_0_0_1_0.eContents().get(0);
		private final Keyword cIsUntilThenWILLHOLDUNTILTHENKeyword_2_0_0_1_0_0_0 = (Keyword)cIsUntilThenAssignment_2_0_0_1_0_0.eContents().get(0);
		private final Assignment cIsFollowedByAssignment_2_0_0_1_0_1 = (Assignment)cAlternatives_2_0_0_1_0.eContents().get(1);
		private final Keyword cIsFollowedByISFOLLOWEDBYKeyword_2_0_0_1_0_1_0 = (Keyword)cIsFollowedByAssignment_2_0_0_1_0_1.eContents().get(0);
		private final Assignment cStateFormula2Assignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cStateFormula2StateFormulaParserRuleCall_2_0_0_1_1_0 = (RuleCall)cStateFormula2Assignment_2_0_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Assignment cTimeInstantAssignment_2_0_1_0 = (Assignment)cAlternatives_2_0_1.eContents().get(0);
		private final RuleCall cTimeInstantTimeInstantParserRuleCall_2_0_1_0_0 = (RuleCall)cTimeInstantAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cTimeIntervalAssignment_2_0_1_1 = (Assignment)cAlternatives_2_0_1.eContents().get(1);
		private final RuleCall cTimeIntervalTimeIntervalParserRuleCall_2_0_1_1_0 = (RuleCall)cTimeIntervalAssignment_2_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cAlternatives_2.eContents().get(1);
		private final Assignment cIsSteadyStateAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cIsSteadyStateHOLDSINSTEADYSTATEKeyword_2_1_0_0 = (Keyword)cIsSteadyStateAssignment_2_1_0.eContents().get(0);
		private final Assignment cIsInfinitelyOftenAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final Keyword cIsInfinitelyOftenHOLDSINFINITELYOFTENKeyword_2_1_1_0 = (Keyword)cIsInfinitelyOftenAssignment_2_1_1.eContents().get(0);
		private final Assignment cProbabilityConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProbabilityConstraintProbabilityConstraintParserRuleCall_3_0 = (RuleCall)cProbabilityConstraintAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGIVENKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_4_1_0 = (RuleCall)cInitialConditionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_4_2_1_0 = (RuleCall)cInitialConditionsAssignment_4_2_1.eContents().get(0);
		
		//ProbabilityProperty:
		//	{ProbabilityProperty} stateFormula1=StateFormula (((isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" |
		//	isAlways?="ALWAYS HOLDS") | (isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY")
		//	stateFormula2=StateFormula) (timeInstant=TimeInstant | timeInterval=TimeInterval)? |
		//	(isSteadyState?="HOLDS IN STEADY-STATE" | isInfinitelyOften?="HOLDS INFINITELY OFTEN"))
		//	probabilityConstraint=ProbabilityConstraint? ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//	initialConditions+=PropertyInitialCondition)*)?;
		public ParserRule getRule() { return rule; }

		//{ProbabilityProperty} stateFormula1=StateFormula (((isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" |
		//isAlways?="ALWAYS HOLDS") | (isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY")
		//stateFormula2=StateFormula) (timeInstant=TimeInstant | timeInterval=TimeInterval)? |
		//(isSteadyState?="HOLDS IN STEADY-STATE" | isInfinitelyOften?="HOLDS INFINITELY OFTEN"))
		//probabilityConstraint=ProbabilityConstraint? ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup() { return cGroup; }

		//{ProbabilityProperty}
		public Action getProbabilityPropertyAction_0() { return cProbabilityPropertyAction_0; }

		//stateFormula1=StateFormula
		public Assignment getStateFormula1Assignment_1() { return cStateFormula1Assignment_1; }

		//StateFormula
		public RuleCall getStateFormula1StateFormulaParserRuleCall_1_0() { return cStateFormula1StateFormulaParserRuleCall_1_0; }

		//((isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" | isAlways?="ALWAYS HOLDS") |
		//(isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY") stateFormula2=StateFormula)
		//(timeInstant=TimeInstant | timeInterval=TimeInterval)? | (isSteadyState?="HOLDS IN STEADY-STATE" |
		//isInfinitelyOften?="HOLDS INFINITELY OFTEN")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//((isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" | isAlways?="ALWAYS HOLDS") |
		//(isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY") stateFormula2=StateFormula)
		//(timeInstant=TimeInstant | timeInterval=TimeInterval)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//(isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" | isAlways?="ALWAYS HOLDS") |
		//(isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY") stateFormula2=StateFormula
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" | isAlways?="ALWAYS HOLDS"
		public Alternatives getAlternatives_2_0_0_0() { return cAlternatives_2_0_0_0; }

		//isEventually?="EVENTUALLY HOLDS"
		public Assignment getIsEventuallyAssignment_2_0_0_0_0() { return cIsEventuallyAssignment_2_0_0_0_0; }

		//"EVENTUALLY HOLDS"
		public Keyword getIsEventuallyEVENTUALLYHOLDSKeyword_2_0_0_0_0_0() { return cIsEventuallyEVENTUALLYHOLDSKeyword_2_0_0_0_0_0; }

		//isNever?="NEVER HOLDS"
		public Assignment getIsNeverAssignment_2_0_0_0_1() { return cIsNeverAssignment_2_0_0_0_1; }

		//"NEVER HOLDS"
		public Keyword getIsNeverNEVERHOLDSKeyword_2_0_0_0_1_0() { return cIsNeverNEVERHOLDSKeyword_2_0_0_0_1_0; }

		//isAlways?="ALWAYS HOLDS"
		public Assignment getIsAlwaysAssignment_2_0_0_0_2() { return cIsAlwaysAssignment_2_0_0_0_2; }

		//"ALWAYS HOLDS"
		public Keyword getIsAlwaysALWAYSHOLDSKeyword_2_0_0_0_2_0() { return cIsAlwaysALWAYSHOLDSKeyword_2_0_0_0_2_0; }

		//(isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY") stateFormula2=StateFormula
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }

		//isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY"
		public Alternatives getAlternatives_2_0_0_1_0() { return cAlternatives_2_0_0_1_0; }

		//isUntilThen?="WILL HOLD UNTIL THEN"
		public Assignment getIsUntilThenAssignment_2_0_0_1_0_0() { return cIsUntilThenAssignment_2_0_0_1_0_0; }

		//"WILL HOLD UNTIL THEN"
		public Keyword getIsUntilThenWILLHOLDUNTILTHENKeyword_2_0_0_1_0_0_0() { return cIsUntilThenWILLHOLDUNTILTHENKeyword_2_0_0_1_0_0_0; }

		//isFollowedBy?="IS FOLLOWED BY"
		public Assignment getIsFollowedByAssignment_2_0_0_1_0_1() { return cIsFollowedByAssignment_2_0_0_1_0_1; }

		//"IS FOLLOWED BY"
		public Keyword getIsFollowedByISFOLLOWEDBYKeyword_2_0_0_1_0_1_0() { return cIsFollowedByISFOLLOWEDBYKeyword_2_0_0_1_0_1_0; }

		//stateFormula2=StateFormula
		public Assignment getStateFormula2Assignment_2_0_0_1_1() { return cStateFormula2Assignment_2_0_0_1_1; }

		//StateFormula
		public RuleCall getStateFormula2StateFormulaParserRuleCall_2_0_0_1_1_0() { return cStateFormula2StateFormulaParserRuleCall_2_0_0_1_1_0; }

		//(timeInstant=TimeInstant | timeInterval=TimeInterval)?
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }

		//timeInstant=TimeInstant
		public Assignment getTimeInstantAssignment_2_0_1_0() { return cTimeInstantAssignment_2_0_1_0; }

		//TimeInstant
		public RuleCall getTimeInstantTimeInstantParserRuleCall_2_0_1_0_0() { return cTimeInstantTimeInstantParserRuleCall_2_0_1_0_0; }

		//timeInterval=TimeInterval
		public Assignment getTimeIntervalAssignment_2_0_1_1() { return cTimeIntervalAssignment_2_0_1_1; }

		//TimeInterval
		public RuleCall getTimeIntervalTimeIntervalParserRuleCall_2_0_1_1_0() { return cTimeIntervalTimeIntervalParserRuleCall_2_0_1_1_0; }

		//isSteadyState?="HOLDS IN STEADY-STATE" | isInfinitelyOften?="HOLDS INFINITELY OFTEN"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//isSteadyState?="HOLDS IN STEADY-STATE"
		public Assignment getIsSteadyStateAssignment_2_1_0() { return cIsSteadyStateAssignment_2_1_0; }

		//"HOLDS IN STEADY-STATE"
		public Keyword getIsSteadyStateHOLDSINSTEADYSTATEKeyword_2_1_0_0() { return cIsSteadyStateHOLDSINSTEADYSTATEKeyword_2_1_0_0; }

		//isInfinitelyOften?="HOLDS INFINITELY OFTEN"
		public Assignment getIsInfinitelyOftenAssignment_2_1_1() { return cIsInfinitelyOftenAssignment_2_1_1; }

		//"HOLDS INFINITELY OFTEN"
		public Keyword getIsInfinitelyOftenHOLDSINFINITELYOFTENKeyword_2_1_1_0() { return cIsInfinitelyOftenHOLDSINFINITELYOFTENKeyword_2_1_1_0; }

		//probabilityConstraint=ProbabilityConstraint?
		public Assignment getProbabilityConstraintAssignment_3() { return cProbabilityConstraintAssignment_3; }

		//ProbabilityConstraint
		public RuleCall getProbabilityConstraintProbabilityConstraintParserRuleCall_3_0() { return cProbabilityConstraintProbabilityConstraintParserRuleCall_3_0; }

		//("GIVEN" initialConditions+=PropertyInitialCondition ("," initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"GIVEN"
		public Keyword getGIVENKeyword_4_0() { return cGIVENKeyword_4_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_4_1() { return cInitialConditionsAssignment_4_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_4_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_4_1_0; }

		//("," initialConditions+=PropertyInitialCondition)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_4_2_1() { return cInitialConditionsAssignment_4_2_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_4_2_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_4_2_1_0; }
	}

	public class RewardPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RewardProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRewardPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEXPECTEDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameVariableNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeInstantAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeInstantRewardTimeInstantParserRuleCall_5_0 = (RuleCall)cTimeInstantAssignment_5.eContents().get(0);
		private final Keyword cISKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConcentrationConstraintAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConcentrationConstraintConcentrationConstraintParserRuleCall_7_0 = (RuleCall)cConcentrationConstraintAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cGIVENKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_8_1_0 = (RuleCall)cInitialConditionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cInitialConditionsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cInitialConditionsPropertyInitialConditionParserRuleCall_8_2_1_0 = (RuleCall)cInitialConditionsAssignment_8_2_1.eContents().get(0);
		
		//RewardProperty:
		//	{RewardProperty} "EXPECTED" "[" name=VariableName "]" timeInstant=RewardTimeInstant "IS "
		//	concentrationConstraint=ConcentrationConstraint ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//	initialConditions+=PropertyInitialCondition)*)?;
		public ParserRule getRule() { return rule; }

		//{RewardProperty} "EXPECTED" "[" name=VariableName "]" timeInstant=RewardTimeInstant "IS "
		//concentrationConstraint=ConcentrationConstraint ("GIVEN" initialConditions+=PropertyInitialCondition (","
		//initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup() { return cGroup; }

		//{RewardProperty}
		public Action getRewardPropertyAction_0() { return cRewardPropertyAction_0; }

		//"EXPECTED"
		public Keyword getEXPECTEDKeyword_1() { return cEXPECTEDKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//name=VariableName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_3_0() { return cNameVariableNameParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//timeInstant=RewardTimeInstant
		public Assignment getTimeInstantAssignment_5() { return cTimeInstantAssignment_5; }

		//RewardTimeInstant
		public RuleCall getTimeInstantRewardTimeInstantParserRuleCall_5_0() { return cTimeInstantRewardTimeInstantParserRuleCall_5_0; }

		//"IS "
		public Keyword getISKeyword_6() { return cISKeyword_6; }

		//concentrationConstraint=ConcentrationConstraint
		public Assignment getConcentrationConstraintAssignment_7() { return cConcentrationConstraintAssignment_7; }

		//ConcentrationConstraint
		public RuleCall getConcentrationConstraintConcentrationConstraintParserRuleCall_7_0() { return cConcentrationConstraintConcentrationConstraintParserRuleCall_7_0; }

		//("GIVEN" initialConditions+=PropertyInitialCondition ("," initialConditions+=PropertyInitialCondition)*)?
		public Group getGroup_8() { return cGroup_8; }

		//"GIVEN"
		public Keyword getGIVENKeyword_8_0() { return cGIVENKeyword_8_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_8_1() { return cInitialConditionsAssignment_8_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_8_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_8_1_0; }

		//("," initialConditions+=PropertyInitialCondition)*
		public Group getGroup_8_2() { return cGroup_8_2; }

		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }

		//initialConditions+=PropertyInitialCondition
		public Assignment getInitialConditionsAssignment_8_2_1() { return cInitialConditionsAssignment_8_2_1; }

		//PropertyInitialCondition
		public RuleCall getInitialConditionsPropertyInitialConditionParserRuleCall_8_2_1_0() { return cInitialConditionsPropertyInitialConditionParserRuleCall_8_2_1_0; }
	}

	public class StateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cConcentrationQuantityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConcentrationQuantityConcentrationQuantityParserRuleCall_3_0 = (RuleCall)cConcentrationQuantityAssignment_3.eContents().get(0);
		
		//StateExpression:
		//	{StateExpression} name=VariableName operator=RelationalOperator concentrationQuantity=ConcentrationQuantity;
		public ParserRule getRule() { return rule; }

		//{StateExpression} name=VariableName operator=RelationalOperator concentrationQuantity=ConcentrationQuantity
		public Group getGroup() { return cGroup; }

		//{StateExpression}
		public Action getStateExpressionAction_0() { return cStateExpressionAction_0; }

		//name=VariableName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableName
		public RuleCall getNameVariableNameParserRuleCall_1_0() { return cNameVariableNameParserRuleCall_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_0() { return cOperatorRelationalOperatorParserRuleCall_2_0; }

		//concentrationQuantity=ConcentrationQuantity
		public Assignment getConcentrationQuantityAssignment_3() { return cConcentrationQuantityAssignment_3; }

		//ConcentrationQuantity
		public RuleCall getConcentrationQuantityConcentrationQuantityParserRuleCall_3_0() { return cConcentrationQuantityConcentrationQuantityParserRuleCall_3_0; }
	}

	public class StateFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStateFormulaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFormulaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cFormulaLeftSquareBracketKeyword_0_1_0 = (Keyword)cFormulaAssignment_0_1.eContents().get(0);
		private final Assignment cAtomicFormulaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAtomicFormulaStateExpressionParserRuleCall_0_2_0 = (RuleCall)cAtomicFormulaAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIsNegationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIsNegationNOTKeyword_1_1_0 = (Keyword)cIsNegationAssignment_1_1.eContents().get(0);
		private final Assignment cNegatedFormulaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNegatedFormulaStateFormulaParserRuleCall_1_2_0 = (RuleCall)cNegatedFormulaAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLeftFormulaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftFormulaStateFormulaParserRuleCall_2_1_0 = (RuleCall)cLeftFormulaAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cIsConjunctionAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final Keyword cIsConjunctionANDKeyword_2_2_0_0 = (Keyword)cIsConjunctionAssignment_2_2_0.eContents().get(0);
		private final Assignment cIsDisjunctionAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final Keyword cIsDisjunctionORKeyword_2_2_1_0 = (Keyword)cIsDisjunctionAssignment_2_2_1.eContents().get(0);
		private final Assignment cIsImplicationAssignment_2_2_2 = (Assignment)cAlternatives_2_2.eContents().get(2);
		private final Keyword cIsImplicationIMPLIESKeyword_2_2_2_0 = (Keyword)cIsImplicationAssignment_2_2_2.eContents().get(0);
		private final Assignment cRightFormulaAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightFormulaStateFormulaParserRuleCall_2_3_0 = (RuleCall)cRightFormulaAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//StateFormula:
		//	{StateFormula} formula="[" atomicFormula=StateExpression "]" | "[" isNegation?="NOT" negatedFormula=StateFormula "]" |
		//	"[" leftFormula=StateFormula (isConjunction?="AND" | isDisjunction?="OR" | isImplication?="IMPLIES")
		//	rightFormula=StateFormula "]";
		public ParserRule getRule() { return rule; }

		//{StateFormula} formula="[" atomicFormula=StateExpression "]" | "[" isNegation?="NOT" negatedFormula=StateFormula "]" |
		//"[" leftFormula=StateFormula (isConjunction?="AND" | isDisjunction?="OR" | isImplication?="IMPLIES")
		//rightFormula=StateFormula "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StateFormula} formula="[" atomicFormula=StateExpression "]"
		public Group getGroup_0() { return cGroup_0; }

		//{StateFormula}
		public Action getStateFormulaAction_0_0() { return cStateFormulaAction_0_0; }

		//formula="["
		public Assignment getFormulaAssignment_0_1() { return cFormulaAssignment_0_1; }

		//"["
		public Keyword getFormulaLeftSquareBracketKeyword_0_1_0() { return cFormulaLeftSquareBracketKeyword_0_1_0; }

		//atomicFormula=StateExpression
		public Assignment getAtomicFormulaAssignment_0_2() { return cAtomicFormulaAssignment_0_2; }

		//StateExpression
		public RuleCall getAtomicFormulaStateExpressionParserRuleCall_0_2_0() { return cAtomicFormulaStateExpressionParserRuleCall_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//"[" isNegation?="NOT" negatedFormula=StateFormula "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//isNegation?="NOT"
		public Assignment getIsNegationAssignment_1_1() { return cIsNegationAssignment_1_1; }

		//"NOT"
		public Keyword getIsNegationNOTKeyword_1_1_0() { return cIsNegationNOTKeyword_1_1_0; }

		//negatedFormula=StateFormula
		public Assignment getNegatedFormulaAssignment_1_2() { return cNegatedFormulaAssignment_1_2; }

		//StateFormula
		public RuleCall getNegatedFormulaStateFormulaParserRuleCall_1_2_0() { return cNegatedFormulaStateFormulaParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//"[" leftFormula=StateFormula (isConjunction?="AND" | isDisjunction?="OR" | isImplication?="IMPLIES")
		//rightFormula=StateFormula "]"
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//leftFormula=StateFormula
		public Assignment getLeftFormulaAssignment_2_1() { return cLeftFormulaAssignment_2_1; }

		//StateFormula
		public RuleCall getLeftFormulaStateFormulaParserRuleCall_2_1_0() { return cLeftFormulaStateFormulaParserRuleCall_2_1_0; }

		//isConjunction?="AND" | isDisjunction?="OR" | isImplication?="IMPLIES"
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//isConjunction?="AND"
		public Assignment getIsConjunctionAssignment_2_2_0() { return cIsConjunctionAssignment_2_2_0; }

		//"AND"
		public Keyword getIsConjunctionANDKeyword_2_2_0_0() { return cIsConjunctionANDKeyword_2_2_0_0; }

		//isDisjunction?="OR"
		public Assignment getIsDisjunctionAssignment_2_2_1() { return cIsDisjunctionAssignment_2_2_1; }

		//"OR"
		public Keyword getIsDisjunctionORKeyword_2_2_1_0() { return cIsDisjunctionORKeyword_2_2_1_0; }

		//isImplication?="IMPLIES"
		public Assignment getIsImplicationAssignment_2_2_2() { return cIsImplicationAssignment_2_2_2; }

		//"IMPLIES"
		public Keyword getIsImplicationIMPLIESKeyword_2_2_2_0() { return cIsImplicationIMPLIESKeyword_2_2_2_0; }

		//rightFormula=StateFormula
		public Assignment getRightFormulaAssignment_2_3() { return cRightFormulaAssignment_2_3; }

		//StateFormula
		public RuleCall getRightFormulaStateFormulaParserRuleCall_2_3_0() { return cRightFormulaStateFormulaParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class TimeInstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeInstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeInstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIsEqualToAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cIsEqualToATKeyword_1_0_0_0 = (Keyword)cIsEqualToAssignment_1_0_0.eContents().get(0);
		private final Assignment cTimeInstantAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTimeInstantINTTerminalRuleCall_1_0_1_0 = (RuleCall)cTimeInstantAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIsLessThanOrEqualAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIsLessThanOrEqualBEFOREKeyword_1_1_0_0 = (Keyword)cIsLessThanOrEqualAssignment_1_1_0.eContents().get(0);
		private final Assignment cTimeInstantAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTimeInstantINTTerminalRuleCall_1_1_1_0 = (RuleCall)cTimeInstantAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cIsGreaterThanOrEqualAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cIsGreaterThanOrEqualAFTERKeyword_1_2_0_0 = (Keyword)cIsGreaterThanOrEqualAssignment_1_2_0.eContents().get(0);
		private final Assignment cTimeInstantAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTimeInstantINTTerminalRuleCall_1_2_1_0 = (RuleCall)cTimeInstantAssignment_1_2_1.eContents().get(0);
		private final Assignment cTimeUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_2_0 = (RuleCall)cTimeUnitAssignment_2.eContents().get(0);
		
		//TimeInstant:
		//	{TimeInstant} (isEqualTo?="AT" timeInstant=INT | isLessThanOrEqual?="BEFORE" timeInstant=INT |
		//	isGreaterThanOrEqual?="AFTER" timeInstant=INT) timeUnit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//{TimeInstant} (isEqualTo?="AT" timeInstant=INT | isLessThanOrEqual?="BEFORE" timeInstant=INT |
		//isGreaterThanOrEqual?="AFTER" timeInstant=INT) timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }

		//{TimeInstant}
		public Action getTimeInstantAction_0() { return cTimeInstantAction_0; }

		//isEqualTo?="AT" timeInstant=INT | isLessThanOrEqual?="BEFORE" timeInstant=INT | isGreaterThanOrEqual?="AFTER"
		//timeInstant=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isEqualTo?="AT" timeInstant=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//isEqualTo?="AT"
		public Assignment getIsEqualToAssignment_1_0_0() { return cIsEqualToAssignment_1_0_0; }

		//"AT"
		public Keyword getIsEqualToATKeyword_1_0_0_0() { return cIsEqualToATKeyword_1_0_0_0; }

		//timeInstant=INT
		public Assignment getTimeInstantAssignment_1_0_1() { return cTimeInstantAssignment_1_0_1; }

		//INT
		public RuleCall getTimeInstantINTTerminalRuleCall_1_0_1_0() { return cTimeInstantINTTerminalRuleCall_1_0_1_0; }

		//isLessThanOrEqual?="BEFORE" timeInstant=INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//isLessThanOrEqual?="BEFORE"
		public Assignment getIsLessThanOrEqualAssignment_1_1_0() { return cIsLessThanOrEqualAssignment_1_1_0; }

		//"BEFORE"
		public Keyword getIsLessThanOrEqualBEFOREKeyword_1_1_0_0() { return cIsLessThanOrEqualBEFOREKeyword_1_1_0_0; }

		//timeInstant=INT
		public Assignment getTimeInstantAssignment_1_1_1() { return cTimeInstantAssignment_1_1_1; }

		//INT
		public RuleCall getTimeInstantINTTerminalRuleCall_1_1_1_0() { return cTimeInstantINTTerminalRuleCall_1_1_1_0; }

		//isGreaterThanOrEqual?="AFTER" timeInstant=INT
		public Group getGroup_1_2() { return cGroup_1_2; }

		//isGreaterThanOrEqual?="AFTER"
		public Assignment getIsGreaterThanOrEqualAssignment_1_2_0() { return cIsGreaterThanOrEqualAssignment_1_2_0; }

		//"AFTER"
		public Keyword getIsGreaterThanOrEqualAFTERKeyword_1_2_0_0() { return cIsGreaterThanOrEqualAFTERKeyword_1_2_0_0; }

		//timeInstant=INT
		public Assignment getTimeInstantAssignment_1_2_1() { return cTimeInstantAssignment_1_2_1; }

		//INT
		public RuleCall getTimeInstantINTTerminalRuleCall_1_2_1_0() { return cTimeInstantINTTerminalRuleCall_1_2_1_0; }

		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_2() { return cTimeUnitAssignment_2; }

		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_2_0() { return cTimeUnitTimeUnitParserRuleCall_2_0; }
	}

	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeIntervalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWITHINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLowerBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerBoundINTTerminalRuleCall_3_0 = (RuleCall)cLowerBoundAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpperBoundINTTerminalRuleCall_5_0 = (RuleCall)cUpperBoundAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTimeUnitAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_7_0 = (RuleCall)cTimeUnitAssignment_7.eContents().get(0);
		
		//TimeInterval:
		//	{TimeInterval} "WITHIN" "[" lowerBound=INT "," upperBound=INT "]" timeUnit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//{TimeInterval} "WITHIN" "[" lowerBound=INT "," upperBound=INT "]" timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }

		//{TimeInterval}
		public Action getTimeIntervalAction_0() { return cTimeIntervalAction_0; }

		//"WITHIN"
		public Keyword getWITHINKeyword_1() { return cWITHINKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//lowerBound=INT
		public Assignment getLowerBoundAssignment_3() { return cLowerBoundAssignment_3; }

		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_3_0() { return cLowerBoundINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//upperBound=INT
		public Assignment getUpperBoundAssignment_5() { return cUpperBoundAssignment_5; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_5_0() { return cUpperBoundINTTerminalRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_7() { return cTimeUnitAssignment_7; }

		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_7_0() { return cTimeUnitTimeUnitParserRuleCall_7_0; }
	}

	public class RewardTimeInstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RewardTimeInstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRewardTimeInstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsEqualToAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsEqualToATKeyword_1_0_0 = (Keyword)cIsEqualToAssignment_1_0.eContents().get(0);
		private final Assignment cIsLessThanOrEqualAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsLessThanOrEqualWITHINKeyword_1_1_0 = (Keyword)cIsLessThanOrEqualAssignment_1_1.eContents().get(0);
		private final Assignment cTimeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeValueINTTerminalRuleCall_2_0 = (RuleCall)cTimeValueAssignment_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_3_0 = (RuleCall)cTimeUnitAssignment_3.eContents().get(0);
		
		//RewardTimeInstant:
		//	{RewardTimeInstant} (isEqualTo?="AT" | isLessThanOrEqual?="WITHIN") timeValue=INT timeUnit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//{RewardTimeInstant} (isEqualTo?="AT" | isLessThanOrEqual?="WITHIN") timeValue=INT timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }

		//{RewardTimeInstant}
		public Action getRewardTimeInstantAction_0() { return cRewardTimeInstantAction_0; }

		//isEqualTo?="AT" | isLessThanOrEqual?="WITHIN"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isEqualTo?="AT"
		public Assignment getIsEqualToAssignment_1_0() { return cIsEqualToAssignment_1_0; }

		//"AT"
		public Keyword getIsEqualToATKeyword_1_0_0() { return cIsEqualToATKeyword_1_0_0; }

		//isLessThanOrEqual?="WITHIN"
		public Assignment getIsLessThanOrEqualAssignment_1_1() { return cIsLessThanOrEqualAssignment_1_1; }

		//"WITHIN"
		public Keyword getIsLessThanOrEqualWITHINKeyword_1_1_0() { return cIsLessThanOrEqualWITHINKeyword_1_1_0; }

		//timeValue=INT
		public Assignment getTimeValueAssignment_2() { return cTimeValueAssignment_2; }

		//INT
		public RuleCall getTimeValueINTTerminalRuleCall_2_0() { return cTimeValueINTTerminalRuleCall_2_0; }

		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3() { return cTimeUnitAssignment_3; }

		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_3_0() { return cTimeUnitTimeUnitParserRuleCall_3_0; }
	}

	public class ProbabilityConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProbabilityConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProbabilityConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWITHPROBABILITYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_2_0_0_0 = (RuleCall)cOperatorAssignment_2_0_0.eContents().get(0);
		private final Assignment cProbabilityAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cProbabilityUnitIntervalParserRuleCall_2_0_1_0 = (RuleCall)cProbabilityAssignment_2_0_1.eContents().get(0);
		private final Assignment cHasUnknownProbabilityAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cHasUnknownProbabilityQuestionMarkKeyword_2_1_0 = (Keyword)cHasUnknownProbabilityAssignment_2_1.eContents().get(0);
		
		//ProbabilityConstraint:
		//	{ProbabilityConstraint} "WITH PROBABILITY" (operator=RelationalOperator probability=UnitInterval |
		//	hasUnknownProbability?="?");
		public ParserRule getRule() { return rule; }

		//{ProbabilityConstraint} "WITH PROBABILITY" (operator=RelationalOperator probability=UnitInterval |
		//hasUnknownProbability?="?")
		public Group getGroup() { return cGroup; }

		//{ProbabilityConstraint}
		public Action getProbabilityConstraintAction_0() { return cProbabilityConstraintAction_0; }

		//"WITH PROBABILITY"
		public Keyword getWITHPROBABILITYKeyword_1() { return cWITHPROBABILITYKeyword_1; }

		//operator=RelationalOperator probability=UnitInterval | hasUnknownProbability?="?"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//operator=RelationalOperator probability=UnitInterval
		public Group getGroup_2_0() { return cGroup_2_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_2_0_0() { return cOperatorAssignment_2_0_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_2_0_0_0() { return cOperatorRelationalOperatorParserRuleCall_2_0_0_0; }

		//probability=UnitInterval
		public Assignment getProbabilityAssignment_2_0_1() { return cProbabilityAssignment_2_0_1; }

		//UnitInterval
		public RuleCall getProbabilityUnitIntervalParserRuleCall_2_0_1_0() { return cProbabilityUnitIntervalParserRuleCall_2_0_1_0; }

		//hasUnknownProbability?="?"
		public Assignment getHasUnknownProbabilityAssignment_2_1() { return cHasUnknownProbabilityAssignment_2_1; }

		//"?"
		public Keyword getHasUnknownProbabilityQuestionMarkKeyword_2_1_0() { return cHasUnknownProbabilityQuestionMarkKeyword_2_1_0; }
	}

	public class ConcentrationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcentrationConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConcentrationConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperatorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_0_1_0_0 = (RuleCall)cOperatorAssignment_0_1_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_0_1_1_0 = (RuleCall)cValueAssignment_0_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cUnitConcentrationUnitParserRuleCall_0_1_2_0 = (RuleCall)cUnitAssignment_0_1_2.eContents().get(0);
		private final Assignment cIsUnknownAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsUnknownQuestionMarkKeyword_1_0 = (Keyword)cIsUnknownAssignment_1.eContents().get(0);
		
		//ConcentrationConstraint:
		//	{ConcentrationConstraint} (operator=RelationalOperator value=REAL unit=ConcentrationUnit) | isUnknown?="?";
		public ParserRule getRule() { return rule; }

		//{ConcentrationConstraint} (operator=RelationalOperator value=REAL unit=ConcentrationUnit) | isUnknown?="?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ConcentrationConstraint} (operator=RelationalOperator value=REAL unit=ConcentrationUnit)
		public Group getGroup_0() { return cGroup_0; }

		//{ConcentrationConstraint}
		public Action getConcentrationConstraintAction_0_0() { return cConcentrationConstraintAction_0_0; }

		//operator=RelationalOperator value=REAL unit=ConcentrationUnit
		public Group getGroup_0_1() { return cGroup_0_1; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_0_1_0() { return cOperatorAssignment_0_1_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_0_1_0_0() { return cOperatorRelationalOperatorParserRuleCall_0_1_0_0; }

		//value=REAL
		public Assignment getValueAssignment_0_1_1() { return cValueAssignment_0_1_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_0_1_1_0() { return cValueREALParserRuleCall_0_1_1_0; }

		//unit=ConcentrationUnit
		public Assignment getUnitAssignment_0_1_2() { return cUnitAssignment_0_1_2; }

		//ConcentrationUnit
		public RuleCall getUnitConcentrationUnitParserRuleCall_0_1_2_0() { return cUnitConcentrationUnitParserRuleCall_0_1_2_0; }

		//isUnknown?="?"
		public Assignment getIsUnknownAssignment_1() { return cIsUnknownAssignment_1; }

		//"?"
		public Keyword getIsUnknownQuestionMarkKeyword_1_0() { return cIsUnknownQuestionMarkKeyword_1_0; }
	}

	public class PropertyInitialConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyInitialCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyInitialConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableAssignmentObjectParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueConcentrationQuantityParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////StateFormula:
		////	{StateFormula}
		////'[' stateFormula+=StateFormula (BooleanOperator stateFormula+=StateFormula)* ']'
		//PropertyInitialCondition:
		//	{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=ConcentrationQuantity;
		public ParserRule getRule() { return rule; }

		//{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=ConcentrationQuantity
		public Group getGroup() { return cGroup; }

		//{PropertyInitialCondition}
		public Action getPropertyInitialConditionAction_0() { return cPropertyInitialConditionAction_0; }

		//variable=VariableAssignmentObject
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAssignmentObject
		public RuleCall getVariableVariableAssignmentObjectParserRuleCall_1_0() { return cVariableVariableAssignmentObjectParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=ConcentrationQuantity
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ConcentrationQuantity
		public RuleCall getValueConcentrationQuantityParserRuleCall_3_0() { return cValueConcentrationQuantityParserRuleCall_3_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////
		//// basic types //
		///////////////////
		//REAL:
		//	Decimal | DecimalExp;
		public ParserRule getRule() { return rule; }

		//Decimal | DecimalExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decimal
		public RuleCall getDecimalParserRuleCall_0() { return cDecimalParserRuleCall_0; }

		//DecimalExp
		public RuleCall getDecimalExpParserRuleCall_1() { return cDecimalExpParserRuleCall_1; }
	}

	public class UnitIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitInterval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitOneFullStopDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDigitZeroFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//UnitInterval:
		//	"1.0" | "." INT* | "0." INT*;
		public ParserRule getRule() { return rule; }

		//"1.0" | "." INT* | "0." INT*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"1.0"
		public Keyword getDigitOneFullStopDigitZeroKeyword_0() { return cDigitOneFullStopDigitZeroKeyword_0; }

		//"." INT*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT*
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//"0." INT*
		public Group getGroup_2() { return cGroup_2; }

		//"0."
		public Keyword getDigitZeroFullStopKeyword_2_0() { return cDigitZeroFullStopKeyword_2_0; }

		//INT*
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Decimal hidden():
		//	("+" | "-")? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DecimalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cEKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DecimalExp hidden():
		//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//"E" | "e"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"E"
		public Keyword getEKeyword_3_0() { return cEKeyword_3_0; }

		//"e"
		public Keyword getEKeyword_3_1() { return cEKeyword_3_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"+"
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}

	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TimeUnit:
		//	"s" | "min" | "mins";
		public ParserRule getRule() { return rule; }

		//"s" | "min" | "mins"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"s"
		public Keyword getSKeyword_0() { return cSKeyword_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }

		//"mins"
		public Keyword getMinsKeyword_2() { return cMinsKeyword_2; }
	}

	public class FluxUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FluxUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cS1Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMin1Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FluxUnit:
		//	"s^-1" | "min^-1";
		public ParserRule getRule() { return rule; }

		//"s^-1" | "min^-1"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"s^-1"
		public Keyword getS1Keyword_0() { return cS1Keyword_0; }

		//"min^-1"
		public Keyword getMin1Keyword_1() { return cMin1Keyword_1; }
	}

	public class ConcentrationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcentrationUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNMKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPMKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFMKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMoleculeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMoleculesKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ConcentrationUnit:
		//	"M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules";
		public ParserRule getRule() { return rule; }

		//"M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"M"
		public Keyword getMKeyword_0() { return cMKeyword_0; }

		//"mM"
		public Keyword getMMKeyword_1() { return cMMKeyword_1; }

		//"uM"
		public Keyword getUMKeyword_2() { return cUMKeyword_2; }

		//"nM"
		public Keyword getNMKeyword_3() { return cNMKeyword_3; }

		//"pM"
		public Keyword getPMKeyword_4() { return cPMKeyword_4; }

		//"fM"
		public Keyword getFMKeyword_5() { return cFMKeyword_5; }

		//"molecule"
		public Keyword getMoleculeKeyword_6() { return cMoleculeKeyword_6; }

		//"molecules"
		public Keyword getMoleculesKeyword_7() { return cMoleculesKeyword_7; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeUnitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFluxUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConcentrationUnitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Unit:
		//	TimeUnit | FluxUnit | ConcentrationUnit;
		public ParserRule getRule() { return rule; }

		//TimeUnit | FluxUnit | ConcentrationUnit
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimeUnit
		public RuleCall getTimeUnitParserRuleCall_0() { return cTimeUnitParserRuleCall_0; }

		//FluxUnit
		public RuleCall getFluxUnitParserRuleCall_1() { return cFluxUnitParserRuleCall_1; }

		//ConcentrationUnit
		public RuleCall getConcentrationUnitParserRuleCall_2() { return cConcentrationUnitParserRuleCall_2; }
	}

	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitsUnitParserRuleCall_2_0 = (RuleCall)cUnitsAssignment_2.eContents().get(0);
		
		//// a quantity with units
		//Quantity:
		//	{Quantity} value=REAL units=Unit;
		public ParserRule getRule() { return rule; }

		//{Quantity} value=REAL units=Unit
		public Group getGroup() { return cGroup; }

		//{Quantity}
		public Action getQuantityAction_0() { return cQuantityAction_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_1_0() { return cValueREALParserRuleCall_1_0; }

		//units=Unit
		public Assignment getUnitsAssignment_2() { return cUnitsAssignment_2; }

		//Unit
		public RuleCall getUnitsUnitParserRuleCall_2_0() { return cUnitsUnitParserRuleCall_2_0; }
	}

	public class ConcentrationQuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcentrationQuantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcentrationQuantityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitConcentrationUnitParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//ConcentrationQuantity:
		//	{ConcentrationQuantity} value=REAL unit=ConcentrationUnit;
		public ParserRule getRule() { return rule; }

		//{ConcentrationQuantity} value=REAL unit=ConcentrationUnit
		public Group getGroup() { return cGroup; }

		//{ConcentrationQuantity}
		public Action getConcentrationQuantityAction_0() { return cConcentrationQuantityAction_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_1_0() { return cValueREALParserRuleCall_1_0; }

		//unit=ConcentrationUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//ConcentrationUnit
		public RuleCall getUnitConcentrationUnitParserRuleCall_2_0() { return cUnitConcentrationUnitParserRuleCall_2_0; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// relational operators
		//RelationalOperator:
		//	"==" | "!=" | "<" | ">" | "<=" | ">=";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "<" | ">" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cORKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIMPLIESKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// boolean operator
		//BooleanOperator:
		//	"NOT" | "AND" | "OR" | "IMPLIES";
		public ParserRule getRule() { return rule; }

		//"NOT" | "AND" | "OR" | "IMPLIES"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NOT"
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//"AND"
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }

		//"OR"
		public Keyword getORKeyword_2() { return cORKeyword_2; }

		//"IMPLIES"
		public Keyword getIMPLIESKeyword_3() { return cIMPLIESKeyword_3; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// qualified name
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesAtomicVariableExpressionObjectParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0 = (RuleCall)cEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//List:
		//	{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]";
		public ParserRule getRule() { return rule; }

		//{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]"
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//entries+=AtomicVariableExpressionObject
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }

		//AtomicVariableExpressionObject
		public RuleCall getEntriesAtomicVariableExpressionObjectParserRuleCall_2_0() { return cEntriesAtomicVariableExpressionObjectParserRuleCall_2_0; }

		//("," entries+=AtomicVariableExpressionObject)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//entries+=AtomicVariableExpressionObject
		public Assignment getEntriesAssignment_3_1() { return cEntriesAssignment_3_1; }

		//AtomicVariableExpressionObject
		public RuleCall getEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0() { return cEntriesAtomicVariableExpressionObjectParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	
	
	private ModelElements pModel;
	private ModelMemberElements pModelMember;
	private ImportStatementElements pImportStatement;
	private FunctionTypeElements pFunctionType;
	private FunctionDefinitionElements pFunctionDefinition;
	private ProcessBodyElements pProcessBody;
	private SystemBodyElements pSystemBody;
	private PlasmidBodyElements pPlasmidBody;
	private ChromosomeBodyElements pChromosomeBody;
	private CellBodyElements pCellBody;
	private RegionBodyElements pRegionBody;
	private CustomFunctionBodyElements pCustomFunctionBody;
	private ProcessBodyMemberElements pProcessBodyMember;
	private SystemBodyMemberElements pSystemBodyMember;
	private PlasmidBodyMemberElements pPlasmidBodyMember;
	private ChromosomeBodyMemberElements pChromosomeBodyMember;
	private CellBodyMemberElements pCellBodyMember;
	private RegionBodyMemberElements pRegionBodyMember;
	private CustomFunctionBodyMemberElements pCustomFunctionBodyMember;
	private FunctionParameterMemberElements pFunctionParameterMember;
	private FunctionParameterScopeElements pFunctionParameterScope;
	private FunctionUseMemberElements pFunctionUseMember;
	private DeviceDefinitionElements pDeviceDefinition;
	private DeviceMembersElements pDeviceMembers;
	private ProcessInstantiationElements pProcessInstantiation;
	private SystemInstantiationElements pSystemInstantiation;
	private PlasmidInstantiationElements pPlasmidInstantiation;
	private ChromosomeInstantiationElements pChromosomeInstantiation;
	private CellInstantiationElements pCellInstantiation;
	private VariableNameElements pVariableName;
	private VariableTypeElements pVariableType;
	private VariableComplexElements pVariableComplex;
	private VariableAttributeElements pVariableAttribute;
	private VariableDefinitionElements pVariableDefinition;
	private VariableQualifierElements pVariableQualifier;
	private VariableDefinitionBuiltInElements pVariableDefinitionBuiltIn;
	private VariableDefinitionUserDefinedElements pVariableDefinitionUserDefined;
	private VariableDefinitionCollectionElements pVariableDefinitionCollection;
	private CollectionIDElements pCollectionID;
	private VariableDefinitionBasicElements pVariableDefinitionBasic;
	private ParameterAssignmentElements pParameterAssignment;
	private VariableAssignmentElements pVariableAssignment;
	private VariableAssignmentObjectElements pVariableAssignmentObject;
	private VariableExpressionElements pVariableExpression;
	private VariableExpressionObjectElements pVariableExpressionObject;
	private AtomicVariableExpressionObjectElements pAtomicVariableExpressionObject;
	private CompoundVariableExpressionObjectElements pCompoundVariableExpressionObject;
	private VariableExpressionOperatorElements pVariableExpressionOperator;
	private RuleDefinitionElements pRuleDefinition;
	private RuleObjectElements pRuleObject;
	private ATGCDefinitionElements pATGCDefinition;
	private ATGCCommandElements pATGCCommand;
	private PropertyDefinitionElements pPropertyDefinition;
	private ProbabilityPropertyElements pProbabilityProperty;
	private RewardPropertyElements pRewardProperty;
	private StateExpressionElements pStateExpression;
	private StateFormulaElements pStateFormula;
	private TimeInstantElements pTimeInstant;
	private TimeIntervalElements pTimeInterval;
	private RewardTimeInstantElements pRewardTimeInstant;
	private ProbabilityConstraintElements pProbabilityConstraint;
	private ConcentrationConstraintElements pConcentrationConstraint;
	private PropertyInitialConditionElements pPropertyInitialCondition;
	private REALElements pREAL;
	private UnitIntervalElements pUnitInterval;
	private DecimalElements pDecimal;
	private DecimalExpElements pDecimalExp;
	private TimeUnitElements pTimeUnit;
	private FluxUnitElements pFluxUnit;
	private ConcentrationUnitElements pConcentrationUnit;
	private UnitElements pUnit;
	private QuantityElements pQuantity;
	private ConcentrationQuantityElements pConcentrationQuantity;
	private RelationalOperatorElements pRelationalOperator;
	private BooleanOperatorElements pBooleanOperator;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private ListElements pList;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IblGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("roadblock.xtext.ibl.Ibl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////////////////
	//// top level rules //
	///////////////////////
	//// a model is composed of top level model members
	//Model:
	//	{Model} members+=ModelMember*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// model members are an import statement, variable definition or function definition
	//ModelMember:
	//	ImportStatement | FunctionDefinition;
	public ModelMemberElements getModelMemberAccess() {
		return (pModelMember != null) ? pModelMember : (pModelMember = new ModelMemberElements());
	}
	
	public ParserRule getModelMemberRule() {
		return getModelMemberAccess().getRule();
	}

	////////////////////////
	//// import statement //
	////////////////////////
	//ImportStatement:
	//	{Import} "import" importedNamespace=QualifiedNameWithWildcard;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	///////////////////////////
	//// Function definition //
	///////////////////////////
	//// function types
	//FunctionType:
	//	"PROCESS" | "SYSTEM" | "CHROMOSOME" | "PLASMID" | "CELL" | "REGION";
	public FunctionTypeElements getFunctionTypeAccess() {
		return (pFunctionType != null) ? pFunctionType : (pFunctionType = new FunctionTypeElements());
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}

	//// a function definition
	//FunctionDefinition:
	//	{FunctionDefinition} "define" name=VariableName "typeof" functionBody=(ProcessBody | SystemBody | PlasmidBody |
	//	ChromosomeBody | CellBody | RegionBody | CustomFunctionBody) ("USES" uses+=FunctionUseMember (","
	//	uses+=FunctionUseMember)*)?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//// Process body definition
	//ProcessBody:
	//	{ProcessBody} "PROCESS" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
	//	members+=ProcessBodyMember* "}";
	public ProcessBodyElements getProcessBodyAccess() {
		return (pProcessBody != null) ? pProcessBody : (pProcessBody = new ProcessBodyElements());
	}
	
	public ParserRule getProcessBodyRule() {
		return getProcessBodyAccess().getRule();
	}

	//// System body definition
	//SystemBody:
	//	{SystemBody} "SYSTEM" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
	//	members+=SystemBodyMember* "}";
	public SystemBodyElements getSystemBodyAccess() {
		return (pSystemBody != null) ? pSystemBody : (pSystemBody = new SystemBodyElements());
	}
	
	public ParserRule getSystemBodyRule() {
		return getSystemBodyAccess().getRule();
	}

	//// Plasmid body definition
	//PlasmidBody:
	//	{PlasmidBody} "PLASMID" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
	//	members+=PlasmidBodyMember* "}";
	public PlasmidBodyElements getPlasmidBodyAccess() {
		return (pPlasmidBody != null) ? pPlasmidBody : (pPlasmidBody = new PlasmidBodyElements());
	}
	
	public ParserRule getPlasmidBodyRule() {
		return getPlasmidBodyAccess().getRule();
	}

	//// Chromosome body definition
	//ChromosomeBody:
	//	{ChromosomeBody} "CHROMOSOME" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)?
	//	")" "{" members+=ChromosomeBodyMember* "}";
	public ChromosomeBodyElements getChromosomeBodyAccess() {
		return (pChromosomeBody != null) ? pChromosomeBody : (pChromosomeBody = new ChromosomeBodyElements());
	}
	
	public ParserRule getChromosomeBodyRule() {
		return getChromosomeBodyAccess().getRule();
	}

	//// Cell body definition
	//CellBody:
	//	{CellBody} "CELL" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
	//	members+=CellBodyMember* "}";
	public CellBodyElements getCellBodyAccess() {
		return (pCellBody != null) ? pCellBody : (pCellBody = new CellBodyElements());
	}
	
	public ParserRule getCellBodyRule() {
		return getCellBodyAccess().getRule();
	}

	//// Region body definition
	//RegionBody:
	//	{RegionBody} "REGION" "(" (parameters+=FunctionParameterMember ("," parameters+=FunctionParameterMember)*)? ")" "{"
	//	members+=RegionBodyMember* "}";
	public RegionBodyElements getRegionBodyAccess() {
		return (pRegionBody != null) ? pRegionBody : (pRegionBody = new RegionBodyElements());
	}
	
	public ParserRule getRegionBodyRule() {
		return getRegionBodyAccess().getRule();
	}

	//// User defined function body definition
	//CustomFunctionBody:
	//	{CustomFunctionBody} functionType=VariableName "(" (parameters+=FunctionParameterMember (","
	//	parameters+=FunctionParameterMember)*)? ")" "{" members+=CustomFunctionBodyMember* "}";
	public CustomFunctionBodyElements getCustomFunctionBodyAccess() {
		return (pCustomFunctionBody != null) ? pCustomFunctionBody : (pCustomFunctionBody = new CustomFunctionBodyElements());
	}
	
	public ParserRule getCustomFunctionBodyRule() {
		return getCustomFunctionBodyAccess().getRule();
	}

	////////////////////
	//// Body members //
	////////////////////
	//// Process definition body member
	//ProcessBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ProcessInstantiation;
	public ProcessBodyMemberElements getProcessBodyMemberAccess() {
		return (pProcessBodyMember != null) ? pProcessBodyMember : (pProcessBodyMember = new ProcessBodyMemberElements());
	}
	
	public ParserRule getProcessBodyMemberRule() {
		return getProcessBodyMemberAccess().getRule();
	}

	//// System definition body member
	//SystemBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
	//	ProcessInstantiation;
	public SystemBodyMemberElements getSystemBodyMemberAccess() {
		return (pSystemBodyMember != null) ? pSystemBodyMember : (pSystemBodyMember = new SystemBodyMemberElements());
	}
	
	public ParserRule getSystemBodyMemberRule() {
		return getSystemBodyMemberAccess().getRule();
	}

	//// Plasmid definition body member
	//PlasmidBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
	//	ProcessInstantiation | SystemInstantiation;
	public PlasmidBodyMemberElements getPlasmidBodyMemberAccess() {
		return (pPlasmidBodyMember != null) ? pPlasmidBodyMember : (pPlasmidBodyMember = new PlasmidBodyMemberElements());
	}
	
	public ParserRule getPlasmidBodyMemberRule() {
		return getPlasmidBodyMemberAccess().getRule();
	}

	//// Chromosome definition body member
	//ChromosomeBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
	//	ProcessInstantiation | SystemInstantiation;
	public ChromosomeBodyMemberElements getChromosomeBodyMemberAccess() {
		return (pChromosomeBodyMember != null) ? pChromosomeBodyMember : (pChromosomeBodyMember = new ChromosomeBodyMemberElements());
	}
	
	public ParserRule getChromosomeBodyMemberRule() {
		return getChromosomeBodyMemberAccess().getRule();
	}

	//// Cell definition body member
	//CellBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
	//	ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation;
	public CellBodyMemberElements getCellBodyMemberAccess() {
		return (pCellBodyMember != null) ? pCellBodyMember : (pCellBodyMember = new CellBodyMemberElements());
	}
	
	public ParserRule getCellBodyMemberRule() {
		return getCellBodyMemberAccess().getRule();
	}

	//// Region definition body member
	//RegionBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | CellInstantiation;
	public RegionBodyMemberElements getRegionBodyMemberAccess() {
		return (pRegionBodyMember != null) ? pRegionBodyMember : (pRegionBodyMember = new RegionBodyMemberElements());
	}
	
	public ParserRule getRegionBodyMemberRule() {
		return getRegionBodyMemberAccess().getRule();
	}

	//// User defined function body member
	//CustomFunctionBodyMember:
	//	RuleDefinition | VariableDefinition | VariableAssignment | ATGCDefinition | PropertyDefinition | DeviceDefinition |
	//	ProcessInstantiation | SystemInstantiation | PlasmidInstantiation | ChromosomeInstantiation;
	public CustomFunctionBodyMemberElements getCustomFunctionBodyMemberAccess() {
		return (pCustomFunctionBodyMember != null) ? pCustomFunctionBodyMember : (pCustomFunctionBodyMember = new CustomFunctionBodyMemberElements());
	}
	
	public ParserRule getCustomFunctionBodyMemberRule() {
		return getCustomFunctionBodyMemberAccess().getRule();
	}

	////////////////////////
	//// function members //
	////////////////////////
	//// function parameter member
	//FunctionParameterMember:
	//	(type=VariableType | collection=CollectionID "<" type=(VariableType | VariableName) ">") name=VariableName (":"
	//	scope=FunctionParameterScope)?;
	public FunctionParameterMemberElements getFunctionParameterMemberAccess() {
		return (pFunctionParameterMember != null) ? pFunctionParameterMember : (pFunctionParameterMember = new FunctionParameterMemberElements());
	}
	
	public ParserRule getFunctionParameterMemberRule() {
		return getFunctionParameterMemberAccess().getRule();
	}

	//// allowed scope of function parameters
	//FunctionParameterScope:
	//	"input" | "output" | "optional";
	public FunctionParameterScopeElements getFunctionParameterScopeAccess() {
		return (pFunctionParameterScope != null) ? pFunctionParameterScope : (pFunctionParameterScope = new FunctionParameterScopeElements());
	}
	
	public ParserRule getFunctionParameterScopeRule() {
		return getFunctionParameterScopeAccess().getRule();
	}

	//// function use member
	//FunctionUseMember:
	//	type=VariableType name=VariableName;
	public FunctionUseMemberElements getFunctionUseMemberAccess() {
		return (pFunctionUseMember != null) ? pFunctionUseMember : (pFunctionUseMember = new FunctionUseMemberElements());
	}
	
	public ParserRule getFunctionUseMemberRule() {
		return getFunctionUseMemberAccess().getRule();
	}

	///////////////
	//// devices //
	//////////////
	//// device definition
	//DeviceDefinition:
	//	{DeviceDefinition} "DEVICE" name=VariableName "=" "new" "DEVICE" "(" "parts" "=" parts=List ")" "(" ("input" "="
	//	input=List)? ("," "output" "=" outputput=List)? ")" "{" members+=DeviceMembers* "}";
	public DeviceDefinitionElements getDeviceDefinitionAccess() {
		return (pDeviceDefinition != null) ? pDeviceDefinition : (pDeviceDefinition = new DeviceDefinitionElements());
	}
	
	public ParserRule getDeviceDefinitionRule() {
		return getDeviceDefinitionAccess().getRule();
	}

	//DeviceMembers:
	//	VariableDefinition | PropertyDefinition | ATGCDefinition | ProcessInstantiation;
	public DeviceMembersElements getDeviceMembersAccess() {
		return (pDeviceMembers != null) ? pDeviceMembers : (pDeviceMembers = new DeviceMembersElements());
	}
	
	public ParserRule getDeviceMembersRule() {
		return getDeviceMembersAccess().getRule();
	}

	//////////////////////
	//// instantiations //
	//////////////////////
	//// System instantiation 
	//ProcessInstantiation:
	//	{ProcessInstantiation} "PROCESS" name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public ProcessInstantiationElements getProcessInstantiationAccess() {
		return (pProcessInstantiation != null) ? pProcessInstantiation : (pProcessInstantiation = new ProcessInstantiationElements());
	}
	
	public ParserRule getProcessInstantiationRule() {
		return getProcessInstantiationAccess().getRule();
	}

	//// System instantiation 
	//SystemInstantiation:
	//	{SystemInstantiation} "SYSTEM" name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public SystemInstantiationElements getSystemInstantiationAccess() {
		return (pSystemInstantiation != null) ? pSystemInstantiation : (pSystemInstantiation = new SystemInstantiationElements());
	}
	
	public ParserRule getSystemInstantiationRule() {
		return getSystemInstantiationAccess().getRule();
	}

	//// Plasmid instantiation 
	//PlasmidInstantiation:
	//	{PlasmidInstantiation} "PLASMID" name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public PlasmidInstantiationElements getPlasmidInstantiationAccess() {
		return (pPlasmidInstantiation != null) ? pPlasmidInstantiation : (pPlasmidInstantiation = new PlasmidInstantiationElements());
	}
	
	public ParserRule getPlasmidInstantiationRule() {
		return getPlasmidInstantiationAccess().getRule();
	}

	//// Chromosome instantiation 
	//ChromosomeInstantiation:
	//	{ChromosomeInstantiation} "CHROMOSOME" name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public ChromosomeInstantiationElements getChromosomeInstantiationAccess() {
		return (pChromosomeInstantiation != null) ? pChromosomeInstantiation : (pChromosomeInstantiation = new ChromosomeInstantiationElements());
	}
	
	public ParserRule getChromosomeInstantiationRule() {
		return getChromosomeInstantiationAccess().getRule();
	}

	//// Cell instantiation 
	//CellInstantiation:
	//	{CellInstantiation} "CELL" name=VariableName ("=" "new" constructor=VariableName "(" (parameters+=ParameterAssignment
	//	("," parameters+=ParameterAssignment)*)? ")")?;
	public CellInstantiationElements getCellInstantiationAccess() {
		return (pCellInstantiation != null) ? pCellInstantiation : (pCellInstantiation = new CellInstantiationElements());
	}
	
	public ParserRule getCellInstantiationRule() {
		return getCellInstantiationAccess().getRule();
	}

	/////////////////
	//// variables //
	/////////////////
	//// a variable
	//VariableName:
	//	ID;
	public VariableNameElements getVariableNameAccess() {
		return (pVariableName != null) ? pVariableName : (pVariableName = new VariableNameElements());
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//// variable types
	//VariableType:
	//	"MOLECULE" | "CHASSIS" | "COMPLEX" | "RIBOSOME" | "PROMOTER" | "PROTEIN" | "DNA" | "RNA" | "GENE" | "INTEGER" |
	//	"RATE";
	public VariableTypeElements getVariableTypeAccess() {
		return (pVariableType != null) ? pVariableType : (pVariableType = new VariableTypeElements());
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}

	//// a variable complex
	//VariableComplex:
	//	{VariableComplex} components+=VariableName ("~" components+=VariableName)+;
	public VariableComplexElements getVariableComplexAccess() {
		return (pVariableComplex != null) ? pVariableComplex : (pVariableComplex = new VariableComplexElements());
	}
	
	public ParserRule getVariableComplexRule() {
		return getVariableComplexAccess().getRule();
	}

	//// a variable attribute
	//VariableAttribute:
	//	{VariableAttribute} (name=VariableName | complex=VariableComplex) "." attribute=VariableName;
	public VariableAttributeElements getVariableAttributeAccess() {
		return (pVariableAttribute != null) ? pVariableAttribute : (pVariableAttribute = new VariableAttributeElements());
	}
	
	public ParserRule getVariableAttributeRule() {
		return getVariableAttributeAccess().getRule();
	}

	//// a definition of a variable
	//VariableDefinition:
	//	{VariableDefinition} definition=(VariableDefinitionBuiltIn | VariableDefinitionUserDefined |
	//	VariableDefinitionCollection | VariableDefinitionBasic) (":" qualifier=VariableQualifier)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//// a variable qualifier
	//VariableQualifier:
	//	"observable";
	public VariableQualifierElements getVariableQualifierAccess() {
		return (pVariableQualifier != null) ? pVariableQualifier : (pVariableQualifier = new VariableQualifierElements());
	}
	
	public ParserRule getVariableQualifierRule() {
		return getVariableQualifierAccess().getRule();
	}

	//VariableDefinitionBuiltIn:
	//	{VariableDefinitionBuiltIn} type=VariableType (name=VariableName | complex=VariableComplex) ("=" "new"
	//	constructor=(VariableType | VariableName) "(" (parameters+=ParameterAssignment (","
	//	parameters+=ParameterAssignment)*)? ")")?;
	public VariableDefinitionBuiltInElements getVariableDefinitionBuiltInAccess() {
		return (pVariableDefinitionBuiltIn != null) ? pVariableDefinitionBuiltIn : (pVariableDefinitionBuiltIn = new VariableDefinitionBuiltInElements());
	}
	
	public ParserRule getVariableDefinitionBuiltInRule() {
		return getVariableDefinitionBuiltInAccess().getRule();
	}

	//VariableDefinitionUserDefined:
	//	{VariableDefinitionUserDefined} type=VariableName name=VariableName ("=" "new" constructor=VariableName "("
	//	(parameters+=ParameterAssignment ("," parameters+=ParameterAssignment)*)? ")")?;
	public VariableDefinitionUserDefinedElements getVariableDefinitionUserDefinedAccess() {
		return (pVariableDefinitionUserDefined != null) ? pVariableDefinitionUserDefined : (pVariableDefinitionUserDefined = new VariableDefinitionUserDefinedElements());
	}
	
	public ParserRule getVariableDefinitionUserDefinedRule() {
		return getVariableDefinitionUserDefinedAccess().getRule();
	}

	//VariableDefinitionCollection:
	//	{VariableDefinitionCollection} (collection=CollectionID "<" type=(VariableType | VariableName) ">" name=VariableName)
	//	("=" value=List ")")?;
	public VariableDefinitionCollectionElements getVariableDefinitionCollectionAccess() {
		return (pVariableDefinitionCollection != null) ? pVariableDefinitionCollection : (pVariableDefinitionCollection = new VariableDefinitionCollectionElements());
	}
	
	public ParserRule getVariableDefinitionCollectionRule() {
		return getVariableDefinitionCollectionAccess().getRule();
	}

	//// variable collections
	//CollectionID:
	//	"LIST" | "SET" | "HASH";
	public CollectionIDElements getCollectionIDAccess() {
		return (pCollectionID != null) ? pCollectionID : (pCollectionID = new CollectionIDElements());
	}
	
	public ParserRule getCollectionIDRule() {
		return getCollectionIDAccess().getRule();
	}

	//VariableDefinitionBasic:
	//	{VariableDefinitionBasic} type=VariableType name=VariableName "=" expression=VariableExpression;
	public VariableDefinitionBasicElements getVariableDefinitionBasicAccess() {
		return (pVariableDefinitionBasic != null) ? pVariableDefinitionBasic : (pVariableDefinitionBasic = new VariableDefinitionBasicElements());
	}
	
	public ParserRule getVariableDefinitionBasicRule() {
		return getVariableDefinitionBasicAccess().getRule();
	}

	//// a parameter assignment
	//ParameterAssignment:
	//	name=VariableName "=" value=VariableExpressionObject;
	public ParameterAssignmentElements getParameterAssignmentAccess() {
		return (pParameterAssignment != null) ? pParameterAssignment : (pParameterAssignment = new ParameterAssignmentElements());
	}
	
	public ParserRule getParameterAssignmentRule() {
		return getParameterAssignmentAccess().getRule();
	}

	//// a variable assignment
	//VariableAssignment:
	//	{VariableAssignment} variable=VariableAssignmentObject "=" expression=VariableExpression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//VariableAssignmentObject:
	//	{VariableAssignmentObject} VariableName | VariableAttribute;
	public VariableAssignmentObjectElements getVariableAssignmentObjectAccess() {
		return (pVariableAssignmentObject != null) ? pVariableAssignmentObject : (pVariableAssignmentObject = new VariableAssignmentObjectElements());
	}
	
	public ParserRule getVariableAssignmentObjectRule() {
		return getVariableAssignmentObjectAccess().getRule();
	}

	//VariableExpression:
	//	{VariableExpression} members+=VariableExpressionObject (VariableExpressionOperator
	//	members+=VariableExpressionObject)*;
	public VariableExpressionElements getVariableExpressionAccess() {
		return (pVariableExpression != null) ? pVariableExpression : (pVariableExpression = new VariableExpressionElements());
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}

	//VariableExpressionObject:
	//	AtomicVariableExpressionObject | CompoundVariableExpressionObject;
	public VariableExpressionObjectElements getVariableExpressionObjectAccess() {
		return (pVariableExpressionObject != null) ? pVariableExpressionObject : (pVariableExpressionObject = new VariableExpressionObjectElements());
	}
	
	public ParserRule getVariableExpressionObjectRule() {
		return getVariableExpressionObjectAccess().getRule();
	}

	//AtomicVariableExpressionObject:
	//	{AtomicVariableExpressionObject} variable=VariableName | attribute=VariableAttribute | complex=VariableComplex |
	//	value=REAL | quantity=Quantity | string=STRING;
	public AtomicVariableExpressionObjectElements getAtomicVariableExpressionObjectAccess() {
		return (pAtomicVariableExpressionObject != null) ? pAtomicVariableExpressionObject : (pAtomicVariableExpressionObject = new AtomicVariableExpressionObjectElements());
	}
	
	public ParserRule getAtomicVariableExpressionObjectRule() {
		return getAtomicVariableExpressionObjectAccess().getRule();
	}

	//CompoundVariableExpressionObject:
	//	{CompoundVariableExpressionObject} list=List;
	public CompoundVariableExpressionObjectElements getCompoundVariableExpressionObjectAccess() {
		return (pCompoundVariableExpressionObject != null) ? pCompoundVariableExpressionObject : (pCompoundVariableExpressionObject = new CompoundVariableExpressionObjectElements());
	}
	
	public ParserRule getCompoundVariableExpressionObjectRule() {
		return getCompoundVariableExpressionObjectAccess().getRule();
	}

	//VariableExpressionOperator:
	//	"+" | "-" | "|";
	public VariableExpressionOperatorElements getVariableExpressionOperatorAccess() {
		return (pVariableExpressionOperator != null) ? pVariableExpressionOperator : (pVariableExpressionOperator = new VariableExpressionOperatorElements());
	}
	
	public ParserRule getVariableExpressionOperatorRule() {
		return getVariableExpressionOperatorAccess().getRule();
	}

	/////////////
	//// rules //
	/////////////
	//// rule definition
	//RuleDefinition:
	//	{RuleDefinition} "RULE" name=VariableName ":" (lhs+=RuleObject ("+" lhs+=RuleObject)*)? ("->" | reversible?="<->")
	//	(rhs+=RuleObject ("+" rhs+=RuleObject)*)?;
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return (pRuleDefinition != null) ? pRuleDefinition : (pRuleDefinition = new RuleDefinitionElements());
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}

	//// left or right hand side of rule
	//RuleObject:
	//	{RuleObject} VariableName | VariableComplex;
	public RuleObjectElements getRuleObjectAccess() {
		return (pRuleObject != null) ? pRuleObject : (pRuleObject = new RuleObjectElements());
	}
	
	public ParserRule getRuleObjectRule() {
		return getRuleObjectAccess().getRule();
	}

	//////////////////
	//// atgc rules //
	//////////////////
	//ATGCDefinition:
	//	{ATGCDefinition} "ATGC" command=ATGCCommand ":" arguments+=VariableName ("," arguments+=VariableName)*;
	public ATGCDefinitionElements getATGCDefinitionAccess() {
		return (pATGCDefinition != null) ? pATGCDefinition : (pATGCDefinition = new ATGCDefinitionElements());
	}
	
	public ParserRule getATGCDefinitionRule() {
		return getATGCDefinitionAccess().getRule();
	}

	//ATGCCommand:
	//	"ARRANGE";
	public ATGCCommandElements getATGCCommandAccess() {
		return (pATGCCommand != null) ? pATGCCommand : (pATGCCommand = new ATGCCommandElements());
	}
	
	public ParserRule getATGCCommandRule() {
		return getATGCCommandAccess().getRule();
	}

	///////////////////////////
	//// model checker rules //
	///////////////////////////
	//PropertyDefinition:
	//	{PropertyDefinition} "VERIFY" property=(ProbabilityProperty | RewardProperty);
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//ProbabilityProperty:
	//	{ProbabilityProperty} stateFormula1=StateFormula (((isEventually?="EVENTUALLY HOLDS" | isNever?="NEVER HOLDS" |
	//	isAlways?="ALWAYS HOLDS") | (isUntilThen?="WILL HOLD UNTIL THEN" | isFollowedBy?="IS FOLLOWED BY")
	//	stateFormula2=StateFormula) (timeInstant=TimeInstant | timeInterval=TimeInterval)? |
	//	(isSteadyState?="HOLDS IN STEADY-STATE" | isInfinitelyOften?="HOLDS INFINITELY OFTEN"))
	//	probabilityConstraint=ProbabilityConstraint? ("GIVEN" initialConditions+=PropertyInitialCondition (","
	//	initialConditions+=PropertyInitialCondition)*)?;
	public ProbabilityPropertyElements getProbabilityPropertyAccess() {
		return (pProbabilityProperty != null) ? pProbabilityProperty : (pProbabilityProperty = new ProbabilityPropertyElements());
	}
	
	public ParserRule getProbabilityPropertyRule() {
		return getProbabilityPropertyAccess().getRule();
	}

	//RewardProperty:
	//	{RewardProperty} "EXPECTED" "[" name=VariableName "]" timeInstant=RewardTimeInstant "IS "
	//	concentrationConstraint=ConcentrationConstraint ("GIVEN" initialConditions+=PropertyInitialCondition (","
	//	initialConditions+=PropertyInitialCondition)*)?;
	public RewardPropertyElements getRewardPropertyAccess() {
		return (pRewardProperty != null) ? pRewardProperty : (pRewardProperty = new RewardPropertyElements());
	}
	
	public ParserRule getRewardPropertyRule() {
		return getRewardPropertyAccess().getRule();
	}

	//StateExpression:
	//	{StateExpression} name=VariableName operator=RelationalOperator concentrationQuantity=ConcentrationQuantity;
	public StateExpressionElements getStateExpressionAccess() {
		return (pStateExpression != null) ? pStateExpression : (pStateExpression = new StateExpressionElements());
	}
	
	public ParserRule getStateExpressionRule() {
		return getStateExpressionAccess().getRule();
	}

	//StateFormula:
	//	{StateFormula} formula="[" atomicFormula=StateExpression "]" | "[" isNegation?="NOT" negatedFormula=StateFormula "]" |
	//	"[" leftFormula=StateFormula (isConjunction?="AND" | isDisjunction?="OR" | isImplication?="IMPLIES")
	//	rightFormula=StateFormula "]";
	public StateFormulaElements getStateFormulaAccess() {
		return (pStateFormula != null) ? pStateFormula : (pStateFormula = new StateFormulaElements());
	}
	
	public ParserRule getStateFormulaRule() {
		return getStateFormulaAccess().getRule();
	}

	//TimeInstant:
	//	{TimeInstant} (isEqualTo?="AT" timeInstant=INT | isLessThanOrEqual?="BEFORE" timeInstant=INT |
	//	isGreaterThanOrEqual?="AFTER" timeInstant=INT) timeUnit=TimeUnit;
	public TimeInstantElements getTimeInstantAccess() {
		return (pTimeInstant != null) ? pTimeInstant : (pTimeInstant = new TimeInstantElements());
	}
	
	public ParserRule getTimeInstantRule() {
		return getTimeInstantAccess().getRule();
	}

	//TimeInterval:
	//	{TimeInterval} "WITHIN" "[" lowerBound=INT "," upperBound=INT "]" timeUnit=TimeUnit;
	public TimeIntervalElements getTimeIntervalAccess() {
		return (pTimeInterval != null) ? pTimeInterval : (pTimeInterval = new TimeIntervalElements());
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}

	//RewardTimeInstant:
	//	{RewardTimeInstant} (isEqualTo?="AT" | isLessThanOrEqual?="WITHIN") timeValue=INT timeUnit=TimeUnit;
	public RewardTimeInstantElements getRewardTimeInstantAccess() {
		return (pRewardTimeInstant != null) ? pRewardTimeInstant : (pRewardTimeInstant = new RewardTimeInstantElements());
	}
	
	public ParserRule getRewardTimeInstantRule() {
		return getRewardTimeInstantAccess().getRule();
	}

	//ProbabilityConstraint:
	//	{ProbabilityConstraint} "WITH PROBABILITY" (operator=RelationalOperator probability=UnitInterval |
	//	hasUnknownProbability?="?");
	public ProbabilityConstraintElements getProbabilityConstraintAccess() {
		return (pProbabilityConstraint != null) ? pProbabilityConstraint : (pProbabilityConstraint = new ProbabilityConstraintElements());
	}
	
	public ParserRule getProbabilityConstraintRule() {
		return getProbabilityConstraintAccess().getRule();
	}

	//ConcentrationConstraint:
	//	{ConcentrationConstraint} (operator=RelationalOperator value=REAL unit=ConcentrationUnit) | isUnknown?="?";
	public ConcentrationConstraintElements getConcentrationConstraintAccess() {
		return (pConcentrationConstraint != null) ? pConcentrationConstraint : (pConcentrationConstraint = new ConcentrationConstraintElements());
	}
	
	public ParserRule getConcentrationConstraintRule() {
		return getConcentrationConstraintAccess().getRule();
	}

	////StateFormula:
	////	{StateFormula}
	////'[' stateFormula+=StateFormula (BooleanOperator stateFormula+=StateFormula)* ']'
	//PropertyInitialCondition:
	//	{PropertyInitialCondition} variable=VariableAssignmentObject "=" value=ConcentrationQuantity;
	public PropertyInitialConditionElements getPropertyInitialConditionAccess() {
		return (pPropertyInitialCondition != null) ? pPropertyInitialCondition : (pPropertyInitialCondition = new PropertyInitialConditionElements());
	}
	
	public ParserRule getPropertyInitialConditionRule() {
		return getPropertyInitialConditionAccess().getRule();
	}

	///////////////////
	//// basic types //
	///////////////////
	//REAL:
	//	Decimal | DecimalExp;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//UnitInterval:
	//	"1.0" | "." INT* | "0." INT*;
	public UnitIntervalElements getUnitIntervalAccess() {
		return (pUnitInterval != null) ? pUnitInterval : (pUnitInterval = new UnitIntervalElements());
	}
	
	public ParserRule getUnitIntervalRule() {
		return getUnitIntervalAccess().getRule();
	}

	//Decimal hidden():
	//	("+" | "-")? INT ("." INT)?;
	public DecimalElements getDecimalAccess() {
		return (pDecimal != null) ? pDecimal : (pDecimal = new DecimalElements());
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}

	//DecimalExp hidden():
	//	("+" | "-")? INT ("." INT)? ("E" | "e") ("+" | "-")? INT;
	public DecimalExpElements getDecimalExpAccess() {
		return (pDecimalExp != null) ? pDecimalExp : (pDecimalExp = new DecimalExpElements());
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}

	//TimeUnit:
	//	"s" | "min" | "mins";
	public TimeUnitElements getTimeUnitAccess() {
		return (pTimeUnit != null) ? pTimeUnit : (pTimeUnit = new TimeUnitElements());
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//FluxUnit:
	//	"s^-1" | "min^-1";
	public FluxUnitElements getFluxUnitAccess() {
		return (pFluxUnit != null) ? pFluxUnit : (pFluxUnit = new FluxUnitElements());
	}
	
	public ParserRule getFluxUnitRule() {
		return getFluxUnitAccess().getRule();
	}

	//ConcentrationUnit:
	//	"M" | "mM" | "uM" | "nM" | "pM" | "fM" | "molecule" | "molecules";
	public ConcentrationUnitElements getConcentrationUnitAccess() {
		return (pConcentrationUnit != null) ? pConcentrationUnit : (pConcentrationUnit = new ConcentrationUnitElements());
	}
	
	public ParserRule getConcentrationUnitRule() {
		return getConcentrationUnitAccess().getRule();
	}

	//Unit:
	//	TimeUnit | FluxUnit | ConcentrationUnit;
	public UnitElements getUnitAccess() {
		return (pUnit != null) ? pUnit : (pUnit = new UnitElements());
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//// a quantity with units
	//Quantity:
	//	{Quantity} value=REAL units=Unit;
	public QuantityElements getQuantityAccess() {
		return (pQuantity != null) ? pQuantity : (pQuantity = new QuantityElements());
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}

	//ConcentrationQuantity:
	//	{ConcentrationQuantity} value=REAL unit=ConcentrationUnit;
	public ConcentrationQuantityElements getConcentrationQuantityAccess() {
		return (pConcentrationQuantity != null) ? pConcentrationQuantity : (pConcentrationQuantity = new ConcentrationQuantityElements());
	}
	
	public ParserRule getConcentrationQuantityRule() {
		return getConcentrationQuantityAccess().getRule();
	}

	//// relational operators
	//RelationalOperator:
	//	"==" | "!=" | "<" | ">" | "<=" | ">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// boolean operator
	//BooleanOperator:
	//	"NOT" | "AND" | "OR" | "IMPLIES";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (pBooleanOperator != null) ? pBooleanOperator : (pBooleanOperator = new BooleanOperatorElements());
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//// qualified name
	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//List:
	//	{List} "[" entries+=AtomicVariableExpressionObject ("," entries+=AtomicVariableExpressionObject)* "]";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
