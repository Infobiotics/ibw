/*
 * generated by Xtext
 */
package roadblock.xtext.ibl.generator

import java.io.IOException
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.xmi.util.XMLProcessor
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import roadblock.dataprocessing.flatModel.FlatModelManager
import roadblock.dataprocessing.model.ModelBuilder
import roadblock.dataprocessing.model.PropertyBuilder
import roadblock.emf.ibl.Ibl.FlatModel
import roadblock.emf.ibl.Ibl.IProperty
import roadblock.emf.ibl.Ibl.Model
import roadblock.modelchecking.translation.TranslationManager
import roadblock.modelchecking.translation.TranslationTarget

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class IblGenerator implements IGenerator {

	private PropertyBuilder propertyBuilder = new PropertyBuilder();
	private TranslationManager translationManager = TranslationManager::instance;

	// export an EMF model to XML
	// via http://techblog.goelite.org/sending-emf-models-via-soap/
	def public static String convertToXml(EObject eObject) throws IOException {
        var resource = new XMLResourceImpl
        var processor = new XMLProcessor
        resource.setEncoding("UTF-8");
        resource.contents.add(eObject);
        return processor.saveToString(resource, null);
    }

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		var modelPopulater = new ModelBuilder();
		var Model emfModel = modelPopulater.populate(resource.allContents.filter(roadblock.xtext.ibl.ibl.Model).head)
	
		println()
		println("After population")
		println("===============")
		
		//var xml = convertToXml(emfModel)
		//println(xml)
		
		//fsa.generateFile('EMFModel.xml', xml)
		
//		fsa.generateFile('unitTestingGenerator.xml', 'someContent')

		var flatModelManager = new FlatModelManager(emfModel);
		var properties = flatModelManager.properties;
		var property = properties.get(8);
		var FlatModel flatModel = flatModelManager.getFlatModel(property);
		
		println("# of properties: " + properties.size);
		println("# of molecules: " + flatModel.moleculeList.size);
		println("# of rules: " + flatModel.ruleList.size);
		
		println("Translated Properties: \n");
		
		for(IProperty p : properties) {
			println(translationManager.translate(p, TranslationTarget.PRISM));
		}
				
		println("Model Translation: \n" + translationManager.translate(flatModel, property, TranslationTarget.PRISM));
	}
}	


