/*
 * generated by Xtext
 */
package roadblock.xtext.ibl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import roadblock.emf.ibl.Ibl.impl.IblPackageImpl
import roadblock.emf.ibl.Ibl.IblFactory

import roadblock.xtext.ibl.ibl.Model
import roadblock.xtext.ibl.ibl.FunctionDefinition
import roadblock.xtext.ibl.ibl.RuleDefinition



/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class IblGenerator implements IGenerator {
	private IblFactory factory
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))

	// Create an empty emf model
	IblPackageImpl::init
	factory = IblFactory::eINSTANCE
	val roadblock.emf.ibl.Ibl.Model emfModel = factory.createModel
	
	// set emfmodel attribute
	emfModel.setName("Main model")
	
	// populate emf model from xtext mode
	populateProcesses(resource, emfModel)
	}
	
	def populateProcesses(Resource resource, roadblock.emf.ibl.Ibl.Model emfModel)
	{
		for(functionDefinition: resource.allContents.toIterable.filter(typeof(FunctionDefinition)))
		{
			if(functionDefinition.type == "PROCESS") {
				// create new emf process
				val emfProcess = factory.createProcess
				// set emf process attributes from xtext model
				emfProcess.setName(functionDefinition.name)
					print("new process: ")
					println(emfProcess.name)
				
				// set rules
				for(rule: functionDefinition.members.filter(typeof(RuleDefinition))){
					// create new rule
					val emfRule = factory.createRule
					// set emf rule attribute
					emfRule.setName(rule.name)
					
					// add rule to process
					emfProcess.ruleList.add(emfRule)
					print("new rule: ")
					println(emfRule.name)
				}
				// add process to the list
				emfModel.processList.add(emfProcess)	
			}
		}	
		
	}
}
