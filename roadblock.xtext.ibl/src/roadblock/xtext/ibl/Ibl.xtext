// xtext grammar for Roadblock IBL language
// 2013, released under GNU GPL V3
// jamie.twycross AT nottingham.ac.uk

grammar roadblock.xtext.ibl.Ibl with org.eclipse.xtext.common.Terminals

generate ibl "http://www.xtext.roadblock/ibl/Ibl"

/////////////////////
// top level rules //
/////////////////////

// a model is composed of top level model members
Model:
	{Model}
	members+=ModelMember*
;
	
// model members are an import statement, variable definition or function definition
ModelMember:
	ImportStatement | FunctionDefinition
;

//////////////////////
// import statement //
//////////////////////

ImportStatement:
	{Import}
	'import' importedNamespace=QualifiedNameWithWildcard
;

///////////////
// functions //
///////////////

// a function definition
FunctionDefinition:
	{FunctionDefinition}
	'define' type=FunctionType name=VariableName
	'('
		(parameters+=FunctionParameterMember (',' parameters+=FunctionParameterMember)*)?
	')'
	'{'
		members+=FunctionBodyMember*
	'}'
	(
	'USES'
		uses+=FunctionUseMember (',' uses+=FunctionUseMember)*
	)?
;

// function types
FunctionType:
	'PROCESS' | 'SITE' | 'CELL'
;

// function parameter member
FunctionParameterMember:
	type=VariableType name=VariableName (':' scope=FunctionParameterScope)?
;

// allowed scope of function parameters
FunctionParameterScope:
	'required' | 'returned' | 'optional'
;

// function definition body member
FunctionBodyMember:
	RuleDefinition | DeviceDefinition | VariableAssignment | VariableDefinition | ATGCDefinition | PropertyDefinition
;

// function use member
FunctionUseMember:
	type=VariableType name=VariableName
;

///////////////
// variables //
///////////////

// a variable
VariableName:
	ID
;

// a variable complex
VariableComplex:
	{VariableComplex}
	components+=ID ('~' components+=ID)+ 
; 

// a variable attribute
VariableAttribute:
	{VariableAttribute}
	name=VariableName '.' attribute=ID
;

// a declaration of a variable
VariableDefinition:
	{VariableDefinition}
	(qualifier=VariableQualifier)?
	((type=VariableType name=ID) |
	(collection=CollectionID '<' type=VariableType '>' name=ID))
	(
		'=' constructor=(VariableType | ID) '(' (parameters+=ParameterAssignment (',' parameters+=ParameterAssignment)*)? ')'
	)?
;

ParameterAssignment:
	name=VariableName '=' value=VariableExpressionObject
;

VariableQualifier:
	'observable'
;

VariableType:
	'MOLECULE' | 'CELL' | 'RIBOSOME' | 'PROMOTER' | 'PROTEIN' | 'DNA' | 'RNA' | 'GENE' | 'INTEGER' | 'RATE' | 'PROCESS'
;

CollectionID:
	'LIST' | 'SET'
;

VariableAssignment:
	{VariableAssignment}
	 variable=VariableAssignmentObject '=' expression=VariableExpression
;

VariableAssignmentObject:
	{VariableAssignmentObject}
	VariableName | VariableAttribute
;

VariableExpression:
	{VariableExpression}
	members+=VariableExpressionObject (VariableExpressionOperator members+=VariableExpressionObject)*
;

VariableExpressionObject:
	{VariableExpressionObject}
	VariableName | VariableAttribute | VariableComplex | value=REAL | quantity=Quantity
;

VariableExpressionOperator:
	'+' | '-' | '|'
;

///////////
// rules //
///////////

// rule definition
RuleDefinition:
	{RuleDefinition}
	'RULE' name=VariableName ':' (lhs+=RuleObject ('+' lhs+=RuleObject)*)? ('->'|reversible?='<->') (rhs+=RuleObject ('+' rhs+=RuleObject)*)?
;

// left or right hand side of rule
RuleObject:
	{RuleObject}
	VariableName | VariableComplex 
;

/////////////
// devices //
/////////////

// device definition
DeviceDefinition:
	{DeviceDefinition}
	'DEVICE' name=VariableName '=' 'DEVICE'
	'('
		(parts+=VariableName (',' parts+=VariableName)*)
	')'
	'('
		(parameters+=ParameterAssignment (',' parameters+=ParameterAssignment)*)?
	')'
	'{'
		(members+=DeviceMembers*)
	'}'
;

DeviceMembers:
	VariableDefinition | PropertyDefinition
;

////////////////
// atgc rules //
////////////////

ATGCDefinition:
	{ATGCDefinition}
	'ATGC' command=ATGCCommand ':' arguments+=VariableName (',' arguments+=VariableName)*
;

ATGCCommand:
	'ARRANGE'
;

/////////////////////////
// model checker rules //
/////////////////////////

PropertyDefinition:
	{PropertyDefinition}
	'VERIFY'
	((
		'[' property+=Property (BooleanOperator property+=Property)* ']' condition=PropertyCondition	
	) | 
	(
		'EXPECTED' '[' name=VariableName ']' 'AT TIME INSTANT' time=Quantity 'IS' ((operator=RelationalOperator concentration=Quantity) | '?')
	))
;

Property:
	{Property}
	lhs=ID operator=RelationalOperator rhs=Quantity
;

PropertyCondition:
	{PropertyCondition}
	(
	'WILL HOLD' |
	'NEVER HOLDS' |
	'ALWAYS HOLDS'
	)
	(
	'WITHIN TIME BOUND' '[' lowerBound=Quantity ',' upperBounds=Quantity ']'
		(
		'WITH PROBABILITY BOUND' ((operator=RelationalOperator probability=REAL) | '?') 
		)?
	)?	 
;

/////////////////
// basic types //
/////////////////

// a real number
REAL:
	Decimal | DecimalExp
;

Decimal hidden():
	('+'|'-')?  INT ('.' INT)?
;

DecimalExp hidden():
	('+'|'-')? INT ('.' INT)? ('E'|'e') ('+'|'-')? INT
;

// a quantity with units
Quantity:
	{Quantity}
	value=REAL units=Unit
;

Unit:
	's' | 'min' | 'mins' | 's^-1' | 'min^-1' | 'M' | 'mM' | 'uM' | 'nM' | 'pM' | 'fM' | 'molecule' | 'molecules' 
;
// relational operators
RelationalOperator:
	'==' | '!=' | '<' | '>' | '<=' | '>='
;

// boolean operator
BooleanOperator:
	'&' | '|'
;

// qualified name
QualifiedNameWithWildcard:
	QualifiedName ('.*')?
;

QualifiedName:
	ID ('.' ID)*
;

