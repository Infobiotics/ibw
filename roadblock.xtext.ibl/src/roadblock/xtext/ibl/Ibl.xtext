// xtext grammar for Roadblock IBL language
// 2013, released under GNU GPL V3
// jamie.twycross AT nottingham.ac.uk

grammar roadblock.xtext.ibl.Ibl with org.eclipse.xtext.common.Terminals

generate ibl "http://www.xtext.roadblock/ibl/Ibl"

/////////////////////
// top level rules //
/////////////////////

// a model is composed of top level model members
Model:
	{Model}
	members+=ModelMember*
;
	
// model members are an import statement, variable definition or function definition
ModelMember:
	ImportStatement | FunctionDefinition
;

//////////////////////
// import statement //
//////////////////////

ImportStatement:
	{Import}
	'import' importedNamespace=QualifiedNameWithWildcard
;

//// a variable definition
//VariableDefinition:
//	{VariableDefinition}
//	'define' (type=ID)? name=ID
//	'{'
//		members+=VariableDefinitionMember*
//	'}'	
//;
//
///////////////
// functions //
///////////////

// a function definition
FunctionDefinition:
	{FunctionDefinition}
	'define' type=FunctionType name=VariableName
	'('
		(parameters+=FunctionParameterMember (',' parameters+=FunctionParameterMember)*)?
	')'
	'{'
		members+=FunctionBodyMember*
	'}'
	(
	'USES'
		uses+=FunctionUseMember (',' uses+=FunctionUseMember)*
	)?
;

// function types
FunctionType:
	'PROCESS' | 'SITE' | 'CELL'
;

// function parameter member
FunctionParameterMember:
	type=VariableType name=VariableName (':' scope=FunctionParameterScope)?
;

// allowed scope of function parameters
FunctionParameterScope:
	'required' | 'returned' | 'optional'
;

// function definition body member
FunctionBodyMember:
	RuleDefinition | DeviceDefinition | VariableAssignment | VariableDefinition | ATGCDefinition | PropertyDefinition
;

// function use member
FunctionUseMember:
	type=VariableType name=VariableName
;

///////////////
// variables //
///////////////

// a variable
VariableName:
	{VariableName}
	ID
;

// a variable complex
VariableComplex:
	{VariableComplex}
	components+=ID ('~' components+=ID)+ 
; 

// a variable attribute
VariableAttribute:
	{VariableAttribute}
	name=ID '.' attribute=ID
//	name=(ID|REAL) (('.'|'~') attribute=ID)?
;

// entries allowed inside variable definition
//VariableDefinitionMember:
//	VariableDeclaration
//;

// a declaration of a variable
VariableDefinition:
	{VariableDefinition}
	(qualifier=VariableQualifier)?
	((type=VariableType name=ID) |
	(collection=CollectionID '<' type=VariableType '>' name=ID))
	(
		'=' constructor=(VariableType | ID) '(' (parameters+=ParameterAssignment (',' parameters+=ParameterAssignment)*)? ')'
	)?
;

ParameterAssignment:
	name=ID '=' value=(VariableName | VariableComplex | REAL)
;

VariableQualifier:
	'observable'
;

VariableType:
	'MOLECULE' | 'CELL' | 'RIBOSOME' | 'PROMOTER' | 'PROTEIN' | 'DNA' | 'RNA' | 'GENE' | 'INTEGER' | 'RATE' | 'PROCESS'
;

CollectionID:
	'LIST' | 'SET'
;

VariableAssignment:
	{VariableAssignment}
	 variable=(VariableName | VariableAttribute) '=' expression=VariableExpression
;

VariableExpression:
	{VariableExpression}
	members+=(VariableAttribute | VariableName | REAL) (VariableExpressionOperator members+=(VariableAttribute | VariableName | REAL))*
;

VariableExpressionOperator:
	'+' | '-' | '|'
;

///////////
// rules //
///////////

// rule definition
RuleDefinition:
	{RuleDefinition}
	'RULE' name=VariableName ':' (lhs+=RuleObject ('+' lhs+=RuleObject)*)? ('->'|reversible?='<->') (rhs+=RuleObject ('+' rhs+=RuleObject)*)?
;

// left or right hand side of rule
RuleObject:
	VariableName | VariableComplex 
;

///////////////
// processes //
///////////////

//// processes are collections of rules
//
//// a process definition
//ProcessDefinition:
//	{ProcessDefinition}
//	'define' 'PROCESS' name=ID
//	'('
//		// process parameters
//		(parameters+=ProcessParameterMember (',' parameters+=ProcessParameterMember)*)?
//	')'
//	'{'
//		// process rules
//		members+=ProcessDefinitionMember*
//	'}'
//	(
//	'USES'
//		// process 
//		uses+=ProcessUseMember (',' uses+=ProcessUseMember)*
//	)?
//;
//
//// process parameter member
//ProcessParameterMember:
//	{ProcessParameterMember}
//	type=ID name=ID ':' scope=ProcessParameterScope
//;
//
//// allowed scope of process parameters
//ProcessParameterScope:
//	'required' | 'returned' | 'optional'
//;
//
//// process definition member
//ProcessDefinitionMember:
//	RuleDefinition | VariableAssignment
//;
//
//// process use member
//ProcessUseMember:
//	{ProcessUseMember}
//	type=ID name=ID
//;
//
//// a process call
//ProcessCall:
//	{ProcessCall}
//	'PROCESS' name=ID '=' constructor=ID '(' (parameters+=VariableAssignment (',' parameters+=VariableAssignment)*)? ')'
//;
//

/////////////
// devices //
/////////////

// device definition
DeviceDefinition:
	{DeviceDefinition}
	'DEVICE' name=ID '=' 'DEVICE'
	'('
		(parts+=ID (',' parts+=ID)*)
	')'
	'('
		(parameters+=ParameterAssignment (',' parameters+=ParameterAssignment)*)?
	')'
	'{'
		(members+=DeviceMembers*)
	'}'
;

DeviceMembers:
	VariableDefinition | PropertyDefinition
;

////////////////
// atgc rules //
////////////////

ATGCDefinition:
	{ATGCDefinition}
	'ATGC' command=ID ':' arguments+=ID (',' arguments+=ID)*
;

/////////////////////////
// model checker rules //
/////////////////////////

PropertyDefinition:
	{PropertyDefinition}
	'VERIFY'
	((
		'[' property+=Property (BooleanOperator property+=Property)* ']' condition=PropertyCondition	
	) | 
	(
		'EXPECTED' '[' name=ID ']' 'AT TIME INSTANT' time=REAL 'IS' ((operator=RelationalOperator concentration=Quantity) | '?')
	))
;

Property:
	{Property}
	lhs=ID operator=RelationalOperator rhs=Quantity
;

PropertyCondition:
	{PropertyCondition}
	(
	'WILL HOLD' |
	'NEVER HOLDS' |
	'ALWAYS HOLDS'
	)
	(
	'WITHIN TIME BOUND' '[' lowerBound=REAL ',' upperBounds=REAL ']'
		(
		'WITH PROBABILITY BOUND' ((operator=RelationalOperator probability=REAL) | '?') 
		)?
	)?	 
;

/////////////////
// basic types //
/////////////////

// a real number
REAL:
	{REAL}
	Decimal|DecimalExp
;

Decimal hidden():
	('+'|'-')?  INT ('.' INT)?
;

DecimalExp hidden():
	('+'|'-')? INT ('.' INT)? ('E'|'e') ('+'|'-')? INT
;

// a quantity with units
Quantity:
	{Quantity}
	value=REAL units=ID
;

// relational operators
RelationalOperator:
	'==' | '!=' | '<' | '>' | '<=' | '>='
;

// boolean operator
BooleanOperator:
	'&' | '|'
;

// qualified name
QualifiedNameWithWildcard:
	QualifiedName ('.*')?
;

QualifiedName:
	ID ('.' ID)*
;

